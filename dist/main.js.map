{"version":3,"sources":["webpack://storm-react-diagrams/webpack/universalModuleDefinition","webpack://storm-react-diagrams/webpack/bootstrap","webpack://storm-react-diagrams/external {\"commonjs\":\"lodash\",\"commonjs2\":\"lodash\",\"amd\":\"_\",\"root\":\"_\"}","webpack://storm-react-diagrams/external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack://storm-react-diagrams/./node_modules/pathfinding/src/core/DiagonalMovement.js","webpack://storm-react-diagrams/./src/widgets/BaseWidget.tsx","webpack://storm-react-diagrams/./node_modules/pathfinding/src/core/Util.js","webpack://storm-react-diagrams/./src/models/PointModel.ts","webpack://storm-react-diagrams/./src/models/BaseModel.ts","webpack://storm-react-diagrams/./src/Toolkit.ts","webpack://storm-react-diagrams/./src/factories/AbstractFactory.ts","webpack://storm-react-diagrams/./src/models/NodeModel.ts","webpack://storm-react-diagrams/./node_modules/pathfinding/src/core/Heuristic.js","webpack://storm-react-diagrams/./src/actions/BaseAction.ts","webpack://storm-react-diagrams/./src/models/PortModel.ts","webpack://storm-react-diagrams/./src/BaseEntity.ts","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/JumpPointFinderBase.js","webpack://storm-react-diagrams/./node_modules/heap/index.js","webpack://storm-react-diagrams/./src/routing/PathFinding.ts","webpack://storm-react-diagrams/./src/models/LabelModel.ts","webpack://storm-react-diagrams/./src/defaults/models/DefaultLabelModel.tsx","webpack://storm-react-diagrams/./src/defaults/models/DefaultLinkModel.ts","webpack://storm-react-diagrams/./src/defaults/models/DefaultPortModel.ts","webpack://storm-react-diagrams/./src/models/LinkModel.ts","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/BiAStarFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/AStarFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/core/Node.js","webpack://storm-react-diagrams/./src/main.ts","webpack://storm-react-diagrams/./src/widgets/NodeWidget.tsx","webpack://storm-react-diagrams/./src/widgets/layers/NodeLayerWidget.tsx","webpack://storm-react-diagrams/./src/widgets/LinkWidget.tsx","webpack://storm-react-diagrams/./src/widgets/layers/LinkLayerWidget.tsx","webpack://storm-react-diagrams/./src/actions/SelectingAction.ts","webpack://storm-react-diagrams/./src/actions/MoveItemsAction.ts","webpack://storm-react-diagrams/./src/actions/MoveCanvasAction.ts","webpack://storm-react-diagrams/./src/factories/AbstractNodeFactory.ts","webpack://storm-react-diagrams/./src/widgets/PortWidget.tsx","webpack://storm-react-diagrams/./src/defaults/widgets/DefaultPortLabelWidget.tsx","webpack://storm-react-diagrams/./src/defaults/widgets/DefaultNodeWidget.tsx","webpack://storm-react-diagrams/./src/factories/AbstractLinkFactory.ts","webpack://storm-react-diagrams/./src/defaults/widgets/DefaultLinkWidget.tsx","webpack://storm-react-diagrams/./src/defaults/models/DefaultNodeModel.ts","webpack://storm-react-diagrams/./src/defaults/widgets/DefaultLabelWidget.tsx","webpack://storm-react-diagrams/./src/factories/AbstractLabelFactory.ts","webpack://storm-react-diagrams/./src/defaults/factories/DefaultLabelFactory.tsx","webpack://storm-react-diagrams/./src/factories/AbstractPortFactory.ts","webpack://storm-react-diagrams/./src/defaults/factories/DefaultPortFactory.tsx","webpack://storm-react-diagrams/./src/models/DiagramModel.ts","webpack://storm-react-diagrams/./src/widgets/DiagramWidget.tsx","webpack://storm-react-diagrams/./src/defaults/factories/DefaultNodeFactory.ts","webpack://storm-react-diagrams/./src/defaults/factories/DefaultLinkFactory.tsx","webpack://storm-react-diagrams/./src/DiagramEngine.ts","webpack://storm-react-diagrams/./node_modules/paths-js/geom.js","webpack://storm-react-diagrams/./node_modules/paths-js/path.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfAtMostOneObstacle.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/JPFMoveDiagonallyIfNoObstacles.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/JPFAlwaysMoveDiagonally.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/JPFNeverMoveDiagonally.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/JumpPointFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/IDAStarFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/BiDijkstraFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/BiBreadthFirstFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/BiBestFirstFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/DijkstraFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/BreadthFirstFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/finders/BestFirstFinder.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/core/Grid.js","webpack://storm-react-diagrams/(webpack)/buildin/module.js","webpack://storm-react-diagrams/./node_modules/heap/lib/heap.js","webpack://storm-react-diagrams/./node_modules/pathfinding/src/PathFinding.js","webpack://storm-react-diagrams/./node_modules/pathfinding/index.js","webpack://storm-react-diagrams/./node_modules/matches-selector/index.js","webpack://storm-react-diagrams/./node_modules/closest/index.js"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","DiagonalMovement","Always","Never","IfAtMostOneObstacle","OnlyWhenNoObstacles","React","BaseWidget","_super","__extends","props","_this","this","className","bem","selector","baseClass","getClassName","getProps","__assign","extraProps","Component","backtrace","node","path","x","y","parent","push","reverse","biBacktrace","nodeA","nodeB","pathA","pathB","concat","pathLength","sum","a","b","dx","dy","length","Math","sqrt","interpolate","x0","y0","x1","y1","abs","line","sx","sy","err","e2","expandPath","expanded","len","coord0","coord1","interpolated","interpolatedLen","j","smoothenPath","grid","ex","ey","newPath","coord","testCoord","blocked","isWalkableAt","lastValidCoord","compressPath","compressed","px","py","lx","ly","ldx","ldy","sq","BaseModel_1","_","PointModel","link","points","getSelectedEntities","isSelected","isConnectedToPort","getPortForPoint","getLink","getParent","deSerialize","ob","engine","serialize","merge","remove","removePoint","updateLocation","getX","getY","isLocked","BaseModel","BaseEntity_1","type","id","selected","setParent","getType","getID","setSelected","iterateListeners","listener","event","selectionChanged","entityRemoved","BaseEntity","closest","PathFinding_1","Path","Toolkit","UID","TESTING","TESTING_UID","replace","random","v","toString","element","document","body","generateLinePath","firstPoint","lastPoint","generateCurvePath","curvy","isHorizontal","curvyX","curvyY","generateDynamicPath","pathCoords","ycord","ROUTING_SCALING_FACTOR","moveto","slice","forEach","coords","lineto","print","AbstractFactory","NodeModel","nodeType","extras","ports","setPosition","oldX","oldY","port","getLinks","point","getPointForPort","entities","map","portOb","getPortFactory","getNewInstance","addPort","doClone","lookupTable","clone","getPortFromID","getPort","getPorts","removePort","updateDimensions","_a","width","height","manhattan","euclidean","octile","F","SQRT2","chebyshev","max","BaseAction","mouseX","mouseY","ms","Date","getTime","PortModel","maximumLinks","links","parentNode","getNode","getName","getMaximumLinks","setMaximumLinks","removeLink","addLink","createLinkModel","isFinite","numberOfLinks","size","values","updateCoords","canLinkToPort","Toolkit_1","listeners","locked","clearListeners","data","cb","firing","entity","stopPropagation","removeListener","addListener","uid","setLocked","lockChanged","Heap","Util","Heuristic","JumpPointFinderBase","opt","heuristic","trackJumpRecursion","findPath","startX","startY","endX","endY","openList","f","startNode","getNodeAt","endNode","g","opened","empty","pop","closed","_identifySuccessors","neighbors","neighbor","jumpPoint","jx","jy","ng","jumpNode","_findNeighbors","_jump","h","updateItem","PF","pathFinderInstance","JumpPointFinder","diagonalMovement","PathFinding","diagramEngine","instance","calculateDirectPath","from","to","matrix","getCanvasMatrix","Grid","translateRoutingX","floor","translateRoutingY","calculateLinkStartEndCoords","startIndex","findIndex","endIndex","undefined","pathToStart","pathToEnd","start","end","calculateDynamicPath","routingMatrix","dynamicPath","LabelModel","offsetX","offsetY","LabelModel_1","DefaultLabelModel","setLabel","label","LinkModel_1","DefaultLabelModel_1","DefaultLinkModel","color","curvyness","addLabel","labelOb","setWidth","widthChanged","setColor","colorChanged","LinkModel","PortModel_1","DefaultLinkModel_1","DefaultPortModel","isInput","in","setSourcePort","setTargetPort","keys","PointModel_1","linkType","sourcePort","targetPort","labels","getLabelFactory","target","source","setPoints","getPoints","isLastPoint","index","getPointIndex","indexOf","getPointModel","getFirstPoint","getLastPoint","sourcePortChanged","getSourcePort","getTargetPort","targetPortChanged","addPoint","generatePoint","pointModel","splice","removePointsBefore","removePointsAfter","removeMiddlePoints","BiAStarFinder","allowDiagonal","dontCrossCorners","weight","cmp","startOpenList","endOpenList","BY_START","BY_END","getNeighbors","AStarFinder","Node","walkable","__export","BaseWidget_1","NodeWidget","state","shouldComponentUpdate","canEntityRepaint","render","createElement","data-nodeid","style","top","left","children","NodeWidget_1","NodeLayerWidget","updateNodeDimensions","nodesRendered","diagramModel","getDiagramModel","getNodes","getNodeDimensions","componentDidUpdate","transform","getOffsetX","getOffsetY","getZoomLevel","key","generateWidgetForNode","LinkWidget","LinkWidget_1","LinkLayerWidget","canvas","linksThatHaveInitiallyRendered","portCenter","getPortCenter","portCoords","getPortCoords","ignore","last","generatedLink","generateWidgetForLink","Error","cloneElement","pointAdded","BaseAction_1","SelectingAction","mouseX2","mouseY2","getBoxDimensions","right","bottom","containsElement","z","dimensions","MoveItemsAction","moved","enableRepaintEntities","getSelectedItems","selectedItems","filter","item","isModelLocked","selectionModels","model","initialX","initialY","MoveCanvasAction","initialOffsetX","initialOffsetY","AbstractFactory_1","AbstractNodeFactory","PortWidget","onMouseEnter","setState","onMouseLeave","data-name","PortWidget_1","DefaultPortLabel","DefaultPortLabelWidget_1","DefaultNodeWidget","generatePort","getInPorts","bind","background","bgImage","getOutPorts","AbstractLinkFactory","DefaultLinkWidget","addPointToLink","shiftKey","getMaxNumberPointsPerLink","getRelativeMousePoint","forceUpdate","findPathAndRelativePositionToRenderLabel","paths","refPaths","htmlCollection","svgPathElement","lengths","round","getTotalLength","labelPosition","reduce","previousValue","currentValue","pathIndex","position","calculateLabelPosition","refLabels","labelDimensions","offsetWidth","offsetHeight","pathCentre","getPointAtLength","labelCoordinates","setAttribute","isSmartRoutingEnabled","pathFinding","default","calculateAllLabelPosition","requestAnimationFrame","componentDidMount","pointIndex","cx","cy","data-id","data-linkid","opacity","generateLabel","ref","getFactoryForLabel","generateReactWidget","generateLink","Bottom","getFactoryForLink","generateLinkSegment","Top","strokeLinecap","strokeOpacity","strokeWidth","onContextMenu","preventDefault","isSmartRoutingApplicable","directPathCoords","first","getRoutingMatrix","smartLink","simplifiedPath","onMouseDown","xOrY","margin","pointLeft","pointRight","this_1","data-point","labelModel","defaultProps","smooth","DefaultPortModel_1","NodeModel_1","DefaultNodeModel","addInPort","addOutPort","portModel","DefaultLabelWidget","AbstractLabelFactory","AbstractLabelFactory_1","DefaultLabelWidget_1","DefaultLabelFactory","initialConfig","AbstractPortFactory","AbstractPortFactory_1","DefaultPortFactory","DiagramModel","nodes","zoom","rendered","gridSize","setGridSize","gridUpdated","getGridPosition","pos","deSerializeDiagram","nodeOb","getNodeFactory","addNode","linkOb","getLinkFactory","serializeDiagram","clearSelection","filters","_i","arguments","Array","isArray","items","flatMap","uniq","includes","setZoomLevel","zoomUpdated","setOffset","offsetUpdated","setOffsetX","setOffsetY","addAll","models","linksUpdated","isCreated","removeNode","nodesUpdated","LinkLayerWidget_1","NodeLayerWidget_1","MoveCanvasAction_1","MoveItemsAction_1","SelectingAction_1","DiagramWidget","nodeId","onKeyUpPointer","onMouseMove","onMouseUp","action","wasMoved","renderedNodes","windowListener","diagramEngineListener","componentWillUnmount","setCanvas","removeEventListener","componentWillReceiveProps","nextProps","repaintCanvas","componentWillUpdate","onKeyUp","addEventListener","focus","displayPorts","check","nodeElement","getElementById","childNodes","getMouseElement","getAttribute","fireAction","actionStillFiring","stopFiringAction","shouldSkipEvent","actionStoppedFiring","startFiringAction","actionStartedFiring","relative","getRelativePoint","clientX","clientY","allSelected","amountX_1","amountY_1","amountZoom_1","calculateRoutingMatrix","calculateCanvasMatrix","allowCanvasTranslation","deleteKeys","keyCode","newLink","allowLooseLinks","selectedPoint","some","clearRepaintEntities","drawSelectionBox","setMaxNumberPointsPerLink","maxNumberPointsPerLink","setSmartRoutingStatus","smartRouting","onWheel","allowCanvasZoom","oldZoomFactor","scrollDelta","inverseZoom","deltaY","ctrlKey","zoomFactor","boundingRect","currentTarget","getBoundingClientRect","clientWidth","clientHeight","widthDiff","heightDiff","xFactor","yFactor","Infinity","DefaultNodeModel_1","DefaultNodeWidget_1","AbstractNodeFactory_1","DefaultNodeFactory","DefaultLinkWidget_1","AbstractLinkFactory_1","main_1","DefaultLinkFactory","widget","markerId","markerEndUrl","markerWidth","markerHeight","refX","refY","orient","markerUnits","fill","stroke","markerEnd","DiagramModel_1","DefaultPortFactory_1","DefaultLabelFactory_1","DiagramEngine","canvasMatrix","hAdjustmentFactor","vAdjustmentFactor","calculateMatrixDimensions","allNodesCoords","allLinks","allPortsCoords","allPointsCoords","minX","min","minBy","maxXElement","maxBy","maxX","minY","maxYElement","maxY","ceil","markNodes","markMatrixPoint","markPorts","allElements","nodeFactories","linkFactories","portFactories","labelFactories","paintableWidgets","installDefaultFactories","registerNodeFactory","registerLinkFactory","registerPortFactory","registerLabelFactory","recalculatePortsVisually","baseModel","setDiagramModel","getNodeFactories","getLinkFactories","getLabelFactories","labelFactoriesUpdated","portFactoriesUpdated","nodeFactoriesUpdated","linkFactoriesUpdated","getFactoryForNode","linkFactory","nodeFactory","canvasRect","getNodeElement","querySelector","getNodePortElement","sourceElement","sourceRect","rel","nodeRect","status","canvasWidth","canvasHeight","matrixWidth","matrixHeight","range","cloneDeep","zoomToFit","scrollWidth","scrollHeight","_slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","Symbol","iterator","_s","next","done","TypeError","distPointToPoint","_ref","_ref3","_ref2","ax","ay","_ref32","bx","by","distPointToParabol","circumCenter","xc","yc","parabolsCrossX","fa","fb","q","s1","s2","doHalflinesCross","sa","sb","approx","ps","hp","vec","det","u","matrixTransform","transformEllipse","rx","ry","torad","PI","epsilon","cos","sin","ma","J","K","D","JK","isDegenerate","L","l1","l2","newAx","newRx","newRy","atan","_geom","init","_instructions","el","copy","areEqualPoints","a1","b1","a2","b2","trimZeros","string","char","charAt","substr","number","digits","str","toFixed","printInstrunction","_ref4","command","params","numbers","param","join","_ref5","prev","transformParams","instruction","transformer","V","pts","newPts","H","A","sweepFlag","C","Z","_default","newParams","verbosify","args","k","apply","plus","hlineto","vlineto","closepath","curveto","x2","y2","smoothcurveto","qcurveto","smoothqcurveto","arc","xrot","largeArcFlag","translate","_ret","newInstructions","rotate","angle","_ret2","rad","scale","_ret3","shearX","_ret4","tan","shearY","_ret5","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","instructions","connect","unshift","JPFMoveDiagonallyIfAtMostOneObstacle","constructor","tested","nx","ny","neighborNodes","neighborNode","JPFMoveDiagonallyIfNoObstacles","isNextWalkable","isTopWalkable","isBottomWalkable","isRightWalkable","isLeftWalkable","JPFAlwaysMoveDiagonally","JPFNeverMoveDiagonally","IDAStarFinder","trackRecursion","timeLimit","nodesVisited","startTime","cost","search","cutoff","route","depth","t","neighbour","neighbours","retainCount","cutOff","BiDijkstraFinder","BiBreadthFirstFinder","shift","BiBestFirstFinder","orig","DijkstraFinder","BreadthFirstFinder","BestFirstFinder","width_or_matrix","_buildNodes","isInside","setWalkableAt","s0","d0","d1","d2","s3","d3","thisNodes","newGrid","newNodes","webpackPolyfill","deprecate","defaultCmp","heapify","heappop","heappush","heappushpop","heapreplace","insort","nlargest","nsmallest","_siftdown","_siftup","lo","hi","mid","array","lastelt","returnitem","_j","_len","_ref1","_results","_results1","elem","result","sort","los","startpos","newitem","parentpos","childpos","endpos","rightpos","pushpop","peek","contains","clear","heap","toArray","insert","front","has","proto","Element","vendor","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","match","querySelectorAll","matches","checkYoSelf"],"mappings":"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","file":"main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"lodash\"), require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"_\", \"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"storm-react-diagrams\"] = factory(require(\"lodash\"), require(\"react\"));\n\telse\n\t\troot[\"storm-react-diagrams\"] = factory(root[\"_\"], root[\"React\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 25);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","var DiagonalMovement = {\r\n    Always: 1,\r\n    Never: 2,\r\n    IfAtMostOneObstacle: 3,\r\n    OnlyWhenNoObstacles: 4\r\n};\r\n\r\nmodule.exports = DiagonalMovement;","import * as React from \"react\";\r\nimport * as _ from \"lodash\";\r\n\r\nexport interface BaseWidgetProps {\r\n\t/**\r\n\t * Override the base class name\r\n\t */\r\n\tbaseClass?: string;\r\n\t/**\r\n\t * append additional classes\r\n\t */\r\n\tclassName?: string;\r\n\r\n\t/**\r\n\t * Additional props to add\r\n\t */\r\n\textraProps?: any;\r\n}\r\n\r\nexport class BaseWidget<P extends BaseWidgetProps = BaseWidgetProps, S = any> extends React.Component<P, S> {\r\n\tclassName: string;\r\n\r\n\tconstructor(name: string, props: P) {\r\n\t\tsuper(props);\r\n\t\tthis.className = name;\r\n\t}\r\n\r\n\tbem(selector: string): string {\r\n\t\treturn (this.props.baseClass || this.className) + selector + \" \";\r\n\t}\r\n\r\n\tgetClassName(): string {\r\n\t\treturn (\r\n\t\t\t(this.props.baseClass || this.className) + \" \" + (this.props.className ? this.props.className + \" \" : \"\")\r\n\t\t);\r\n\t}\r\n\r\n\tgetProps(): any {\r\n\t\treturn {\r\n\t\t\t...((this.props.extraProps as any) || {}),\r\n\t\t\tclassName: this.getClassName()\r\n\t\t};\r\n\t}\r\n}\r\n","/**\r\n * Backtrace according to the parent records and return the path.\r\n * (including both start and end nodes)\r\n * @param {Node} node End node\r\n * @return {Array<Array<number>>} the path\r\n */\r\nfunction backtrace(node) {\r\n    var path = [[node.x, node.y]];\r\n    while (node.parent) {\r\n        node = node.parent;\r\n        path.push([node.x, node.y]);\r\n    }\r\n    return path.reverse();\r\n}\r\nexports.backtrace = backtrace;\r\n\r\n/**\r\n * Backtrace from start and end node, and return the path.\r\n * (including both start and end nodes)\r\n * @param {Node}\r\n * @param {Node}\r\n */\r\nfunction biBacktrace(nodeA, nodeB) {\r\n    var pathA = backtrace(nodeA),\r\n        pathB = backtrace(nodeB);\r\n    return pathA.concat(pathB.reverse());\r\n}\r\nexports.biBacktrace = biBacktrace;\r\n\r\n/**\r\n * Compute the length of the path.\r\n * @param {Array<Array<number>>} path The path\r\n * @return {number} The length of the path\r\n */\r\nfunction pathLength(path) {\r\n    var i, sum = 0, a, b, dx, dy;\r\n    for (i = 1; i < path.length; ++i) {\r\n        a = path[i - 1];\r\n        b = path[i];\r\n        dx = a[0] - b[0];\r\n        dy = a[1] - b[1];\r\n        sum += Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n    return sum;\r\n}\r\nexports.pathLength = pathLength;\r\n\r\n\r\n/**\r\n * Given the start and end coordinates, return all the coordinates lying\r\n * on the line formed by these coordinates, based on Bresenham's algorithm.\r\n * http://en.wikipedia.org/wiki/Bresenham's_line_algorithm#Simplification\r\n * @param {number} x0 Start x coordinate\r\n * @param {number} y0 Start y coordinate\r\n * @param {number} x1 End x coordinate\r\n * @param {number} y1 End y coordinate\r\n * @return {Array<Array<number>>} The coordinates on the line\r\n */\r\nfunction interpolate(x0, y0, x1, y1) {\r\n    var abs = Math.abs,\r\n        line = [],\r\n        sx, sy, dx, dy, err, e2;\r\n\r\n    dx = abs(x1 - x0);\r\n    dy = abs(y1 - y0);\r\n\r\n    sx = (x0 < x1) ? 1 : -1;\r\n    sy = (y0 < y1) ? 1 : -1;\r\n\r\n    err = dx - dy;\r\n\r\n    while (true) {\r\n        line.push([x0, y0]);\r\n\r\n        if (x0 === x1 && y0 === y1) {\r\n            break;\r\n        }\r\n        \r\n        e2 = 2 * err;\r\n        if (e2 > -dy) {\r\n            err = err - dy;\r\n            x0 = x0 + sx;\r\n        }\r\n        if (e2 < dx) {\r\n            err = err + dx;\r\n            y0 = y0 + sy;\r\n        }\r\n    }\r\n\r\n    return line;\r\n}\r\nexports.interpolate = interpolate;\r\n\r\n\r\n/**\r\n * Given a compressed path, return a new path that has all the segments\r\n * in it interpolated.\r\n * @param {Array<Array<number>>} path The path\r\n * @return {Array<Array<number>>} expanded path\r\n */\r\nfunction expandPath(path) {\r\n    var expanded = [],\r\n        len = path.length,\r\n        coord0, coord1,\r\n        interpolated,\r\n        interpolatedLen,\r\n        i, j;\r\n\r\n    if (len < 2) {\r\n        return expanded;\r\n    }\r\n\r\n    for (i = 0; i < len - 1; ++i) {\r\n        coord0 = path[i];\r\n        coord1 = path[i + 1];\r\n\r\n        interpolated = interpolate(coord0[0], coord0[1], coord1[0], coord1[1]);\r\n        interpolatedLen = interpolated.length;\r\n        for (j = 0; j < interpolatedLen - 1; ++j) {\r\n            expanded.push(interpolated[j]);\r\n        }\r\n    }\r\n    expanded.push(path[len - 1]);\r\n\r\n    return expanded;\r\n}\r\nexports.expandPath = expandPath;\r\n\r\n\r\n/**\r\n * Smoothen the give path.\r\n * The original path will not be modified; a new path will be returned.\r\n * @param {PF.Grid} grid\r\n * @param {Array<Array<number>>} path The path\r\n */\r\nfunction smoothenPath(grid, path) {\r\n    var len = path.length,\r\n        x0 = path[0][0],        // path start x\r\n        y0 = path[0][1],        // path start y\r\n        x1 = path[len - 1][0],  // path end x\r\n        y1 = path[len - 1][1],  // path end y\r\n        sx, sy,                 // current start coordinate\r\n        ex, ey,                 // current end coordinate\r\n        newPath,\r\n        i, j, coord, line, testCoord, blocked;\r\n\r\n    sx = x0;\r\n    sy = y0;\r\n    newPath = [[sx, sy]];\r\n\r\n    for (i = 2; i < len; ++i) {\r\n        coord = path[i];\r\n        ex = coord[0];\r\n        ey = coord[1];\r\n        line = interpolate(sx, sy, ex, ey);\r\n\r\n        blocked = false;\r\n        for (j = 1; j < line.length; ++j) {\r\n            testCoord = line[j];\r\n\r\n            if (!grid.isWalkableAt(testCoord[0], testCoord[1])) {\r\n                blocked = true;\r\n                break;\r\n            }\r\n        }\r\n        if (blocked) {\r\n            lastValidCoord = path[i - 1];\r\n            newPath.push(lastValidCoord);\r\n            sx = lastValidCoord[0];\r\n            sy = lastValidCoord[1];\r\n        }\r\n    }\r\n    newPath.push([x1, y1]);\r\n\r\n    return newPath;\r\n}\r\nexports.smoothenPath = smoothenPath;\r\n\r\n\r\n/**\r\n * Compress a path, remove redundant nodes without altering the shape\r\n * The original path is not modified\r\n * @param {Array<Array<number>>} path The path\r\n * @return {Array<Array<number>>} The compressed path\r\n */\r\nfunction compressPath(path) {\r\n\r\n    // nothing to compress\r\n    if(path.length < 3) {\r\n        return path;\r\n    }\r\n\r\n    var compressed = [],\r\n        sx = path[0][0], // start x\r\n        sy = path[0][1], // start y\r\n        px = path[1][0], // second point x\r\n        py = path[1][1], // second point y\r\n        dx = px - sx, // direction between the two points\r\n        dy = py - sy, // direction between the two points\r\n        lx, ly,\r\n        ldx, ldy,\r\n        sq, i;\r\n\r\n    // normalize the direction\r\n    sq = Math.sqrt(dx*dx + dy*dy);\r\n    dx /= sq;\r\n    dy /= sq;\r\n\r\n    // start the new path\r\n    compressed.push([sx,sy]);\r\n\r\n    for(i = 2; i < path.length; i++) {\r\n\r\n        // store the last point\r\n        lx = px;\r\n        ly = py;\r\n\r\n        // store the last direction\r\n        ldx = dx;\r\n        ldy = dy;\r\n\r\n        // next point\r\n        px = path[i][0];\r\n        py = path[i][1];\r\n\r\n        // next direction\r\n        dx = px - lx;\r\n        dy = py - ly;\r\n\r\n        // normalize\r\n        sq = Math.sqrt(dx*dx + dy*dy);\r\n        dx /= sq;\r\n        dy /= sq;\r\n\r\n        // if the direction has changed, store the point\r\n        if ( dx !== ldx || dy !== ldy ) {\r\n            compressed.push([lx,ly]);\r\n        }\r\n    }\r\n\r\n    // store the last point\r\n    compressed.push([px,py]);\r\n\r\n    return compressed;\r\n}\r\nexports.compressPath = compressPath;\r\n","import { BaseModel, BaseModelListener } from \"./BaseModel\";\r\nimport { LinkModel } from \"./LinkModel\";\r\nimport * as _ from \"lodash\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\n\r\nexport class PointModel extends BaseModel<LinkModel, BaseModelListener> {\r\n\tx: number;\r\n\ty: number;\r\n\r\n\tconstructor(link: LinkModel, points: { x: number; y: number }) {\r\n\t\tsuper();\r\n\t\tthis.x = points.x;\r\n\t\tthis.y = points.y;\r\n\t\tthis.parent = link;\r\n\t}\r\n\r\n\tgetSelectedEntities() {\r\n\t\tif (super.isSelected() && !this.isConnectedToPort()) {\r\n\t\t\treturn [this];\r\n\t\t}\r\n\t\treturn [];\r\n\t}\r\n\r\n\tisConnectedToPort(): boolean {\r\n\t\treturn this.parent.getPortForPoint(this) !== null;\r\n\t}\r\n\r\n\tgetLink(): LinkModel {\r\n\t\treturn this.getParent();\r\n\t}\r\n\r\n\tdeSerialize(ob, engine: DiagramEngine) {\r\n\t\tsuper.deSerialize(ob, engine);\r\n\t\tthis.x = ob.x;\r\n\t\tthis.y = ob.y;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn _.merge(super.serialize(), {\r\n\t\t\tx: this.x,\r\n\t\t\ty: this.y\r\n\t\t});\r\n\t}\r\n\r\n\tremove() {\r\n\t\t//clear references\r\n\t\tif (this.parent) {\r\n\t\t\tthis.parent.removePoint(this);\r\n\t\t}\r\n\t\tsuper.remove();\r\n\t}\r\n\r\n\tupdateLocation(points: { x: number; y: number }) {\r\n\t\tthis.x = points.x;\r\n\t\tthis.y = points.y;\r\n\t}\r\n\r\n\tgetX(): number {\r\n\t\treturn this.x;\r\n\t}\r\n\r\n\tgetY(): number {\r\n\t\treturn this.y;\r\n\t}\r\n\r\n\tisLocked() {\r\n\t\treturn super.isLocked() || this.getParent().isLocked();\r\n\t}\r\n}\r\n","import { BaseEntity, BaseListener } from \"../BaseEntity\";\r\nimport * as _ from \"lodash\";\r\nimport { BaseEvent } from \"../BaseEntity\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\n\r\nexport interface BaseModelListener extends BaseListener {\r\n\tselectionChanged?(event: BaseEvent<BaseModel> & { isSelected: boolean }): void;\r\n\r\n\tentityRemoved?(event: BaseEvent<BaseModel>): void;\r\n}\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class BaseModel<\r\n\tX extends BaseEntity = BaseEntity,\r\n\tT extends BaseModelListener = BaseModelListener\r\n> extends BaseEntity<T> {\r\n\ttype: string;\r\n\tselected: boolean;\r\n\tparent: X;\r\n\r\n\tconstructor(type?: string, id?: string) {\r\n\t\tsuper(id);\r\n\t\tthis.type = type;\r\n\t\tthis.selected = false;\r\n\t}\r\n\r\n\tpublic getParent(): X {\r\n\t\treturn this.parent;\r\n\t}\r\n\r\n\tpublic setParent(parent: X) {\r\n\t\tthis.parent = parent;\r\n\t}\r\n\r\n\tpublic getSelectedEntities(): BaseModel<any, T>[] {\r\n\t\tif (this.isSelected()) {\r\n\t\t\treturn [this];\r\n\t\t}\r\n\t\treturn [];\r\n\t}\r\n\r\n\tpublic deSerialize(ob, engine: DiagramEngine) {\r\n\t\tsuper.deSerialize(ob, engine);\r\n\t\tthis.type = ob.type;\r\n\t\tthis.selected = ob.selected;\r\n\t}\r\n\r\n\tpublic serialize() {\r\n\t\treturn _.merge(super.serialize(), {\r\n\t\t\ttype: this.type,\r\n\t\t\tselected: this.selected\r\n\t\t});\r\n\t}\r\n\r\n\tpublic getType(): string {\r\n\t\treturn this.type;\r\n\t}\r\n\r\n\tpublic getID(): string {\r\n\t\treturn this.id;\r\n\t}\r\n\r\n\tpublic isSelected(): boolean {\r\n\t\treturn this.selected;\r\n\t}\r\n\r\n\tpublic setSelected(selected: boolean = true) {\r\n\t\tthis.selected = selected;\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.selectionChanged) {\r\n\t\t\t\tlistener.selectionChanged({ ...event, isSelected: selected });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpublic remove() {\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.entityRemoved) {\r\n\t\t\t\tlistener.entityRemoved(event);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n","// tslint:disable no-bitwise\r\nimport closest = require(\"closest\");\r\nimport { PointModel } from \"./models/PointModel\";\r\nimport { ROUTING_SCALING_FACTOR } from \"./routing/PathFinding\";\r\nimport * as Path from \"paths-js/path\";\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class Toolkit {\r\n\tstatic TESTING: boolean = false;\r\n\tstatic TESTING_UID = 0;\r\n\r\n\t/**\r\n\t * Generats a unique ID (thanks Stack overflow :3)\r\n\t * @returns {String}\r\n\t */\r\n\tpublic static UID(): string {\r\n\t\tif (Toolkit.TESTING) {\r\n\t\t\tToolkit.TESTING_UID++;\r\n\t\t\treturn \"\" + Toolkit.TESTING_UID;\r\n\t\t}\r\n\t\treturn \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, c => {\r\n\t\t\tconst r = (Math.random() * 16) | 0;\r\n\t\t\tconst v = c === \"x\" ? r : (r & 0x3) | 0x8;\r\n\t\t\treturn v.toString(16);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Finds the closest element as a polyfill\r\n\t *\r\n\t * @param  {Element} element  [description]\r\n\t * @param  {string}  selector [description]\r\n\t */\r\n\tpublic static closest(element: Element, selector: string) {\r\n\t\tif (document.body.closest) {\r\n\t\t\treturn element.closest(selector);\r\n\t\t}\r\n\t\treturn closest(element, selector);\r\n\t}\r\n\r\n\tpublic static generateLinePath(firstPoint: PointModel, lastPoint: PointModel): string {\r\n\t\treturn `M${firstPoint.x},${firstPoint.y} L ${lastPoint.x},${lastPoint.y}`;\r\n\t}\r\n\r\n\tpublic static generateCurvePath(firstPoint: PointModel, lastPoint: PointModel, curvy: number = 0): string {\r\n\t\tvar isHorizontal = Math.abs(firstPoint.x - lastPoint.x) > Math.abs(firstPoint.y - lastPoint.y);\r\n\t\tvar curvyX = isHorizontal ? curvy : 0;\r\n\t\tvar curvyY = isHorizontal ? 0 : curvy;\r\n\r\n\t\treturn `M${firstPoint.x},${firstPoint.y} C ${firstPoint.x + curvyX},${firstPoint.y + curvyY}\r\n    ${lastPoint.x - curvyX},${lastPoint.y - curvyY} ${lastPoint.x},${lastPoint.y}`;\r\n\t}\r\n\r\n\tpublic static generateDynamicPath(pathCoords: number[][]) {\r\n\t\tlet path = Path();\r\n\t\tlet x, y;\r\n\t\tlet ycord = pathCoords[0][1] * ROUTING_SCALING_FACTOR;\r\n\t\tpath = path.moveto(pathCoords[0][0] * ROUTING_SCALING_FACTOR, pathCoords[0][1] * ROUTING_SCALING_FACTOR);\r\n\t\tpathCoords.slice(1).forEach(coords => {\r\n\t\t\t// path = path.lineto(coords[0] * ROUTING_SCALING_FACTOR, coords[1] * ROUTING_SCALING_FACTOR);\r\n\t\t\tpath = path.lineto(coords[0] * ROUTING_SCALING_FACTOR, ((Math.abs((ycord) - (coords[1] * (ROUTING_SCALING_FACTOR)))/2.0) + ycord));\r\n\t\t\tx = coords[0] * ROUTING_SCALING_FACTOR;\r\n\t\t\ty = coords[1] * ROUTING_SCALING_FACTOR;\r\n\t\t});\r\n\t\tpath=path.lineto(x, y);\r\n\t\treturn path.print();\r\n\t}\r\n}\r\n","import { BaseModel } from \"../models/BaseModel\";\r\n\r\nexport abstract class AbstractFactory<T extends BaseModel> {\r\n\ttype: string;\r\n\r\n\tconstructor(name: string) {\r\n\t\tthis.type = name;\r\n\t}\r\n\r\n\tgetType(): string {\r\n\t\treturn this.type;\r\n\t}\r\n\r\n\tabstract getNewInstance(initialConfig?: any): T;\r\n}\r\n","import { BaseModel, BaseModelListener } from \"./BaseModel\";\r\nimport { PortModel } from \"./PortModel\";\r\nimport * as _ from \"lodash\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\nimport { DiagramModel } from \"./DiagramModel\";\r\n\r\nexport class NodeModel extends BaseModel<DiagramModel, BaseModelListener> {\r\n\tx: number;\r\n\ty: number;\r\n\textras: any;\r\n\tports: { [s: string]: PortModel };\r\n\r\n\t// calculated post rendering so routing can be done correctly\r\n\twidth: number;\r\n\theight: number;\r\n\r\n\tconstructor(nodeType: string = \"default\", id?: string) {\r\n\t\tsuper(nodeType, id);\r\n\t\tthis.x = 0;\r\n\t\tthis.y = 0;\r\n\t\tthis.extras = {};\r\n\t\tthis.ports = {};\r\n\t}\r\n\r\n\tsetPosition(x, y) {\r\n\t\t//store position\r\n\t\tlet oldX = this.x;\r\n\t\tlet oldY = this.y;\r\n\t\t_.forEach(this.ports, port => {\r\n\t\t\t_.forEach(port.getLinks(), link => {\r\n\t\t\t\tlet point = link.getPointForPort(port);\r\n\t\t\t\tpoint.x = point.x + x - oldX;\r\n\t\t\t\tpoint.y = point.y + y - oldY;\r\n\t\t\t});\r\n\t\t});\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t}\r\n\r\n\tgetSelectedEntities() {\r\n\t\tlet entities = super.getSelectedEntities();\r\n\r\n\t\t// add the points of each link that are selected here\r\n\t\tif (this.isSelected()) {\r\n\t\t\t_.forEach(this.ports, port => {\r\n\t\t\t\tentities = entities.concat(\r\n\t\t\t\t\t_.map(port.getLinks(), link => {\r\n\t\t\t\t\t\treturn link.getPointForPort(port);\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn entities;\r\n\t}\r\n\r\n\tdeSerialize(ob, engine: DiagramEngine) {\r\n\t\tsuper.deSerialize(ob, engine);\r\n\t\tthis.x = ob.x;\r\n\t\tthis.y = ob.y;\r\n\t\tthis.extras = ob.extras;\r\n\r\n\t\t//deserialize ports\r\n\t\t_.forEach(ob.ports, (port: any) => {\r\n\t\t\tlet portOb = engine.getPortFactory(port.type).getNewInstance();\r\n\t\t\tportOb.deSerialize(port, engine);\r\n\t\t\tthis.addPort(portOb);\r\n\t\t});\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn _.merge(super.serialize(), {\r\n\t\t\tx: this.x,\r\n\t\t\ty: this.y,\r\n\t\t\textras: this.extras,\r\n\t\t\tports: _.map(this.ports, port => {\r\n\t\t\t\treturn port.serialize();\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n\tdoClone(lookupTable = {}, clone) {\r\n\t\t// also clone the ports\r\n\t\tclone.ports = {};\r\n\t\t_.forEach(this.ports, port => {\r\n\t\t\tclone.addPort(port.clone(lookupTable));\r\n\t\t});\r\n\t}\r\n\r\n\tremove() {\r\n\t\tsuper.remove();\r\n\t\t_.forEach(this.ports, port => {\r\n\t\t\t_.forEach(port.getLinks(), link => {\r\n\t\t\t\tlink.remove();\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tgetPortFromID(id): PortModel | null {\r\n\t\tfor (var i in this.ports) {\r\n\t\t\tif (this.ports[i].id === id) {\r\n\t\t\t\treturn this.ports[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetPort(name: string): PortModel | null {\r\n\t\treturn this.ports[name];\r\n\t}\r\n\r\n\tgetPorts(): { [s: string]: PortModel } {\r\n\t\treturn this.ports;\r\n\t}\r\n\r\n\tremovePort(port: PortModel) {\r\n\t\t//clear the parent node reference\r\n\t\tif (this.ports[port.name]) {\r\n\t\t\tthis.ports[port.name].setParent(null);\r\n\t\t\tdelete this.ports[port.name];\r\n\t\t}\r\n\t}\r\n\r\n\taddPort<T extends PortModel>(port: T): T {\r\n\t\tport.setParent(this);\r\n\t\tthis.ports[port.name] = port;\r\n\t\treturn port;\r\n\t}\r\n\r\n\tupdateDimensions({ width, height }: { width: number; height: number }) {\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t}\r\n}\r\n","/**\r\n * @namespace PF.Heuristic\r\n * @description A collection of heuristic functions.\r\n */\r\nmodule.exports = {\r\n\r\n  /**\r\n   * Manhattan distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} dx + dy\r\n   */\r\n  manhattan: function(dx, dy) {\r\n      return dx + dy;\r\n  },\r\n\r\n  /**\r\n   * Euclidean distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} sqrt(dx * dx + dy * dy)\r\n   */\r\n  euclidean: function(dx, dy) {\r\n      return Math.sqrt(dx * dx + dy * dy);\r\n  },\r\n\r\n  /**\r\n   * Octile distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} sqrt(dx * dx + dy * dy) for grids\r\n   */\r\n  octile: function(dx, dy) {\r\n      var F = Math.SQRT2 - 1;\r\n      return (dx < dy) ? F * dx + dy : F * dy + dx;\r\n  },\r\n\r\n  /**\r\n   * Chebyshev distance.\r\n   * @param {number} dx - Difference in x.\r\n   * @param {number} dy - Difference in y.\r\n   * @return {number} max(dx, dy)\r\n   */\r\n  chebyshev: function(dx, dy) {\r\n      return Math.max(dx, dy);\r\n  }\r\n\r\n};\r\n","export class BaseAction {\r\n\tmouseX: number;\r\n\tmouseY: number;\r\n\tms: number;\r\n\r\n\tconstructor(mouseX: number, mouseY: number) {\r\n\t\tthis.mouseX = mouseX;\r\n\t\tthis.mouseY = mouseY;\r\n\t\tthis.ms = new Date().getTime();\r\n\t}\r\n}\r\n","import { BaseModel, BaseModelListener } from \"./BaseModel\";\r\nimport { NodeModel } from \"./NodeModel\";\r\nimport { LinkModel } from \"./LinkModel\";\r\nimport * as _ from \"lodash\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\n\r\nexport class PortModel extends BaseModel<NodeModel, BaseModelListener> {\r\n\tname: string;\r\n\tlinks: { [id: string]: LinkModel };\r\n\tmaximumLinks: number;\r\n\r\n\t// calculated post rendering so routing can be done correctly\r\n\tx: number;\r\n\ty: number;\r\n\twidth: number;\r\n\theight: number;\r\n\r\n\tconstructor(name: string, type?: string, id?: string, maximumLinks?: number) {\r\n\t\tsuper(type, id);\r\n\t\tthis.name = name;\r\n\t\tthis.links = {};\r\n\t\tthis.maximumLinks = maximumLinks;\r\n\t}\r\n\r\n\tdeSerialize(ob, engine: DiagramEngine) {\r\n\t\tsuper.deSerialize(ob, engine);\r\n\t\tthis.name = ob.name;\r\n\t\tthis.maximumLinks = ob.maximumLinks;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn _.merge(super.serialize(), {\r\n\t\t\tname: this.name,\r\n\t\t\tparentNode: this.parent.id,\r\n\t\t\tlinks: _.map(this.links, link => {\r\n\t\t\t\treturn link.id;\r\n\t\t\t}),\r\n\t\t\tmaximumLinks: this.maximumLinks\r\n\t\t});\r\n\t}\r\n\r\n\tdoClone(lookupTable = {}, clone) {\r\n\t\tclone.links = {};\r\n\t\tclone.parentNode = this.getParent().clone(lookupTable);\r\n\t}\r\n\r\n\tgetNode(): NodeModel {\r\n\t\treturn this.getParent();\r\n\t}\r\n\r\n\tgetName(): string {\r\n\t\treturn this.name;\r\n\t}\r\n\r\n\tgetMaximumLinks(): number {\r\n\t\treturn this.maximumLinks;\r\n\t}\r\n\r\n\tsetMaximumLinks(maximumLinks: number) {\r\n\t\tthis.maximumLinks = maximumLinks;\r\n\t}\r\n\r\n\tremoveLink(link: LinkModel) {\r\n\t\tdelete this.links[link.getID()];\r\n\t}\r\n\r\n\taddLink(link: LinkModel) {\r\n\t\tthis.links[link.getID()] = link;\r\n\t}\r\n\r\n\tgetLinks(): { [id: string]: LinkModel } {\r\n\t\treturn this.links;\r\n\t}\r\n\r\n\tpublic createLinkModel(): LinkModel | null {\r\n\t\tif (_.isFinite(this.maximumLinks)) {\r\n\t\t\tvar numberOfLinks: number = _.size(this.links);\r\n\t\t\tif (this.maximumLinks === 1 && numberOfLinks >= 1) {\r\n\t\t\t\treturn _.values(this.links)[0];\r\n\t\t\t} else if (numberOfLinks >= this.maximumLinks) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tupdateCoords({ x, y, width, height }: { x: number; y: number; width: number; height: number }) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t}\r\n\r\n\tcanLinkToPort(port: PortModel): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tisLocked() {\r\n\t\treturn super.isLocked() || this.getParent().isLocked();\r\n\t}\r\n}\r\n","import { Toolkit } from \"./Toolkit\";\r\nimport * as _ from \"lodash\";\r\nimport { DiagramEngine } from \"./DiagramEngine\";\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport interface BaseEvent<T extends BaseEntity = any> {\r\n\tentity: BaseEntity<BaseListener>;\r\n\tstopPropagation: () => any;\r\n\tfiring: boolean;\r\n\tid: string;\r\n}\r\n\r\nexport interface BaseListener<T extends BaseEntity = any> {\r\n\tlockChanged?(event: BaseEvent<T> & { locked: boolean }): void;\r\n}\r\n\r\nexport type BaseEntityType = \"node\" | \"link\" | \"port\" | \"point\";\r\n\r\nexport class BaseEntity<T extends BaseListener = BaseListener> {\r\n\tpublic listeners: { [s: string]: T };\r\n\tpublic id: string;\r\n\tpublic locked: boolean;\r\n\r\n\tconstructor(id?: string) {\r\n\t\tthis.listeners = {};\r\n\t\tthis.id = id || Toolkit.UID();\r\n\t\tthis.locked = false;\r\n\t}\r\n\r\n\tgetID() {\r\n\t\treturn this.id;\r\n\t}\r\n\r\n\tdoClone(lookupTable: { [s: string]: any } = {}, clone: any) {\r\n\t\t/*noop*/\r\n\t}\r\n\r\n\tclone(lookupTable: { [s: string]: any } = {}) {\r\n\t\t// try and use an existing clone first\r\n\t\tif (lookupTable[this.id]) {\r\n\t\t\treturn lookupTable[this.id];\r\n\t\t}\r\n\t\tlet clone = _.clone(this);\r\n\t\tclone.id = Toolkit.UID();\r\n\t\tclone.clearListeners();\r\n\t\tlookupTable[this.id] = clone;\r\n\r\n\t\tthis.doClone(lookupTable, clone);\r\n\t\treturn clone;\r\n\t}\r\n\r\n\tclearListeners() {\r\n\t\tthis.listeners = {};\r\n\t}\r\n\r\n\tpublic deSerialize(data: { [s: string]: any }, engine: DiagramEngine) {\r\n\t\tthis.id = data.id;\r\n\t}\r\n\r\n\tpublic serialize() {\r\n\t\treturn {\r\n\t\t\tid: this.id\r\n\t\t};\r\n\t}\r\n\r\n\tpublic iterateListeners(cb: (t: T, event: BaseEvent) => any) {\r\n\t\tlet event: BaseEvent = {\r\n\t\t\tid: Toolkit.UID(),\r\n\t\t\tfiring: true,\r\n\t\t\tentity: this,\r\n\t\t\tstopPropagation: () => {\r\n\t\t\t\tevent.firing = false;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfor (var i in this.listeners) {\r\n\t\t\tif (this.listeners.hasOwnProperty(i)) {\r\n\t\t\t\t// propagation stopped\r\n\t\t\t\tif (!event.firing) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tcb(this.listeners[i], event);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic removeListener(listener: string) {\r\n\t\tif (this.listeners[listener]) {\r\n\t\t\tdelete this.listeners[listener];\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic addListener(listener: T): string {\r\n\t\tvar uid = Toolkit.UID();\r\n\t\tthis.listeners[uid] = listener;\r\n\t\treturn uid;\r\n\t}\r\n\r\n\tpublic isLocked(): boolean {\r\n\t\treturn this.locked;\r\n\t}\r\n\r\n\tpublic setLocked(locked: boolean = true) {\r\n\t\tthis.locked = locked;\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.lockChanged) {\r\n\t\t\t\tlistener.lockChanged({ ...event, locked: locked });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n","/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar Heap       = require('heap');\r\nvar Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Base class for the Jump Point Search algorithm\r\n * @param {object} opt\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n */\r\nfunction JumpPointFinderBase(opt) {\r\n    opt = opt || {};\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.trackJumpRecursion = opt.trackJumpRecursion || false;\r\n}\r\n\r\n/**\r\n * Find and return the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nJumpPointFinderBase.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = this.openList = new Heap(function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        }),\r\n        startNode = this.startNode = grid.getNodeAt(startX, startY),\r\n        endNode = this.endNode = grid.getNodeAt(endX, endY), node;\r\n\r\n    this.grid = grid;\r\n\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n\r\n    // push the start node into the open list\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the open list is not empty\r\n    while (!openList.empty()) {\r\n        // pop the position of node which has the minimum `f` value.\r\n        node = openList.pop();\r\n        node.closed = true;\r\n\r\n        if (node === endNode) {\r\n            return Util.expandPath(Util.backtrace(endNode));\r\n        }\r\n\r\n        this._identifySuccessors(node);\r\n    }\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\n/**\r\n * Identify successors for the given node. Runs a jump point search in the\r\n * direction of each available neighbor, adding any points found to the open\r\n * list.\r\n * @protected\r\n */\r\nJumpPointFinderBase.prototype._identifySuccessors = function(node) {\r\n    var grid = this.grid,\r\n        heuristic = this.heuristic,\r\n        openList = this.openList,\r\n        endX = this.endNode.x,\r\n        endY = this.endNode.y,\r\n        neighbors, neighbor,\r\n        jumpPoint, i, l,\r\n        x = node.x, y = node.y,\r\n        jx, jy, dx, dy, d, ng, jumpNode,\r\n        abs = Math.abs, max = Math.max;\r\n\r\n    neighbors = this._findNeighbors(node);\r\n    for(i = 0, l = neighbors.length; i < l; ++i) {\r\n        neighbor = neighbors[i];\r\n        jumpPoint = this._jump(neighbor[0], neighbor[1], x, y);\r\n        if (jumpPoint) {\r\n\r\n            jx = jumpPoint[0];\r\n            jy = jumpPoint[1];\r\n            jumpNode = grid.getNodeAt(jx, jy);\r\n\r\n            if (jumpNode.closed) {\r\n                continue;\r\n            }\r\n\r\n            // include distance, as parent may not be immediately adjacent:\r\n            d = Heuristic.octile(abs(jx - x), abs(jy - y));\r\n            ng = node.g + d; // next `g` value\r\n\r\n            if (!jumpNode.opened || ng < jumpNode.g) {\r\n                jumpNode.g = ng;\r\n                jumpNode.h = jumpNode.h || heuristic(abs(jx - endX), abs(jy - endY));\r\n                jumpNode.f = jumpNode.g + jumpNode.h;\r\n                jumpNode.parent = node;\r\n\r\n                if (!jumpNode.opened) {\r\n                    openList.push(jumpNode);\r\n                    jumpNode.opened = true;\r\n                } else {\r\n                    openList.updateItem(jumpNode);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = JumpPointFinderBase;\r\n","module.exports = require('./lib/heap');\n","import * as PF from \"pathfinding\";\r\nimport { DiagramEngine } from \"../main\";\r\n\r\n/*\r\nit can be very expensive to calculate routes when every single pixel on the canvas\r\nis individually represented. Using the factor below, we combine values in order\r\nto achieve the best trade-off between accuracy and performance.\r\n*/\r\nexport const ROUTING_SCALING_FACTOR = 2;\r\n\r\nconst pathFinderInstance = new PF.JumpPointFinder({\r\n\theuristic: PF.Heuristic.manhattan,\r\n\tdiagonalMovement: PF.DiagonalMovement.Never\r\n});\r\n\r\nexport default class PathFinding {\r\n\tinstance: any;\r\n\tdiagramEngine: DiagramEngine;\r\n\r\n\tconstructor(diagramEngine: DiagramEngine) {\r\n\t\tthis.instance = pathFinderInstance;\r\n\t\tthis.diagramEngine = diagramEngine;\r\n\t}\r\n\r\n\t/**\r\n\t * Taking as argument a fully unblocked walking matrix, this method\r\n\t * finds a direct path from point A to B.\r\n\t */\r\n\tcalculateDirectPath(\r\n\t\tfrom: {\r\n\t\t\tx: number;\r\n\t\t\ty: number;\r\n\t\t},\r\n\t\tto: {\r\n\t\t\tx: number;\r\n\t\t\ty: number;\r\n\t\t}\r\n\t): number[][] {\r\n\t\tconst matrix = this.diagramEngine.getCanvasMatrix();\r\n\t\tconst grid = new PF.Grid(matrix);\r\n\r\n\t\treturn pathFinderInstance.findPath(\r\n\t\t\tthis.diagramEngine.translateRoutingX(Math.floor(from.x / ROUTING_SCALING_FACTOR)),\r\n\t\t\tthis.diagramEngine.translateRoutingY(Math.floor(from.y / ROUTING_SCALING_FACTOR)),\r\n\t\t\tthis.diagramEngine.translateRoutingX(Math.floor(to.x / ROUTING_SCALING_FACTOR)),\r\n\t\t\tthis.diagramEngine.translateRoutingY(Math.floor(to.y / ROUTING_SCALING_FACTOR)),\r\n\t\t\tgrid\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Using @link{#calculateDirectPath}'s result as input, we here\r\n\t * determine the first walkable point found in the matrix that includes\r\n\t * blocked paths.\r\n\t */\r\n\tcalculateLinkStartEndCoords(\r\n\t\tmatrix: number[][],\r\n\t\tpath: number[][]\r\n\t): {\r\n\t\tstart: {\r\n\t\t\tx: number;\r\n\t\t\ty: number;\r\n\t\t};\r\n\t\tend: {\r\n\t\t\tx: number;\r\n\t\t\ty: number;\r\n\t\t};\r\n\t\tpathToStart: number[][];\r\n\t\tpathToEnd: number[][];\r\n\t} {\r\n\t\tconst startIndex = path.findIndex(point => matrix[point[1]][point[0]] === 0);\r\n\t\tconst endIndex =\r\n\t\t\tpath.length -\r\n\t\t\t1 -\r\n\t\t\tpath\r\n\t\t\t\t.slice()\r\n\t\t\t\t.reverse()\r\n\t\t\t\t.findIndex(point => matrix[point[1]][point[0]] === 0);\r\n\r\n\t\t// are we trying to create a path exclusively through blocked areas?\r\n\t\t// if so, let's fallback to the linear routing\r\n\t\tif (startIndex === -1 || endIndex === -1) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\tconst pathToStart = path.slice(0, startIndex);\r\n\t\tconst pathToEnd = path.slice(endIndex);\r\n\r\n\t\treturn {\r\n\t\t\tstart: {\r\n\t\t\t\tx: path[startIndex][0],\r\n\t\t\t\ty: path[startIndex][1]\r\n\t\t\t},\r\n\t\t\tend: {\r\n\t\t\t\tx: path[endIndex][0],\r\n\t\t\t\ty: path[endIndex][1]\r\n\t\t\t},\r\n\t\t\tpathToStart,\r\n\t\t\tpathToEnd\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Puts everything together: merges the paths from/to the centre of the ports,\r\n\t * with the path calculated around other elements.\r\n\t */\r\n\tcalculateDynamicPath(\r\n\t\troutingMatrix: number[][],\r\n\t\tstart: {\r\n\t\t\tx: number;\r\n\t\t\ty: number;\r\n\t\t},\r\n\t\tend: {\r\n\t\t\tx: number;\r\n\t\t\ty: number;\r\n\t\t},\r\n\t\tpathToStart: number[][],\r\n\t\tpathToEnd: number[][]\r\n\t) {\r\n\t\t// generate the path based on the matrix with obstacles\r\n\t\tconst grid = new PF.Grid(routingMatrix);\r\n\t\tconst dynamicPath = pathFinderInstance.findPath(start.x, start.y, end.x, end.y, grid);\r\n\r\n\t\t// aggregate everything to have the calculated path ready for rendering\r\n\t\tconst pathCoords = pathToStart\r\n\t\t\t.concat(dynamicPath, pathToEnd)\r\n\t\t\t.map(coords => [\r\n\t\t\t\tthis.diagramEngine.translateRoutingX(coords[0], true),\r\n\t\t\t\tthis.diagramEngine.translateRoutingY(coords[1], true)\r\n\t\t\t]);\r\n\t\treturn PF.Util.compressPath(pathCoords);\r\n\t}\r\n}\r\n","import { BaseModel } from \"./BaseModel\";\r\nimport { LinkModel } from \"./LinkModel\";\r\nimport * as _ from \"lodash\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\n\r\nexport class LabelModel extends BaseModel<LinkModel> {\r\n\toffsetX: number;\r\n\toffsetY: number;\r\n\r\n\tconstructor(type?: string, id?: string) {\r\n\t\tsuper(type, id);\r\n\t\tthis.offsetX = 0;\r\n\t\tthis.offsetY = 0;\r\n\t}\r\n\r\n\tdeSerialize(ob, engine: DiagramEngine) {\r\n\t\tsuper.deSerialize(ob, engine);\r\n\t\tthis.offsetX = ob.offsetX;\r\n\t\tthis.offsetY = ob.offsetY;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn _.merge(super.serialize(), {\r\n\t\t\toffsetX: this.offsetX,\r\n\t\t\toffsetY: this.offsetY\r\n\t\t});\r\n\t}\r\n}\r\n","import { LabelModel } from \"../../models/LabelModel\";\r\nimport * as _ from \"lodash\";\r\nimport { DiagramEngine } from \"../../DiagramEngine\";\r\n\r\nexport class DefaultLabelModel extends LabelModel {\r\n\tlabel: string;\r\n\r\n\tconstructor() {\r\n\t\tsuper(\"default\");\r\n\t\tthis.offsetY = -23;\r\n\t}\r\n\r\n\tsetLabel(label: string) {\r\n\t\tthis.label = label;\r\n\t}\r\n\r\n\tdeSerialize(ob, engine: DiagramEngine) {\r\n\t\tsuper.deSerialize(ob, engine);\r\n\t\tthis.label = ob.label;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn _.merge(super.serialize(), {\r\n\t\t\tlabel: this.label\r\n\t\t});\r\n\t}\r\n}\r\n","/**\r\n * @author Dylan Vorster\r\n */\r\nimport { LinkModel, LinkModelListener } from \"../../models/LinkModel\";\r\nimport { BaseEvent } from \"../../BaseEntity\";\r\nimport * as _ from \"lodash\";\r\nimport { PointModel } from \"../../models/PointModel\";\r\nimport { DiagramEngine } from \"../../DiagramEngine\";\r\nimport { DefaultLabelModel } from \"./DefaultLabelModel\";\r\nimport { LabelModel } from \"../../models/LabelModel\";\r\n\r\nexport interface DefaultLinkModelListener extends LinkModelListener {\r\n\tcolorChanged?(event: BaseEvent<DefaultLinkModel> & { color: null | string }): void;\r\n\r\n\twidthChanged?(event: BaseEvent<DefaultLinkModel> & { width: 0 | number }): void;\r\n}\r\n\r\nexport class DefaultLinkModel extends LinkModel<DefaultLinkModelListener> {\r\n\twidth: number;\r\n\tcolor: string;\r\n\tcurvyness: number;\r\n\r\n\tconstructor(type: string = \"default\") {\r\n\t\tsuper(type);\r\n\t\tthis.color = \"rgba(165,165,165,1.0)\";\r\n\t\tthis.width = 2.2;\r\n\t\tthis.curvyness = 50;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn _.merge(super.serialize(), {\r\n\t\t\twidth: this.width,\r\n\t\t\tcolor: this.color,\r\n\t\t\tcurvyness: this.curvyness\r\n\t\t});\r\n\t}\r\n\r\n\tdeSerialize(ob, engine: DiagramEngine) {\r\n\t\tsuper.deSerialize(ob, engine);\r\n\t\tthis.color = ob.color;\r\n\t\tthis.width = ob.width;\r\n\t\tthis.curvyness = ob.curvyness;\r\n\t}\r\n\r\n\taddLabel(label: LabelModel | string) {\r\n\t\tif (label instanceof LabelModel) {\r\n\t\t\treturn super.addLabel(label);\r\n\t\t}\r\n\t\tlet labelOb = new DefaultLabelModel();\r\n\t\tlabelOb.setLabel(label);\r\n\t\treturn super.addLabel(labelOb);\r\n\t}\r\n\r\n\tsetWidth(width: number) {\r\n\t\tthis.width = width;\r\n\t\tthis.iterateListeners((listener: DefaultLinkModelListener, event: BaseEvent) => {\r\n\t\t\tif (listener.widthChanged) {\r\n\t\t\t\tlistener.widthChanged({ ...event, width: width });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tsetColor(color: string) {\r\n\t\tthis.color = color;\r\n\t\tthis.iterateListeners((listener: DefaultLinkModelListener, event: BaseEvent) => {\r\n\t\t\tif (listener.colorChanged) {\r\n\t\t\t\tlistener.colorChanged({ ...event, color: color });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n","import * as _ from \"lodash\";\r\nimport { PortModel } from \"../../models/PortModel\";\r\nimport { DiagramEngine } from \"../../DiagramEngine\";\r\nimport { DefaultLinkModel } from \"./DefaultLinkModel\";\r\nimport { LinkModel } from \"../../models/LinkModel\";\r\n\r\nexport class DefaultPortModel extends PortModel {\r\n\tin: boolean;\r\n\tlabel: string;\r\n\tlinks: { [id: string]: DefaultLinkModel };\r\n\r\n\tconstructor(isInput: boolean, name: string, label: string = null, id?: string) {\r\n\t\tsuper(name, \"default\", id);\r\n\t\tthis.in = isInput;\r\n\t\tthis.label = label || name;\r\n\t}\r\n\r\n\tdeSerialize(object, engine: DiagramEngine) {\r\n\t\tsuper.deSerialize(object, engine);\r\n\t\tthis.in = object.in;\r\n\t\tthis.label = object.label;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn _.merge(super.serialize(), {\r\n\t\t\tin: this.in,\r\n\t\t\tlabel: this.label\r\n\t\t});\r\n\t}\r\n\r\n\tlink(port: PortModel): LinkModel {\r\n\t\tlet link = this.createLinkModel();\r\n\t\tlink.setSourcePort(this);\r\n\t\tlink.setTargetPort(port);\r\n\t\treturn link;\r\n\t}\r\n\r\n\tcanLinkToPort(port: PortModel): boolean {\r\n\t\tif (port instanceof DefaultPortModel) {\r\n\t\t\tif(this.in) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(Object.keys(port['links']).length<=1){\r\n\t\t\t\treturn this.in !== port.in;\r\n\t\t\t}else{\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tcreateLinkModel(): LinkModel {\r\n\t\tlet link = super.createLinkModel();\r\n\t\treturn link || new DefaultLinkModel();\r\n\t}\r\n}\r\n","import { BaseModel, BaseModelListener } from \"./BaseModel\";\r\nimport { PortModel } from \"./PortModel\";\r\nimport { PointModel } from \"./PointModel\";\r\nimport * as _ from \"lodash\";\r\nimport { BaseEvent } from \"../BaseEntity\";\r\nimport { LabelModel } from \"./LabelModel\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\nimport { DiagramModel } from \"./DiagramModel\";\r\n\r\nexport interface LinkModelListener extends BaseModelListener {\r\n\tsourcePortChanged?(event: BaseEvent<LinkModel> & { port: null | PortModel }): void;\r\n\r\n\ttargetPortChanged?(event: BaseEvent<LinkModel> & { port: null | PortModel }): void;\r\n}\r\n\r\nexport class LinkModel<T extends LinkModelListener = LinkModelListener> extends BaseModel<DiagramModel, T> {\r\n\tsourcePort: PortModel | null;\r\n\ttargetPort: PortModel | null;\r\n\tlabels: LabelModel[];\r\n\tpoints: PointModel[];\r\n\textras: {};\r\n\r\n\tconstructor(linkType: string = \"default\", id?: string) {\r\n\t\tsuper(linkType, id);\r\n\t\tthis.points = [new PointModel(this, { x: 0, y: 0 }), new PointModel(this, { x: 0, y: 0 })];\r\n\t\tthis.extras = {};\r\n\t\tthis.sourcePort = null;\r\n\t\tthis.targetPort = null;\r\n\t\tthis.labels = [];\r\n\t}\r\n\r\n\tdeSerialize(ob, engine: DiagramEngine) {\r\n\t\tsuper.deSerialize(ob, engine);\r\n\t\tthis.extras = ob.extras;\r\n\t\tthis.points = _.map(ob.points || [], (point: { x; y }) => {\r\n\t\t\tvar p = new PointModel(this, { x: point.x, y: point.y });\r\n\t\t\tp.deSerialize(point, engine);\r\n\t\t\treturn p;\r\n\t\t});\r\n\r\n\t\t//deserialize labels\r\n\t\t_.forEach(ob.labels || [], (label: any) => {\r\n\t\t\tlet labelOb = engine.getLabelFactory(label.type).getNewInstance();\r\n\t\t\tlabelOb.deSerialize(label, engine);\r\n\t\t\tthis.addLabel(labelOb);\r\n\t\t});\r\n\r\n\t\tif (ob.target) {\r\n\t\t\tthis.setTargetPort(\r\n\t\t\t\tthis.getParent()\r\n\t\t\t\t\t.getNode(ob.target)\r\n\t\t\t\t\t.getPortFromID(ob.targetPort)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif (ob.source) {\r\n\t\t\tthis.setSourcePort(\r\n\t\t\t\tthis.getParent()\r\n\t\t\t\t\t.getNode(ob.source)\r\n\t\t\t\t\t.getPortFromID(ob.sourcePort)\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn _.merge(super.serialize(), {\r\n\t\t\tsource: this.sourcePort ? this.sourcePort.getParent().id : null,\r\n\t\t\tsourcePort: this.sourcePort ? this.sourcePort.id : null,\r\n\t\t\ttarget: this.targetPort ? this.targetPort.getParent().id : null,\r\n\t\t\ttargetPort: this.targetPort ? this.targetPort.id : null,\r\n\t\t\tpoints: _.map(this.points, point => {\r\n\t\t\t\treturn point.serialize();\r\n\t\t\t}),\r\n\t\t\textras: this.extras,\r\n\t\t\tlabels: _.map(this.labels, label => {\r\n\t\t\t\treturn label.serialize();\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n\tdoClone(lookupTable = {}, clone) {\r\n\t\tclone.setPoints(\r\n\t\t\t_.map(this.getPoints(), (point: PointModel) => {\r\n\t\t\t\treturn point.clone(lookupTable);\r\n\t\t\t})\r\n\t\t);\r\n\t\tif (this.sourcePort) {\r\n\t\t\tclone.setSourcePort(this.sourcePort.clone(lookupTable));\r\n\t\t}\r\n\t\tif (this.targetPort) {\r\n\t\t\tclone.setTargetPort(this.targetPort.clone(lookupTable));\r\n\t\t}\r\n\t}\r\n\r\n\tremove() {\r\n\t\tif (this.sourcePort) {\r\n\t\t\tthis.sourcePort.removeLink(this);\r\n\t\t}\r\n\t\tif (this.targetPort) {\r\n\t\t\tthis.targetPort.removeLink(this);\r\n\t\t}\r\n\t\tsuper.remove();\r\n\t}\r\n\r\n\tisLastPoint(point: PointModel) {\r\n\t\tvar index = this.getPointIndex(point);\r\n\t\treturn index === this.points.length - 1;\r\n\t}\r\n\r\n\tgetPointIndex(point: PointModel) {\r\n\t\treturn this.points.indexOf(point);\r\n\t}\r\n\r\n\tgetPointModel(id: string): PointModel | null {\r\n\t\tfor (var i = 0; i < this.points.length; i++) {\r\n\t\t\tif (this.points[i].id === id) {\r\n\t\t\t\treturn this.points[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetPortForPoint(point: PointModel): PortModel {\r\n\t\tif (this.sourcePort !== null && this.getFirstPoint().getID() === point.getID()) {\r\n\t\t\treturn this.sourcePort;\r\n\t\t}\r\n\t\tif (this.targetPort !== null && this.getLastPoint().getID() === point.getID()) {\r\n\t\t\treturn this.targetPort;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetPointForPort(port: PortModel): PointModel {\r\n\t\tif (this.sourcePort !== null && this.sourcePort.getID() === port.getID()) {\r\n\t\t\treturn this.getFirstPoint();\r\n\t\t}\r\n\t\tif (this.targetPort !== null && this.targetPort.getID() === port.getID()) {\r\n\t\t\treturn this.getLastPoint();\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetFirstPoint(): PointModel {\r\n\t\treturn this.points[0];\r\n\t}\r\n\r\n\tgetLastPoint(): PointModel {\r\n\t\treturn this.points[this.points.length - 1];\r\n\t}\r\n\r\n\tsetSourcePort(port: PortModel) {\r\n\t\tif (port !== null) {\r\n\t\t\tport.addLink(this);\r\n\t\t}\r\n\t\tif (this.sourcePort !== null) {\r\n\t\t\tthis.sourcePort.removeLink(this);\r\n\t\t}\r\n\t\tthis.sourcePort = port;\r\n\t\tthis.iterateListeners((listener: LinkModelListener, event) => {\r\n\t\t\tif (listener.sourcePortChanged) {\r\n\t\t\t\tlistener.sourcePortChanged({ ...event, port: port });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tgetSourcePort(): PortModel {\r\n\t\treturn this.sourcePort;\r\n\t}\r\n\r\n\tgetTargetPort(): PortModel {\r\n\t\treturn this.targetPort;\r\n\t}\r\n\r\n\tsetTargetPort(port: PortModel) {\r\n\t\tif (port !== null) {\r\n\t\t\tport.addLink(this);\r\n\t\t}\r\n\t\tif (this.targetPort !== null) {\r\n\t\t\tthis.targetPort.removeLink(this);\r\n\t\t}\r\n\t\tthis.targetPort = port;\r\n\t\tthis.iterateListeners((listener: LinkModelListener, event) => {\r\n\t\t\tif (listener.targetPortChanged) {\r\n\t\t\t\tlistener.targetPortChanged({ ...event, port: port });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tpoint(x: number, y: number): PointModel {\r\n\t\treturn this.addPoint(this.generatePoint(x, y));\r\n\t}\r\n\r\n\taddLabel(label: LabelModel) {\r\n\t\tlabel.setParent(this);\r\n\t\tthis.labels.push(label);\r\n\t}\r\n\r\n\tgetPoints(): PointModel[] {\r\n\t\treturn this.points;\r\n\t}\r\n\r\n\tsetPoints(points: PointModel[]) {\r\n\t\t_.forEach(points, point => {\r\n\t\t\tpoint.setParent(this);\r\n\t\t});\r\n\t\tthis.points = points;\r\n\t}\r\n\r\n\tremovePoint(pointModel: PointModel) {\r\n\t\tthis.points.splice(this.getPointIndex(pointModel), 1);\r\n\t}\r\n\r\n\tremovePointsBefore(pointModel: PointModel) {\r\n\t\tthis.points.splice(0, this.getPointIndex(pointModel));\r\n\t}\r\n\r\n\tremovePointsAfter(pointModel: PointModel) {\r\n\t\tthis.points.splice(this.getPointIndex(pointModel) + 1);\r\n\t}\r\n\r\n\tremoveMiddlePoints() {\r\n\t\tif (this.points.length > 2) {\r\n\t\t\tthis.points.splice(0, this.points.length - 2);\r\n\t\t}\r\n\t}\r\n\r\n\taddPoint<P extends PointModel>(pointModel: P, index = 1): P {\r\n\t\tpointModel.setParent(this);\r\n\t\tthis.points.splice(index, 0, pointModel);\r\n\t\treturn pointModel;\r\n\t}\r\n\r\n\tgeneratePoint(x: number = 0, y: number = 0): PointModel {\r\n\t\treturn new PointModel(this, { x: x, y: y });\r\n\t}\r\n}\r\n","var Heap       = require('heap');\r\nvar Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * A* path-finder.\r\n * based upon https://github.com/bgrins/javascript-astar\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n */\r\nfunction BiAStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    //When diagonal movement is allowed the manhattan heuristic is not admissible\r\n    //It should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nBiAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var cmp = function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        },\r\n        startOpenList = new Heap(cmp),\r\n        endOpenList = new Heap(cmp),\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        heuristic = this.heuristic,\r\n        diagonalMovement = this.diagonalMovement,\r\n        weight = this.weight,\r\n        abs = Math.abs, SQRT2 = Math.SQRT2,\r\n        node, neighbors, neighbor, i, l, x, y, ng,\r\n        BY_START = 1, BY_END = 2;\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    // and push it into the start open list\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n    startOpenList.push(startNode);\r\n    startNode.opened = BY_START;\r\n\r\n    // set the `g` and `f` value of the end node to be 0\r\n    // and push it into the open open list\r\n    endNode.g = 0;\r\n    endNode.f = 0;\r\n    endOpenList.push(endNode);\r\n    endNode.opened = BY_END;\r\n\r\n    // while both the open lists are not empty\r\n    while (!startOpenList.empty() && !endOpenList.empty()) {\r\n\r\n        // pop the position of start node which has the minimum `f` value.\r\n        node = startOpenList.pop();\r\n        node.closed = true;\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened === BY_END) {\r\n                return Util.biBacktrace(node, neighbor);\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h ||\r\n                    weight * heuristic(abs(x - endX), abs(y - endY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    startOpenList.push(neighbor);\r\n                    neighbor.opened = BY_START;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    startOpenList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n\r\n\r\n        // pop the position of end node which has the minimum `f` value.\r\n        node = endOpenList.pop();\r\n        node.closed = true;\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened === BY_START) {\r\n                return Util.biBacktrace(neighbor, node);\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h ||\r\n                    weight * heuristic(abs(x - startX), abs(y - startY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    endOpenList.push(neighbor);\r\n                    neighbor.opened = BY_END;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    endOpenList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n    } // end while not open list empty\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = BiAStarFinder;\r\n","var Heap       = require('heap');\r\nvar Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * A* path-finder. Based upon https://github.com/bgrins/javascript-astar\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching \r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n */\r\nfunction AStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    // When diagonal movement is allowed the manhattan heuristic is not\r\n    //admissible. It should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = new Heap(function(nodeA, nodeB) {\r\n            return nodeA.f - nodeB.f;\r\n        }),\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        heuristic = this.heuristic,\r\n        diagonalMovement = this.diagonalMovement,\r\n        weight = this.weight,\r\n        abs = Math.abs, SQRT2 = Math.SQRT2,\r\n        node, neighbors, neighbor, i, l, x, y, ng;\r\n\r\n    // set the `g` and `f` value of the start node to be 0\r\n    startNode.g = 0;\r\n    startNode.f = 0;\r\n\r\n    // push the start node into the open list\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the open list is not empty\r\n    while (!openList.empty()) {\r\n        // pop the position of node which has the minimum `f` value.\r\n        node = openList.pop();\r\n        node.closed = true;\r\n\r\n        // if reached the end position, construct the path and return it\r\n        if (node === endNode) {\r\n            return Util.backtrace(endNode);\r\n        }\r\n\r\n        // get neigbours of the current node\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n\r\n            x = neighbor.x;\r\n            y = neighbor.y;\r\n\r\n            // get the distance between current node and the neighbor\r\n            // and calculate the next g score\r\n            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);\r\n\r\n            // check if the neighbor has not been inspected yet, or\r\n            // can be reached with smaller cost from the current node\r\n            if (!neighbor.opened || ng < neighbor.g) {\r\n                neighbor.g = ng;\r\n                neighbor.h = neighbor.h || weight * heuristic(abs(x - endX), abs(y - endY));\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                neighbor.parent = node;\r\n\r\n                if (!neighbor.opened) {\r\n                    openList.push(neighbor);\r\n                    neighbor.opened = true;\r\n                } else {\r\n                    // the neighbor can be reached with smaller cost.\r\n                    // Since its f value has been updated, we have to\r\n                    // update its position in the open list\r\n                    openList.updateItem(neighbor);\r\n                }\r\n            }\r\n        } // end for each neighbor\r\n    } // end while not open list empty\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = AStarFinder;\r\n","/**\r\n * A node in grid. \r\n * This class holds some basic information about a node and custom \r\n * attributes may be added, depending on the algorithms' needs.\r\n * @constructor\r\n * @param {number} x - The x coordinate of the node on the grid.\r\n * @param {number} y - The y coordinate of the node on the grid.\r\n * @param {boolean} [walkable] - Whether this node is walkable.\r\n */\r\nfunction Node(x, y, walkable) {\r\n    /**\r\n     * The x coordinate of the node on the grid.\r\n     * @type number\r\n     */\r\n    this.x = x;\r\n    /**\r\n     * The y coordinate of the node on the grid.\r\n     * @type number\r\n     */\r\n    this.y = y;\r\n    /**\r\n     * Whether this node can be walked through.\r\n     * @type boolean\r\n     */\r\n    this.walkable = (walkable === undefined ? true : walkable);\r\n}\r\n\r\nmodule.exports = Node;\r\n","/**\r\n * @author Dylan Vorster\r\n */\r\n\r\nexport * from \"./Toolkit\";\r\nexport * from \"./BaseEntity\";\r\nexport * from \"./DiagramEngine\";\r\n\r\nexport * from \"./defaults/models/DefaultNodeModel\";\r\nexport * from \"./defaults/models/DefaultPortModel\";\r\nexport * from \"./defaults/models/DefaultLinkModel\";\r\nexport * from \"./defaults/models/DefaultLabelModel\";\r\n\r\nexport * from \"./defaults/factories/DefaultLinkFactory\";\r\nexport * from \"./defaults/factories/DefaultNodeFactory\";\r\nexport * from \"./defaults/factories/DefaultPortFactory\";\r\nexport * from \"./defaults/factories/DefaultLabelFactory\";\r\n\r\nexport * from \"./defaults/widgets/DefaultLinkWidget\";\r\nexport * from \"./defaults/widgets/DefaultLabelWidget\";\r\nexport * from \"./defaults/widgets/DefaultNodeWidget\";\r\nexport * from \"./defaults/widgets/DefaultPortLabelWidget\";\r\n\r\nexport * from \"./factories/AbstractFactory\";\r\nexport * from \"./factories/AbstractLabelFactory\";\r\nexport * from \"./factories/AbstractLinkFactory\";\r\nexport * from \"./factories/AbstractNodeFactory\";\r\nexport * from \"./factories/AbstractPortFactory\";\r\n\r\nexport * from \"./routing/PathFinding\";\r\n\r\nexport * from \"./actions/BaseAction\";\r\nexport * from \"./actions/MoveCanvasAction\";\r\nexport * from \"./actions/MoveItemsAction\";\r\nexport * from \"./actions/SelectingAction\";\r\n\r\nexport * from \"./models/SelectionModel\";\r\nexport * from \"./models/BaseModel\";\r\nexport * from \"./models/DiagramModel\";\r\nexport * from \"./models/LinkModel\";\r\nexport * from \"./models/NodeModel\";\r\nexport * from \"./models/PointModel\";\r\nexport * from \"./models/PortModel\";\r\nexport * from \"./models/LabelModel\";\r\n\r\nexport * from \"./widgets/DiagramWidget\";\r\nexport * from \"./widgets/LinkWidget\";\r\nexport * from \"./widgets/NodeWidget\";\r\nexport * from \"./widgets/PortWidget\";\r\nexport * from \"./widgets/BaseWidget\";\r\n\r\nexport * from \"./widgets/layers/LinkLayerWidget\";\r\nexport * from \"./widgets/layers/NodeLayerWidget\";\r\n","import * as React from \"react\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\nimport { NodeModel } from \"../models/NodeModel\";\r\nimport { Toolkit } from \"../Toolkit\";\r\nimport { BaseWidget, BaseWidgetProps } from \"./BaseWidget\";\r\n\r\nexport interface NodeProps extends BaseWidgetProps {\r\n\tnode: NodeModel;\r\n\tchildren?: any;\r\n\tdiagramEngine: DiagramEngine;\r\n}\r\n\r\nexport interface NodeState {}\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class NodeWidget extends BaseWidget<NodeProps, NodeState> {\r\n\tconstructor(props: NodeProps) {\r\n\t\tsuper(\"srd-node\", props);\r\n\t\tthis.state = {};\r\n\t}\r\n\r\n\tshouldComponentUpdate() {\r\n\t\treturn this.props.diagramEngine.canEntityRepaint(this.props.node);\r\n\t}\r\n\r\n\tgetClassName() {\r\n\t\treturn \"node \" + super.getClassName() + (this.props.node.isSelected() ? this.bem(\"--selected\") : \"\");\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\t{...this.getProps()}\r\n\t\t\t\tdata-nodeid={this.props.node.id}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\ttop: this.props.node.y,\r\n\t\t\t\t\tleft: this.props.node.x\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{this.props.children}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { DiagramEngine } from \"../../DiagramEngine\";\r\nimport * as _ from \"lodash\";\r\nimport { NodeWidget } from \"../NodeWidget\";\r\nimport { NodeModel } from \"../../models/NodeModel\";\r\nimport { BaseWidget, BaseWidgetProps } from \"../BaseWidget\";\r\n\r\nexport interface NodeLayerProps extends BaseWidgetProps {\r\n\tdiagramEngine: DiagramEngine;\r\n}\r\n\r\nexport interface NodeLayerState {}\r\n\r\nexport class NodeLayerWidget extends BaseWidget<NodeLayerProps, NodeLayerState> {\r\n\tconstructor(props: NodeLayerProps) {\r\n\t\tsuper(\"srd-node-layer\", props);\r\n\t\tthis.state = {};\r\n\t}\r\n\r\n\tupdateNodeDimensions = () => {\r\n\t\tif (!this.props.diagramEngine.nodesRendered) {\r\n\t\t\tconst diagramModel = this.props.diagramEngine.getDiagramModel();\r\n\t\t\t_.map(diagramModel.getNodes(), node => {\r\n\t\t\t\tnode.updateDimensions(this.props.diagramEngine.getNodeDimensions(node));\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tcomponentDidUpdate() {\r\n\t\tthis.updateNodeDimensions();\r\n\t\tthis.props.diagramEngine.nodesRendered = true;\r\n\t}\r\n\r\n\trender() {\r\n\t\tvar diagramModel = this.props.diagramEngine.getDiagramModel();\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\t{...this.getProps()}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\ttransform:\r\n\t\t\t\t\t\t\"translate(\" +\r\n\t\t\t\t\t\tdiagramModel.getOffsetX() +\r\n\t\t\t\t\t\t\"px,\" +\r\n\t\t\t\t\t\tdiagramModel.getOffsetY() +\r\n\t\t\t\t\t\t\"px) scale(\" +\r\n\t\t\t\t\t\tdiagramModel.getZoomLevel() / 100.0 +\r\n\t\t\t\t\t\t\")\"\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{_.map(diagramModel.getNodes(), (node: NodeModel) => {\r\n\t\t\t\t\treturn React.createElement(\r\n\t\t\t\t\t\tNodeWidget,\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdiagramEngine: this.props.diagramEngine,\r\n\t\t\t\t\t\t\tkey: node.id,\r\n\t\t\t\t\t\t\tnode: node\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tthis.props.diagramEngine.generateWidgetForNode(node)\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\nimport { LinkModel } from \"../models/LinkModel\";\r\nimport { BaseWidget, BaseWidgetProps } from \"./BaseWidget\";\r\n\r\nexport interface LinkProps extends BaseWidgetProps {\r\n\tlink: LinkModel;\r\n\tdiagramEngine: DiagramEngine;\r\n\tchildren?: any;\r\n}\r\n\r\nexport interface LinkState {}\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class LinkWidget extends BaseWidget<LinkProps, LinkState> {\r\n\tconstructor(props: LinkProps) {\r\n\t\tsuper(\"srd-link\", props);\r\n\t\tthis.state = {};\r\n\t}\r\n\r\n\tshouldComponentUpdate() {\r\n\t\treturn this.props.diagramEngine.canEntityRepaint(this.props.link);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { DiagramEngine } from \"../../DiagramEngine\";\r\nimport { LinkWidget } from \"../LinkWidget\";\r\nimport * as _ from \"lodash\";\r\nimport { PointModel } from \"../../models/PointModel\";\r\nimport { BaseWidget, BaseWidgetProps } from \"../BaseWidget\";\r\n\r\nexport interface LinkLayerProps extends BaseWidgetProps {\r\n\tdiagramEngine: DiagramEngine;\r\n\tpointAdded: (point: PointModel, event: MouseEvent) => any;\r\n}\r\n\r\nexport interface LinkLayerState {}\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class LinkLayerWidget extends BaseWidget<LinkLayerProps, LinkLayerState> {\r\n\tconstructor(props: LinkLayerProps) {\r\n\t\tsuper(\"srd-link-layer\", props);\r\n\t\tthis.state = {};\r\n\t}\r\n\r\n\trender() {\r\n\t\tvar diagramModel = this.props.diagramEngine.getDiagramModel();\r\n\t\treturn (\r\n\t\t\t<svg\r\n\t\t\t\t{...this.getProps()}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\ttransform:\r\n\t\t\t\t\t\t\"translate(\" +\r\n\t\t\t\t\t\tdiagramModel.getOffsetX() +\r\n\t\t\t\t\t\t\"px,\" +\r\n\t\t\t\t\t\tdiagramModel.getOffsetY() +\r\n\t\t\t\t\t\t\"px) scale(\" +\r\n\t\t\t\t\t\tdiagramModel.getZoomLevel() / 100.0 +\r\n\t\t\t\t\t\t\")\"\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{//only perform these actions when we have a diagram\r\n\t\t\t\tthis.props.diagramEngine.canvas &&\r\n\t\t\t\t\t_.map(diagramModel.getLinks(), link => {\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tthis.props.diagramEngine.nodesRendered &&\r\n\t\t\t\t\t\t\t!this.props.diagramEngine.linksThatHaveInitiallyRendered[link.id]\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tif (link.sourcePort !== null) {\r\n\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\tconst portCenter = this.props.diagramEngine.getPortCenter(link.sourcePort);\r\n\t\t\t\t\t\t\t\t\tlink.points[0].updateLocation(portCenter);\r\n\r\n\t\t\t\t\t\t\t\t\tconst portCoords = this.props.diagramEngine.getPortCoords(link.sourcePort);\r\n\t\t\t\t\t\t\t\t\tlink.sourcePort.updateCoords(portCoords);\r\n\r\n\t\t\t\t\t\t\t\t\tthis.props.diagramEngine.linksThatHaveInitiallyRendered[link.id] = true;\r\n\t\t\t\t\t\t\t\t} catch (ignore) {\r\n\t\t\t\t\t\t\t\t\t/*noop*/\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (link.targetPort !== null) {\r\n\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\tconst portCenter = this.props.diagramEngine.getPortCenter(link.targetPort);\r\n\t\t\t\t\t\t\t\t\t_.last(link.points).updateLocation(portCenter);\r\n\r\n\t\t\t\t\t\t\t\t\tconst portCoords = this.props.diagramEngine.getPortCoords(link.targetPort);\r\n\t\t\t\t\t\t\t\t\tlink.targetPort.updateCoords(portCoords);\r\n\r\n\t\t\t\t\t\t\t\t\tthis.props.diagramEngine.linksThatHaveInitiallyRendered[link.id] = true;\r\n\t\t\t\t\t\t\t\t} catch (ignore) {\r\n\t\t\t\t\t\t\t\t\t/*noop*/\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t//generate links\r\n\t\t\t\t\t\tvar generatedLink = this.props.diagramEngine.generateWidgetForLink(link);\r\n\t\t\t\t\t\tif (!generatedLink) {\r\n\t\t\t\t\t\t\tthrow new Error(`no link generated for type: ${link.getType()}`);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<LinkWidget key={link.getID()} link={link} diagramEngine={this.props.diagramEngine}>\r\n\t\t\t\t\t\t\t\t{React.cloneElement(generatedLink, {\r\n\t\t\t\t\t\t\t\t\tpointAdded: this.props.pointAdded\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</LinkWidget>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t</svg>\r\n\t\t);\r\n\t}\r\n}\r\n","import { BaseAction } from \"./BaseAction\";\r\nimport { DiagramModel } from \"../models/DiagramModel\";\r\n\r\nexport class SelectingAction extends BaseAction {\r\n\tmouseX2: number;\r\n\tmouseY2: number;\r\n\r\n\tconstructor(mouseX: number, mouseY: number) {\r\n\t\tsuper(mouseX, mouseY);\r\n\t\tthis.mouseX2 = mouseX;\r\n\t\tthis.mouseY2 = mouseY;\r\n\t}\r\n\r\n\tgetBoxDimensions() {\r\n\t\treturn {\r\n\t\t\tleft: this.mouseX2 > this.mouseX ? this.mouseX : this.mouseX2,\r\n\t\t\ttop: this.mouseY2 > this.mouseY ? this.mouseY : this.mouseY2,\r\n\t\t\twidth: Math.abs(this.mouseX2 - this.mouseX),\r\n\t\t\theight: Math.abs(this.mouseY2 - this.mouseY),\r\n\t\t\tright: this.mouseX2 < this.mouseX ? this.mouseX : this.mouseX2,\r\n\t\t\tbottom: this.mouseY2 < this.mouseY ? this.mouseY : this.mouseY2\r\n\t\t};\r\n\t}\r\n\r\n\tcontainsElement(x: number, y: number, diagramModel: DiagramModel): boolean {\r\n\t\tvar z = diagramModel.getZoomLevel() / 100.0;\r\n\t\tlet dimensions = this.getBoxDimensions();\r\n\r\n\t\treturn (\r\n\t\t\tx * z + diagramModel.getOffsetX() > dimensions.left &&\r\n\t\t\tx * z + diagramModel.getOffsetX() < dimensions.right &&\r\n\t\t\ty * z + diagramModel.getOffsetY() > dimensions.top &&\r\n\t\t\ty * z + diagramModel.getOffsetY() < dimensions.bottom\r\n\t\t);\r\n\t}\r\n}\r\n","import { BaseAction } from \"./BaseAction\";\r\nimport { SelectionModel } from \"../models/SelectionModel\";\r\nimport { PointModel } from \"../models/PointModel\";\r\nimport { NodeModel } from \"../models/NodeModel\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\n\r\nexport class MoveItemsAction extends BaseAction {\r\n\tselectionModels: SelectionModel[];\r\n\tmoved: boolean;\r\n\r\n\tconstructor(mouseX: number, mouseY: number, diagramEngine: DiagramEngine) {\r\n\t\tsuper(mouseX, mouseY);\r\n\t\tthis.moved = false;\r\n\t\tdiagramEngine.enableRepaintEntities(diagramEngine.getDiagramModel().getSelectedItems());\r\n\t\tvar selectedItems = diagramEngine.getDiagramModel().getSelectedItems();\r\n\r\n\t\t//dont allow items which are locked to move\r\n\t\tselectedItems = selectedItems.filter(item => {\r\n\t\t\treturn !diagramEngine.isModelLocked(item);\r\n\t\t});\r\n\r\n\t\tthis.selectionModels = selectedItems.map((item: PointModel | NodeModel) => {\r\n\t\t\treturn {\r\n\t\t\t\tmodel: item,\r\n\t\t\t\tinitialX: item.x,\r\n\t\t\t\tinitialY: item.y\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n}\r\n","import { BaseAction } from \"./BaseAction\";\r\nimport { DiagramModel } from \"../models/DiagramModel\";\r\n\r\nexport class MoveCanvasAction extends BaseAction {\r\n\tinitialOffsetX: number;\r\n\tinitialOffsetY: number;\r\n\r\n\tconstructor(mouseX: number, mouseY: number, diagramModel: DiagramModel) {\r\n\t\tsuper(mouseX, mouseY);\r\n\t\tthis.initialOffsetX = diagramModel.getOffsetX();\r\n\t\tthis.initialOffsetY = diagramModel.getOffsetY();\r\n\t}\r\n}\r\n","import { NodeModel } from \"../models/NodeModel\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\nimport { AbstractFactory } from \"./AbstractFactory\";\r\n\r\nexport abstract class AbstractNodeFactory<T extends NodeModel = NodeModel> extends AbstractFactory<T> {\r\n\tabstract generateReactWidget(diagramEngine: DiagramEngine, node: T): JSX.Element;\r\n}\r\n","import * as React from \"react\";\r\nimport { NodeModel } from \"../models/NodeModel\";\r\nimport { BaseWidget, BaseWidgetProps } from \"./BaseWidget\";\r\n\r\nexport interface PortProps extends BaseWidgetProps {\r\n\tname: string;\r\n\tnode: NodeModel;\r\n}\r\n\r\nexport interface PortState {\r\n\tselected: boolean;\r\n}\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class PortWidget extends BaseWidget<PortProps, PortState> {\r\n\tconstructor(props: PortProps) {\r\n\t\tsuper(\"srd-port\", props);\r\n\t\tthis.state = {\r\n\t\t\tselected: false\r\n\t\t};\r\n\t}\r\n\r\n\tgetClassName() {\r\n\t\treturn \"port \" + super.getClassName() + (this.state.selected ? this.bem(\"--selected\") : \"\");\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\t{...this.getProps()}\r\n\t\t\t\tonMouseEnter={() => {\r\n\t\t\t\t\tthis.setState({ selected: true });\r\n\t\t\t\t}}\r\n\t\t\t\tonMouseLeave={() => {\r\n\t\t\t\t\tthis.setState({ selected: false });\r\n\t\t\t\t}}\r\n\t\t\t\tdata-name={this.props.name}\r\n\t\t\t\tdata-nodeid={this.props.node.getID()}\r\n\t\t\t\tid={\"port\"+this.props.name}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { DefaultPortModel } from \"../models/DefaultPortModel\";\r\nimport { PortWidget } from \"../../widgets/PortWidget\";\r\nimport { BaseWidget, BaseWidgetProps } from \"../../widgets/BaseWidget\";\r\n\r\nexport interface DefaultPortLabelProps extends BaseWidgetProps {\r\n\tmodel: DefaultPortModel;\r\n}\r\n\r\nexport interface DefaultPortLabelState {}\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class DefaultPortLabel extends BaseWidget<DefaultPortLabelProps, DefaultPortLabelState> {\r\n\tconstructor(props) {\r\n\t\tsuper(\"srd-default-port\", props);\r\n\t}\r\n\r\n\tgetClassName() {\r\n\t\treturn super.getClassName() + (this.props.model.in ? this.bem(\"--in\") : this.bem(\"--out\"));\r\n\t}\r\n\r\n\trender() {\r\n\t\tvar port = <PortWidget node={this.props.model.getParent()} name={this.props.model.name} />;\r\n\t\tvar label = <div className=\"name portName\">{this.props.model.label}</div>;\r\n\r\n\t\treturn (\r\n\t\t\t<div {...this.getProps()}>\r\n\t\t\t\t{this.props.model.in ? port : label}\r\n\t\t\t\t{this.props.model.in ? label : port}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport * as _ from \"lodash\";\r\nimport { DefaultNodeModel } from \"../models/DefaultNodeModel\";\r\nimport { DefaultPortLabel } from \"./DefaultPortLabelWidget\";\r\nimport { DiagramEngine } from \"../../DiagramEngine\";\r\nimport { BaseWidget, BaseWidgetProps } from \"../../widgets/BaseWidget\";\r\n\r\nexport interface DefaultNodeProps extends BaseWidgetProps {\r\n\tnode: DefaultNodeModel;\r\n\tdiagramEngine: DiagramEngine;\r\n}\r\n\r\nexport interface DefaultNodeState {}\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class DefaultNodeWidget extends BaseWidget<DefaultNodeProps, DefaultNodeState> {\r\n\tconstructor(props: DefaultNodeProps) {\r\n\t\tsuper(\"srd-default-node\", props);\r\n\t\tthis.state = {};\r\n\t}\r\n\r\n\tgeneratePort(port) {\r\n\t\treturn <DefaultPortLabel model={port} key={port.id} />;\r\n\t}\r\n\r\n\tgetClassName() {\r\n\t\treturn \"node \" + super.getClassName() + (this.props.node.isSelected() ? this.bem(\"--selected\") : \"\");\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t// <div {...this.getProps()} style={{ background: this.props.node.color }}>\r\n\t\t\t// \t<div className={this.bem(\"__title\")}>\r\n\t\t\t// \t\t<div className={this.bem(\"__name\")}>{this.props.node.name}</div>\r\n\t\t\t// \t</div>\r\n\t\t\t// \t<div className={this.bem(\"__ports\")}>\r\n\t\t\t// \t\t<div className={this.bem(\"__in\")}>\r\n\t\t\t// \t\t\t{_.map(this.props.node.getInPorts(), this.generatePort.bind(this))}\r\n\t\t\t// \t\t</div>\r\n\t\t\t// \t\t<div className={this.bem(\"__out\")}>\r\n\t\t\t// \t\t\t{_.map(this.props.node.getOutPorts(), this.generatePort.bind(this))}\r\n\t\t\t// \t\t</div>\r\n\t\t\t// \t</div>\r\n\t\t\t// </div>'\r\n\t\t\t<div id={this.props.node.id} {...this.getProps()} >\r\n\t\t\t<div  className={this.bem(\"__ports\")}>\r\n\t\t\t\t<div className={this.bem(\"__in\")}>\r\n\t\t\t\t\t{_.map(this.props.node.getInPorts(), this.generatePort.bind(this))}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div {...this.getProps()} style={{ background: this.props.node.color }}>\r\n\t\t\t\t<div className={this.bem(\"__title\")}>\r\n\t\t\t\t\t<div className={this.bem(\"__img\")} style={{ background: this.props.node.bgImage}}  ></div>\r\n\t\t\t\t\t<div className={this.bem(\"__name\")}>{this.props.node.name}</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className={this.bem(\"__ports\")}>\r\n\t\t\t\t<div {...this.getProps()} className={this.bem(\"__out\")}>\r\n\t\t\t\t\t{_.map(this.props.node.getOutPorts(), this.generatePort.bind(this))}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import { LinkModel } from \"../models/LinkModel\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\nimport { AbstractFactory } from \"./AbstractFactory\";\r\n\r\nexport abstract class AbstractLinkFactory<T extends LinkModel = LinkModel> extends AbstractFactory<T> {\r\n\tabstract generateReactWidget(diagramEngine: DiagramEngine, link: T): JSX.Element;\r\n}\r\n","import * as React from \"react\";\r\nimport { DiagramEngine } from \"../../DiagramEngine\";\r\nimport { PointModel } from \"../../models/PointModel\";\r\nimport { Toolkit } from \"../../Toolkit\";\r\nimport { DefaultLinkFactory } from \"../factories/DefaultLinkFactory\";\r\nimport { DefaultLinkModel } from \"../models/DefaultLinkModel\";\r\nimport PathFinding from \"../../routing/PathFinding\";\r\nimport * as _ from \"lodash\";\r\nimport { LabelModel } from \"../../models/LabelModel\";\r\nimport { BaseWidget, BaseWidgetProps } from \"../../widgets/BaseWidget\";\r\n\r\nexport interface DefaultLinkProps extends BaseWidgetProps {\r\n\tcolor?: string;\r\n\twidth?: number;\r\n\tsmooth?: boolean;\r\n\tlink: DefaultLinkModel;\r\n\tdiagramEngine: DiagramEngine;\r\n\tpointAdded?: (point: PointModel, event: MouseEvent) => any;\r\n}\r\n\r\nexport interface DefaultLinkState {\r\n\tselected: boolean;\r\n}\r\n\r\nexport class DefaultLinkWidget extends BaseWidget<DefaultLinkProps, DefaultLinkState> {\r\n\tpublic static defaultProps: DefaultLinkProps = {\r\n\t\tcolor: \"black\",\r\n\t\twidth: 3,\r\n\t\tlink: null,\r\n\t\tengine: null,\r\n\t\tsmooth: false,\r\n\t\tdiagramEngine: null\r\n\t};\r\n\r\n\t// DOM references to the label and paths (if label is given), used to calculate dynamic positioning\r\n\trefLabels: { [id: string]: HTMLElement };\r\n\trefPaths: SVGGElement[];\r\n\r\n\tpathFinding: PathFinding; // only set when smart routing is active\r\n\r\n\tconstructor(props: DefaultLinkProps) {\r\n\t\tsuper(\"srd-default-link\", props);\r\n\r\n\t\tthis.refLabels = {};\r\n\t\tthis.refPaths = [];\r\n\t\tthis.state = {\r\n\t\t\tselected: false\r\n\t\t};\r\n\r\n\t\tif (props.diagramEngine.isSmartRoutingEnabled()) {\r\n\t\t\tthis.pathFinding = new PathFinding(this.props.diagramEngine);\r\n\t\t}\r\n\t}\r\n\r\n\tcalculateAllLabelPosition() {\r\n\t\t_.forEach(this.props.link.labels, (label, index) => {\r\n\t\t\tthis.calculateLabelPosition(label, index + 1);\r\n\t\t});\r\n\t}\r\n\r\n\tcomponentDidUpdate() {\r\n\t\tif (this.props.link.labels.length > 0) {\r\n\t\t\twindow.requestAnimationFrame(this.calculateAllLabelPosition.bind(this));\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tif (this.props.link.labels.length > 0) {\r\n\t\t\twindow.requestAnimationFrame(this.calculateAllLabelPosition.bind(this));\r\n\t\t}\r\n\t}\r\n\r\n\taddPointToLink = (event: MouseEvent, index: number): void => {\r\n\t\tif (\r\n\t\t\t!event.shiftKey &&\r\n\t\t\t!this.props.diagramEngine.isModelLocked(this.props.link) &&\r\n\t\t\tthis.props.link.points.length - 1 <= this.props.diagramEngine.getMaxNumberPointsPerLink()\r\n\t\t) {\r\n\t\t\tconst point = new PointModel(this.props.link, this.props.diagramEngine.getRelativeMousePoint(event));\r\n\t\t\tpoint.setSelected(true);\r\n\t\t\tthis.forceUpdate();\r\n\t\t\tthis.props.link.addPoint(point, index);\r\n\t\t\tthis.props.pointAdded(point, event);\r\n\t\t}\r\n\t};\r\n\r\n\tgeneratePoint(pointIndex: number): JSX.Element {\r\n\t\tlet x = this.props.link.points[pointIndex].x;\r\n\t\tlet y = this.props.link.points[pointIndex].y;\r\n\r\n\t\treturn (\r\n\t\t\t<g key={\"point-\" + this.props.link.points[pointIndex].id}>\r\n\t\t\t\t<circle\r\n\t\t\t\t\tcx={x}\r\n\t\t\t\t\tcy={y}\r\n\t\t\t\t\tr={5}\r\n\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\"point \" +\r\n\t\t\t\t\t\tthis.bem(\"__point\") +\r\n\t\t\t\t\t\t(this.props.link.points[pointIndex].isSelected() ? this.bem(\"--point-selected\") : \"\")\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t\t<circle\r\n\t\t\t\t\tonMouseLeave={() => {\r\n\t\t\t\t\t\tthis.setState({ selected: false });\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonMouseEnter={() => {\r\n\t\t\t\t\t\tthis.setState({ selected: true });\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tdata-id={this.props.link.points[pointIndex].id}\r\n\t\t\t\t\tdata-linkid={this.props.link.id}\r\n\t\t\t\t\tcx={x}\r\n\t\t\t\t\tcy={y}\r\n\t\t\t\t\tr={15}\r\n\t\t\t\t\topacity={0}\r\n\t\t\t\t\tclassName={\"point \" + this.bem(\"__point\")}\r\n\t\t\t\t/>\r\n\t\t\t</g>\r\n\t\t);\r\n\t}\r\n\r\n\tgenerateLabel(label: LabelModel) {\r\n\t\tconst canvas = this.props.diagramEngine.canvas as HTMLElement;\r\n\t\treturn (\r\n\t\t\t<foreignObject\r\n\t\t\t\tkey={label.id}\r\n\t\t\t\tclassName={this.bem(\"__label\")}\r\n\t\t\t\twidth={canvas.offsetWidth}\r\n\t\t\t\theight={canvas.offsetHeight}\r\n\t\t\t>\r\n\t\t\t\t<div ref={ref => (this.refLabels[label.id] = ref)}>\r\n\t\t\t\t\t{this.props.diagramEngine\r\n\t\t\t\t\t\t.getFactoryForLabel(label)\r\n\t\t\t\t\t\t.generateReactWidget(this.props.diagramEngine, label)}\r\n\t\t\t\t</div>\r\n\t\t\t</foreignObject>\r\n\t\t);\r\n\t}\r\n\r\n\tgenerateLink(path: string, extraProps: any, id: string | number): JSX.Element {\r\n\t\tvar props = this.props;\r\n\r\n\t\tvar Bottom = React.cloneElement(\r\n\t\t\t(props.diagramEngine.getFactoryForLink(this.props.link) as DefaultLinkFactory).generateLinkSegment(\r\n\t\t\t\tthis.props.link,\r\n\t\t\t\tthis,\r\n\t\t\t\tthis.state.selected || this.props.link.isSelected(),\r\n\t\t\t\tpath\r\n\t\t\t),\r\n\t\t\t{\r\n\t\t\t\tref: ref => ref && this.refPaths.push(ref)\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tvar Top = React.cloneElement(Bottom, {\r\n\t\t\t...extraProps,\r\n\t\t\tstrokeLinecap: \"round\",\r\n\t\t\tonMouseLeave: () => {\r\n\t\t\t\tthis.setState({ selected: false });\r\n\t\t\t},\r\n\t\t\tonMouseEnter: () => {\r\n\t\t\t\tthis.setState({ selected: true });\r\n\t\t\t},\r\n\t\t\tref: null,\r\n\t\t\t\"data-linkid\": this.props.link.getID(),\r\n\t\t\tstrokeOpacity: this.state.selected ? 0 : 0,\r\n\t\t\tstrokeWidth: 20,\r\n\t\t\tonContextMenu: () => {\r\n\t\t\t\tif (!this.props.diagramEngine.isModelLocked(this.props.link)) {\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\tthis.props.link.remove();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<g key={\"link-\" + id}>\r\n\t\t\t\t{Bottom}\r\n\t\t\t\t{Top}\r\n\t\t\t</g>\r\n\t\t);\r\n\t}\r\n\r\n\tfindPathAndRelativePositionToRenderLabel = (index: number): { path: any; position: number } => {\r\n\t\t// an array to hold all path lengths, making sure we hit the DOM only once to fetch this information\r\n\t\tlet paths = this.refPaths.map(g => {\r\n\t\t\tconst htmlCollection = g.children as HTMLCollection;\r\n\t\t\tconst svgPathElement = htmlCollection[1] as SVGPathElement;\r\n\t\t\treturn svgPathElement;\r\n\t\t});\r\n\t\tconst lengths = paths.map(path => {\r\n\t\t\treturn (Math.round(path.getTotalLength()));\r\n\t\t});\r\n\t\t//const lengths = paths.map(path => path.getTotalLength());\r\n\r\n\t\t// calculate the point where we want to display the label\r\n\t\tlet labelPosition =\r\n\t\t\tlengths.reduce((previousValue, currentValue) => previousValue + currentValue, 0) *\r\n\t\t\t(index / (this.props.link.labels.length + 1));\r\n\r\n\t\t// find the path where the label will be rendered and calculate the relative position\r\n\t\tlet pathIndex = 0;\r\n\t\twhile (pathIndex < paths.length) {\r\n\t\t\tif (labelPosition - lengths[pathIndex] < 0) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tpath: paths[pathIndex],\r\n\t\t\t\t\tposition: labelPosition\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// keep searching\r\n\t\t\tlabelPosition -= lengths[pathIndex];\r\n\t\t\tpathIndex++;\r\n\t\t}\r\n\t};\r\n\r\n\tcalculateLabelPosition = (label, index: number) => {\r\n\t\tif (!this.refLabels[label.id]) {\r\n\t\t\t// no label? nothing to do here\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst { path, position } = this.findPathAndRelativePositionToRenderLabel(index);\r\n\r\n\t\tconst labelDimensions = {\r\n\t\t\twidth: this.refLabels[label.id].offsetWidth,\r\n\t\t\theight: this.refLabels[label.id].offsetHeight\r\n\t\t};\r\n\r\n\t\tconst pathCentre = path.getPointAtLength(position);\r\n\r\n\t\tconst labelCoordinates = {\r\n\t\t\tx: pathCentre.x - labelDimensions.width / 2 + label.offsetX,\r\n\t\t\ty: pathCentre.y - labelDimensions.height / 2 + label.offsetY\r\n\t\t};\r\n\t\tthis.refLabels[label.id].setAttribute(\r\n\t\t\t\"style\",\r\n\t\t\t`transform: translate(${labelCoordinates.x}px, ${labelCoordinates.y}px);`\r\n\t\t);\r\n\t};\r\n\r\n\t/**\r\n\t * Smart routing is only applicable when all conditions below are true:\r\n\t * - smart routing is set to true on the engine\r\n\t * - current link is between two nodes (not between a node and an empty point)\r\n\t * - no custom points exist along the line\r\n\t */\r\n\tisSmartRoutingApplicable(): boolean {\r\n\t\tconst { diagramEngine, link } = this.props;\r\n\r\n\t\tif (!diagramEngine.isSmartRoutingEnabled()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (link.points.length !== 2) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (link.sourcePort === null || link.targetPort === null) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { diagramEngine } = this.props;\r\n\t\tif (!diagramEngine.nodesRendered) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t//ensure id is present for all points on the path\r\n\t\tvar points = this.props.link.points;\r\n\t\tvar paths = [];\r\n\r\n\t\tif (this.isSmartRoutingApplicable()) {\r\n\t\t\t// first step: calculate a direct path between the points being linked\r\n\t\t\tconst directPathCoords = this.pathFinding.calculateDirectPath(_.first(points), _.last(points));\r\n\r\n\t\t\tconst routingMatrix = diagramEngine.getRoutingMatrix();\r\n\t\t\t// now we need to extract, from the routing matrix, the very first walkable points\r\n\t\t\t// so they can be used as origin and destination of the link to be created\r\n\t\t\tconst smartLink = this.pathFinding.calculateLinkStartEndCoords(routingMatrix, directPathCoords);\r\n\r\n\t\t\tif (smartLink) {\r\n\t\t\t\tconst { start, end, pathToStart, pathToEnd } = smartLink;\r\n\r\n\t\t\t\t// second step: calculate a path avoiding hitting other elements\r\n\t\t\t\tconst simplifiedPath = this.pathFinding.calculateDynamicPath(\r\n\t\t\t\t\troutingMatrix,\r\n\t\t\t\t\tstart,\r\n\t\t\t\t\tend,\r\n\t\t\t\t\tpathToStart,\r\n\t\t\t\t\tpathToEnd\r\n\t\t\t\t);\r\n\r\n\t\t\t\tpaths.push(\r\n\t\t\t\t\t//smooth: boolean, extraProps: any, id: string | number, firstPoint: PointModel, lastPoint: PointModel\r\n\t\t\t\t\tthis.generateLink(\r\n\t\t\t\t\t\tToolkit.generateDynamicPath(simplifiedPath),\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tonMouseDown: event => {\r\n\t\t\t\t\t\t\t\tthis.addPointToLink(event, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"0\"\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// true when smart routing was skipped or not enabled.\r\n\t\t// See @link{#isSmartRoutingApplicable()}.\r\n\t\tif (paths.length === 0) {\r\n\t\t\tif (points.length === 2) {\r\n\t\t\t\tvar isHorizontal = Math.abs(points[0].x - points[1].x) > Math.abs(points[0].y - points[1].y);\r\n\t\t\t\tvar xOrY = isHorizontal ? \"x\" : \"y\";\r\n\r\n\t\t\t\t//draw the smoothing\r\n\t\t\t\t//if the points are too close, just draw a straight line\r\n\t\t\t\tvar margin = 50;\r\n\t\t\t\tif (Math.abs(points[0][xOrY] - points[1][xOrY]) < 50) {\r\n\t\t\t\t\tmargin = 5;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar pointLeft = points[0];\r\n\t\t\t\tvar pointRight = points[1];\r\n\r\n\t\t\t\t//some defensive programming to make sure the smoothing is\r\n\t\t\t\t//always in the right direction\r\n\t\t\t\tif (pointLeft[xOrY] > pointRight[xOrY]) {\r\n\t\t\t\t\tpointLeft = points[1];\r\n\t\t\t\t\tpointRight = points[0];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpaths.push(\r\n\t\t\t\t\tthis.generateLink(\r\n\t\t\t\t\t\tToolkit.generateCurvePath(pointLeft, pointRight, this.props.link.curvyness),\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tonMouseDown: event => {\r\n\t\t\t\t\t\t\t\tthis.addPointToLink(event, 1);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"0\"\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// draw the link as dangeling\r\n\t\t\t\tif (this.props.link.targetPort === null) {\r\n\t\t\t\t\tpaths.push(this.generatePoint(1));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t//draw the multiple anchors and complex line instead\r\n\t\t\t\tfor (let j = 0; j < points.length - 1; j++) {\r\n\t\t\t\t\tpaths.push(\r\n\t\t\t\t\t\tthis.generateLink(\r\n\t\t\t\t\t\t\tToolkit.generateLinePath(points[j], points[j + 1]),\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"data-linkid\": this.props.link.id,\r\n\t\t\t\t\t\t\t\t\"data-point\": j,\r\n\t\t\t\t\t\t\t\tonMouseDown: (event: MouseEvent) => {\r\n\t\t\t\t\t\t\t\t\tthis.addPointToLink(event, j + 1);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tj\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//render the circles\r\n\t\t\t\tfor (var i = 1; i < points.length - 1; i++) {\r\n\t\t\t\t\tpaths.push(this.generatePoint(i));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.props.link.targetPort === null) {\r\n\t\t\t\t\tpaths.push(this.generatePoint(points.length - 1));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.refPaths = [];\r\n\t\treturn (\r\n\t\t\t<g {...this.getProps()}>\r\n\t\t\t\t{paths}\r\n\t\t\t\t{_.map(this.props.link.labels, labelModel => {\r\n\t\t\t\t\treturn this.generateLabel(labelModel);\r\n\t\t\t\t})}\r\n\t\t\t</g>\r\n\t\t);\r\n\t}\r\n}\r\n","import { DefaultPortModel } from \"./DefaultPortModel\";\r\nimport * as _ from \"lodash\";\r\n\r\nimport { NodeModel } from \"../../models/NodeModel\";\r\nimport { Toolkit } from \"../../Toolkit\";\r\nimport { DiagramEngine } from \"../../DiagramEngine\";\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class DefaultNodeModel extends NodeModel {\r\n\tname: string;\r\n\tcolor: string;\r\n\tbgImage: string;\r\n\tports: { [s: string]: DefaultPortModel };\r\n\r\n\tconstructor(name: string = \"Untitled\", color: string = \"rgb(0,192,255)\", bgImage: string = \"\") {\r\n\t\tsuper(\"default\");\r\n\t\tthis.name = name;\r\n\t\tthis.color = color;\r\n\t\tthis.bgImage = bgImage;\r\n\t}\r\n\r\n\taddInPort(label: string): DefaultPortModel {\r\n\t\treturn this.addPort(new DefaultPortModel(true, Toolkit.UID(), label));\r\n\t}\r\n\r\n\taddOutPort(label: string): DefaultPortModel {\r\n\t\treturn this.addPort(new DefaultPortModel(false, Toolkit.UID(), label));\r\n\t}\r\n\r\n\tdeSerialize(object, engine: DiagramEngine) {\r\n\t\tsuper.deSerialize(object, engine);\r\n\t\tthis.name = object.name;\r\n\t\tthis.color = object.color;\r\n\t\tthis.bgImage = object.bgImage;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn _.merge(super.serialize(), {\r\n\t\t\tname: this.name,\r\n\t\t\tcolor: this.color,\r\n\t\t\tbgImage: this.bgImage\r\n\t\t});\r\n\t}\r\n\r\n\tgetInPorts(): DefaultPortModel[] {\r\n\t\treturn _.filter(this.ports, portModel => {\r\n\t\t\treturn portModel.in;\r\n\t\t});\r\n\t}\r\n\r\n\tgetOutPorts(): DefaultPortModel[] {\r\n\t\treturn _.filter(this.ports, portModel => {\r\n\t\t\treturn !portModel.in;\r\n\t\t});\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { DefaultLabelModel } from \"../models/DefaultLabelModel\";\r\nimport { BaseWidget, BaseWidgetProps } from \"../../widgets/BaseWidget\";\r\n\r\nexport interface DefaultLabelWidgetProps extends BaseWidgetProps {\r\n\tmodel: DefaultLabelModel;\r\n}\r\n\r\nexport class DefaultLabelWidget extends BaseWidget<DefaultLabelWidgetProps> {\r\n\tconstructor(props) {\r\n\t\tsuper(\"srd-default-label\", props);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn <div {...this.getProps()}>{this.props.model.label}</div>;\r\n\t}\r\n}\r\n","import { LabelModel } from \"../models/LabelModel\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\nimport { AbstractFactory } from \"./AbstractFactory\";\r\n\r\nexport abstract class AbstractLabelFactory<T extends LabelModel = LabelModel> extends AbstractFactory<T> {\r\n\tabstract generateReactWidget(diagramEngine: DiagramEngine, link: T): JSX.Element;\r\n}\r\n","import * as React from \"react\";\r\nimport { DiagramEngine } from \"../../DiagramEngine\";\r\nimport { AbstractLabelFactory } from \"../../factories/AbstractLabelFactory\";\r\nimport { DefaultLabelModel } from \"../models/DefaultLabelModel\";\r\nimport { DefaultLabelWidget } from \"../widgets/DefaultLabelWidget\";\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class DefaultLabelFactory extends AbstractLabelFactory<DefaultLabelModel> {\r\n\tconstructor() {\r\n\t\tsuper(\"default\");\r\n\t}\r\n\r\n\tgenerateReactWidget(diagramEngine: DiagramEngine, label: DefaultLabelModel): JSX.Element {\r\n\t\treturn <DefaultLabelWidget model={label} />;\r\n\t}\r\n\r\n\tgetNewInstance(initialConfig?: any): DefaultLabelModel {\r\n\t\treturn new DefaultLabelModel();\r\n\t}\r\n}\r\n","import { PortModel } from \"../models/PortModel\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\nimport { AbstractFactory } from \"./AbstractFactory\";\r\n\r\nexport abstract class AbstractPortFactory<T extends PortModel = PortModel> extends AbstractFactory<T> {}\r\n","import { DefaultPortModel } from \"../models/DefaultPortModel\";\r\nimport { AbstractPortFactory } from \"../../factories/AbstractPortFactory\";\r\n\r\nexport class DefaultPortFactory extends AbstractPortFactory<DefaultPortModel> {\r\n\tconstructor() {\r\n\t\tsuper(\"default\");\r\n\t}\r\n\r\n\tgetNewInstance(initialConfig?: any): DefaultPortModel {\r\n\t\treturn new DefaultPortModel(true, \"unknown\");\r\n\t}\r\n}\r\n","import { BaseListener, BaseEntity, BaseEvent, BaseEntityType } from \"../BaseEntity\";\r\nimport * as _ from \"lodash\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\nimport { LinkModel } from \"./LinkModel\";\r\nimport { NodeModel } from \"./NodeModel\";\r\nimport { PortModel } from \"./PortModel\";\r\nimport { BaseModel, BaseModelListener } from \"./BaseModel\";\r\nimport { PointModel } from \"./PointModel\";\r\n/**\r\n * @author Dylan Vorster\r\n *\r\n */\r\nexport interface DiagramListener extends BaseListener {\r\n\tnodesUpdated?(event: BaseEvent & { node: NodeModel; isCreated: boolean }): void;\r\n\r\n\tlinksUpdated?(event: BaseEvent & { link: LinkModel; isCreated: boolean }): void;\r\n\r\n\toffsetUpdated?(event: BaseEvent<DiagramModel> & { offsetX: number; offsetY: number }): void;\r\n\r\n\tzoomUpdated?(event: BaseEvent<DiagramModel> & { zoom: number }): void;\r\n\r\n\tgridUpdated?(event: BaseEvent<DiagramModel> & { size: number }): void;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class DiagramModel extends BaseEntity<DiagramListener> {\r\n\t//models\r\n\tlinks: { [s: string]: LinkModel };\r\n\tnodes: { [s: string]: NodeModel };\r\n\r\n\t//control variables\r\n\toffsetX: number;\r\n\toffsetY: number;\r\n\tzoom: number;\r\n\trendered: boolean;\r\n\tgridSize: number;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.links = {};\r\n\t\tthis.nodes = {};\r\n\r\n\t\tthis.offsetX = 0;\r\n\t\tthis.offsetY = 0;\r\n\t\tthis.zoom = 100;\r\n\t\tthis.rendered = false;\r\n\t\tthis.gridSize = 0;\r\n\t}\r\n\r\n\tsetGridSize(size: number = 0) {\r\n\t\tthis.gridSize = size;\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.gridUpdated) {\r\n\t\t\t\tlistener.gridUpdated({ ...event, size: size });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tgetGridPosition(pos) {\r\n\t\tif (this.gridSize === 0) {\r\n\t\t\treturn pos;\r\n\t\t}\r\n\t\treturn this.gridSize * Math.floor((pos + this.gridSize / 2) / this.gridSize);\r\n\t}\r\n\r\n\tdeSerializeDiagram(object: any, diagramEngine: DiagramEngine) {\r\n\t\tthis.deSerialize(object, diagramEngine);\r\n\r\n\t\tthis.offsetX = object.offsetX;\r\n\t\tthis.offsetY = object.offsetY;\r\n\t\tthis.zoom = object.zoom;\r\n\t\tthis.gridSize = object.gridSize;\r\n\r\n\t\t// deserialize nodes\r\n\t\t_.forEach(object.nodes, (node: any) => {\r\n\t\t\tlet nodeOb = diagramEngine.getNodeFactory(node.type).getNewInstance(node);\r\n\t\t\tnodeOb.setParent(this);\r\n\t\t\tnodeOb.deSerialize(node, diagramEngine);\r\n\t\t\tthis.addNode(nodeOb);\r\n\t\t});\r\n\r\n\t\t// deserialze links\r\n\t\t_.forEach(object.links, (link: any) => {\r\n\t\t\tlet linkOb = diagramEngine.getLinkFactory(link.type).getNewInstance();\r\n\t\t\tlinkOb.setParent(this);\r\n\t\t\tlinkOb.deSerialize(link, diagramEngine);\r\n\t\t\tthis.addLink(linkOb);\r\n\t\t});\r\n\t}\r\n\r\n\tserializeDiagram() {\r\n\t\treturn _.merge(this.serialize(), {\r\n\t\t\toffsetX: this.offsetX,\r\n\t\t\toffsetY: this.offsetY,\r\n\t\t\tzoom: this.zoom,\r\n\t\t\tgridSize: this.gridSize,\r\n\t\t\tlinks: _.map(this.links, link => {\r\n\t\t\t\treturn link.serialize();\r\n\t\t\t}),\r\n\t\t\tnodes: _.map(this.nodes, node => {\r\n\t\t\t\treturn node.serialize();\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n\tclearSelection(ignore: BaseModel<BaseEntity, BaseModelListener> | null = null) {\r\n\t\t_.forEach(this.getSelectedItems(), element => {\r\n\t\t\tif (ignore && ignore.getID() === element.getID()) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\telement.setSelected(false); //TODO dont fire the listener\r\n\t\t});\r\n\t}\r\n\r\n\tgetSelectedItems(...filters: BaseEntityType[]): BaseModel<BaseEntity, BaseModelListener>[] {\r\n\t\tif (!Array.isArray(filters)) {\r\n\t\t\tfilters = [filters];\r\n\t\t}\r\n\t\tvar items = [];\r\n\r\n\t\t// run through nodes\r\n\t\titems = items.concat(\r\n\t\t\t_.flatMap(this.nodes, node => {\r\n\t\t\t\treturn node.getSelectedEntities();\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\t// find all the links\r\n\t\titems = items.concat(\r\n\t\t\t_.flatMap(this.links, link => {\r\n\t\t\t\treturn link.getSelectedEntities();\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\t//find all points\r\n\t\titems = items.concat(\r\n\t\t\t_.flatMap(this.links, link => {\r\n\t\t\t\treturn _.flatMap(link.points, point => {\r\n\t\t\t\t\treturn point.getSelectedEntities();\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\titems = _.uniq(items);\r\n\r\n\t\tif (filters.length > 0) {\r\n\t\t\titems = _.filter(_.uniq(items), (item: BaseModel<any>) => {\r\n\t\t\t\tif (_.includes(filters, \"node\") && item instanceof NodeModel) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tif (_.includes(filters, \"link\") && item instanceof LinkModel) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tif (_.includes(filters, \"port\") && item instanceof PortModel) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tif (_.includes(filters, \"point\") && item instanceof PointModel) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn items;\r\n\t}\r\n\r\n\tsetZoomLevel(zoom: number) {\r\n\t\tthis.zoom = zoom;\r\n\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.zoomUpdated) {\r\n\t\t\t\tlistener.zoomUpdated({ ...event, zoom: zoom });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tsetOffset(offsetX: number, offsetY: number) {\r\n\t\tthis.offsetX = offsetX;\r\n\t\tthis.offsetY = offsetY;\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.offsetUpdated) {\r\n\t\t\t\tlistener.offsetUpdated({ ...event, offsetX: offsetX, offsetY: offsetY });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tsetOffsetX(offsetX: number) {\r\n\t\tthis.offsetX = offsetX;\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.offsetUpdated) {\r\n\t\t\t\tlistener.offsetUpdated({ ...event, offsetX: offsetX, offsetY: this.offsetY });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tsetOffsetY(offsetY: number) {\r\n\t\tthis.offsetY = offsetY;\r\n\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.offsetUpdated) {\r\n\t\t\t\tlistener.offsetUpdated({ ...event, offsetX: this.offsetX, offsetY: this.offsetY });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tgetOffsetY() {\r\n\t\treturn this.offsetY;\r\n\t}\r\n\r\n\tgetOffsetX() {\r\n\t\treturn this.offsetX;\r\n\t}\r\n\r\n\tgetZoomLevel() {\r\n\t\treturn this.zoom;\r\n\t}\r\n\r\n\tgetNode(node: string | NodeModel): NodeModel | null {\r\n\t\tif (node instanceof NodeModel) {\r\n\t\t\treturn node;\r\n\t\t}\r\n\t\tif (!this.nodes[node]) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn this.nodes[node];\r\n\t}\r\n\r\n\tgetLink(link: string | LinkModel): LinkModel | null {\r\n\t\tif (link instanceof LinkModel) {\r\n\t\t\treturn link;\r\n\t\t}\r\n\t\tif (!this.links[link]) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn this.links[link];\r\n\t}\r\n\r\n\taddAll(...models: BaseModel[]): BaseModel[] {\r\n\t\t_.forEach(models, model => {\r\n\t\t\tif (model instanceof LinkModel) {\r\n\t\t\t\tthis.addLink(model);\r\n\t\t\t} else if (model instanceof NodeModel) {\r\n\t\t\t\tthis.addNode(model);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn models;\r\n\t}\r\n\r\n\taddLink(link: LinkModel): LinkModel {\r\n\t\tlink.addListener({\r\n\t\t\tentityRemoved: () => {\r\n\t\t\t\tthis.removeLink(link);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.links[link.getID()] = link;\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.linksUpdated) {\r\n\t\t\t\tlistener.linksUpdated({ ...event, link: link, isCreated: true });\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn link;\r\n\t}\r\n\r\n\taddNode(node: NodeModel): NodeModel {\r\n\t\tnode.addListener({\r\n\t\t\tentityRemoved: () => {\r\n\t\t\t\tthis.removeNode(node);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.nodes[node.getID()] = node;\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.nodesUpdated) {\r\n\t\t\t\tlistener.nodesUpdated({ ...event, node: node, isCreated: true });\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn node;\r\n\t}\r\n\r\n\tremoveLink(link: LinkModel | string) {\r\n\t\tlink = this.getLink(link);\r\n\t\tdelete this.links[link.getID()];\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.linksUpdated) {\r\n\t\t\t\tlistener.linksUpdated({ ...event, link: link as LinkModel, isCreated: false });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tremoveNode(node: NodeModel | string) {\r\n\t\tnode = this.getNode(node);\r\n\t\tdelete this.nodes[node.getID()];\r\n\t\tthis.iterateListeners((listener, event) => {\r\n\t\t\tif (listener.nodesUpdated) {\r\n\t\t\t\tlistener.nodesUpdated({ ...event, node: node as NodeModel, isCreated: false });\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tgetLinks(): { [s: string]: LinkModel } {\r\n\t\treturn this.links;\r\n\t}\r\n\r\n\tgetNodes(): { [s: string]: NodeModel } {\r\n\t\treturn this.nodes;\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { DiagramEngine } from \"../DiagramEngine\";\r\nimport * as _ from \"lodash\";\r\nimport { LinkLayerWidget } from \"./layers/LinkLayerWidget\";\r\nimport { NodeLayerWidget } from \"./layers/NodeLayerWidget\";\r\nimport { Toolkit } from \"../Toolkit\";\r\nimport { BaseAction } from \"../actions/BaseAction\";\r\nimport { MoveCanvasAction } from \"../actions/MoveCanvasAction\";\r\nimport { MoveItemsAction } from \"../actions/MoveItemsAction\";\r\nimport { SelectingAction } from \"../actions/SelectingAction\";\r\nimport { NodeModel } from \"../models/NodeModel\";\r\nimport { PointModel } from \"../models/PointModel\";\r\nimport { PortModel } from \"../models/PortModel\";\r\nimport { LinkModel } from \"../models/LinkModel\";\r\nimport { SelectionModel } from \"../models/SelectionModel\";\r\nimport { BaseModel, BaseModelListener } from \"../models/BaseModel\";\r\nimport { BaseEntity } from \"../BaseEntity\";\r\nimport { BaseWidget, BaseWidgetProps } from \"./BaseWidget\";\r\n\r\nexport interface DiagramProps extends BaseWidgetProps {\r\n\tdiagramEngine: DiagramEngine;\r\n\r\n\tallowLooseLinks?: boolean;\r\n\tallowCanvasTranslation?: boolean;\r\n\tallowCanvasZoom?: boolean;\r\n\tinverseZoom?: boolean;\r\n\tmaxNumberPointsPerLink?: number;\r\n\tsmartRouting?: boolean;\r\n\r\n\tactionStartedFiring?: (action: BaseAction) => boolean;\r\n\tactionStillFiring?: (action: BaseAction) => void;\r\n\tactionStoppedFiring?: (action: BaseAction) => void;\r\n\r\n\tdeleteKeys?: number[];\r\n}\r\n\r\nexport interface DiagramState {\r\n\taction: BaseAction | null;\r\n\twasMoved: boolean;\r\n\trenderedNodes: boolean;\r\n\twindowListener: any;\r\n\tdiagramEngineListener: any;\r\n\tdocument: any;\r\n}\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class DiagramWidget extends BaseWidget<DiagramProps, DiagramState> {\r\n\tpublic static defaultProps: DiagramProps = {\r\n\t\tdiagramEngine: null,\r\n\t\tallowLooseLinks: true,\r\n\t\tallowCanvasTranslation: true,\r\n\t\tallowCanvasZoom: true,\r\n\t\tinverseZoom: false,\r\n\t\tmaxNumberPointsPerLink: Infinity, // backwards compatible default\r\n\t\tsmartRouting: false,\r\n\t\tdeleteKeys: [46, 8]\r\n\t};\r\n\r\n\tnodeId: string = '';\r\n\r\n\tonKeyUpPointer: (this: Window, ev: KeyboardEvent) => void = null;\r\n\r\n\tconstructor(props: DiagramProps) {\r\n\t\tsuper(\"srd-diagram\", props);\r\n\t\tthis.onMouseMove = this.onMouseMove.bind(this);\r\n\t\tthis.onMouseUp = this.onMouseUp.bind(this);\r\n\t\tthis.state = {\r\n\t\t\taction: null,\r\n\t\t\twasMoved: false,\r\n\t\t\trenderedNodes: false,\r\n\t\t\twindowListener: null,\r\n\t\t\tdiagramEngineListener: null,\r\n\t\t\tdocument: null\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tthis.props.diagramEngine.removeListener(this.state.diagramEngineListener);\r\n\t\tthis.props.diagramEngine.setCanvas(null);\r\n\t\twindow.removeEventListener(\"keyup\", this.onKeyUpPointer);\r\n\t\twindow.removeEventListener(\"mouseUp\", this.onMouseUp);\r\n\t\twindow.removeEventListener(\"mouseMove\", this.onMouseMove);\r\n\t}\r\n\r\n\tcomponentWillReceiveProps(nextProps: DiagramProps) {\r\n\t\tif (this.props.diagramEngine !== nextProps.diagramEngine) {\r\n\t\t\tthis.props.diagramEngine.removeListener(this.state.diagramEngineListener);\r\n\t\t\tconst diagramEngineListener = nextProps.diagramEngine.addListener({\r\n\t\t\t\trepaintCanvas: () => this.forceUpdate()\r\n\t\t\t});\r\n\t\t\tthis.setState({ diagramEngineListener });\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillUpdate(nextProps: DiagramProps) {\r\n\t\tif (this.props.diagramEngine.diagramModel.id !== nextProps.diagramEngine.diagramModel.id) {\r\n\t\t\tthis.setState({ renderedNodes: false });\r\n\t\t\tnextProps.diagramEngine.diagramModel.rendered = true;\r\n\t\t}\r\n\t\tif (!nextProps.diagramEngine.diagramModel.rendered) {\r\n\t\t\tthis.setState({ renderedNodes: false });\r\n\t\t\tnextProps.diagramEngine.diagramModel.rendered = true;\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate() {\r\n\t\tif (!this.state.renderedNodes) {\r\n\t\t\tthis.setState({\r\n\t\t\t\trenderedNodes: true\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.onKeyUpPointer = this.onKeyUp.bind(this);\r\n\r\n\t\t//add a keyboard listener\r\n\t\tthis.setState({\r\n\t\t\tdocument: document,\r\n\t\t\trenderedNodes: true,\r\n\t\t\tdiagramEngineListener: this.props.diagramEngine.addListener({\r\n\t\t\t\trepaintCanvas: () => {\r\n\t\t\t\t\tthis.forceUpdate();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\r\n\r\n\t\twindow.addEventListener(\"keyup\", this.onKeyUpPointer, false);\r\n\r\n\t\t// dont focus the window when in test mode - jsdom fails\r\n\t\tif (process.env.NODE_ENV !== \"test\") {\r\n\t\t\twindow.focus();\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n\t * Highlight all the available IN ports\r\n\t */\r\n\tdisplayPorts(model, check: boolean) {\r\n\t\t_.forEach(model.getNodes(), node => {\r\n\t\t\t_.forEach(node.ports, port => {\r\n\t\t\t\tif(port['in']===true && Object.keys(port['links']).length===0) {\r\n\t\t\t\t\tif(this.nodeId!==node['id'] && check) {\r\n\t\t\t\t\t\tvar nodeElement=document.getElementById(node['id']).childNodes[0] as HTMLElement;\r\n\t\t\t\t\t\tnodeElement.className=\"srd-default-node__ports-status\";\r\n\t\t\t\t\t\tvar element=document.getElementById(\"port\"+port['name']) as HTMLElement;\r\n\t\t\t\t\t\telement.style.background=\"rgb(255,107,53)\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(!check) {\r\n\t\t\t\t\t\tvar nodeElement=document.getElementById(node['id']).childNodes[0] as HTMLElement;\r\n\t\t\t\t\t\tnodeElement.className=\"srd-default-node__ports\";\r\n\t\t\t\t\t\tvar element=document.getElementById(\"port\"+port['name']) as HTMLElement;\r\n\t\t\t\t\t\telement.style.background=\"rgb(255,255,255)\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Gets a model and element under the mouse cursor\r\n\t */\r\n\tgetMouseElement(event): { model: BaseModel<BaseEntity, BaseModelListener>; element: Element } {\r\n\t\tvar target = event.target as Element;\r\n\t\tvar diagramModel = this.props.diagramEngine.diagramModel;\r\n\r\n\t\t//is it a port\r\n\t\tvar element = Toolkit.closest(target, \".port[data-name]\");\r\n\r\n\t\tif (element) {\r\n\t\t\tthis.nodeId=element.getAttribute('data-nodeid');\r\n\t\t\tthis.displayPorts(diagramModel, false);\r\n\t\t\tvar nodeElement = Toolkit.closest(target, \".node[data-nodeid]\") as HTMLElement;\r\n\t\t\treturn {\r\n\t\t\t\tmodel: diagramModel\r\n\t\t\t\t\t.getNode(nodeElement.getAttribute(\"data-nodeid\"))\r\n\t\t\t\t\t.getPort(element.getAttribute(\"data-name\")),\r\n\t\t\t\telement: element\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t//look for a point\r\n\t\telement = Toolkit.closest(target, \".point[data-id]\");\r\n\t\tif (element) {\r\n\t\t\tthis.displayPorts(diagramModel, false);\r\n\t\t\treturn {\r\n\t\t\t\tmodel: diagramModel\r\n\t\t\t\t\t.getLink(element.getAttribute(\"data-linkid\"))\r\n\t\t\t\t\t.getPointModel(element.getAttribute(\"data-id\")),\r\n\t\t\t\telement: element\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t//look for a link\r\n\t\telement = Toolkit.closest(target, \"[data-linkid]\");\r\n\t\tif (element) {\r\n\t\t\tthis.displayPorts(diagramModel, false);\r\n\t\t\treturn {\r\n\t\t\t\tmodel: diagramModel.getLink(element.getAttribute(\"data-linkid\")),\r\n\t\t\t\telement: element\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t//look for a node\r\n\t\telement = Toolkit.closest(target, \".node[data-nodeid]\");\r\n\t\tif (element) {\r\n\t\t\tthis.displayPorts(diagramModel, false);\r\n\t\t\treturn {\r\n\t\t\t\tmodel: diagramModel.getNode(element.getAttribute(\"data-nodeid\")),\r\n\t\t\t\telement: element\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfireAction() {\r\n\t\tif (this.state.action && this.props.actionStillFiring) {\r\n\t\t\tthis.props.actionStillFiring(this.state.action);\r\n\t\t}\r\n\t}\r\n\r\n\tstopFiringAction(shouldSkipEvent?: boolean) {\r\n\t\tif (this.props.actionStoppedFiring && !shouldSkipEvent) {\r\n\t\t\tthis.props.actionStoppedFiring(this.state.action);\r\n\t\t}\r\n\t\tthis.setState({ action: null });\r\n\t}\r\n\r\n\tstartFiringAction(action: BaseAction) {\r\n\t\tvar setState = true;\r\n\t\tif (this.props.actionStartedFiring) {\r\n\t\t\tsetState = this.props.actionStartedFiring(action);\r\n\t\t}\r\n\t\tif (setState) {\r\n\t\t\tthis.setState({ action: action });\r\n\t\t}\r\n\t}\r\n\r\n\tonMouseMove(event) {\r\n\t\tvar diagramEngine = this.props.diagramEngine;\r\n\t\tvar diagramModel = diagramEngine.getDiagramModel();\r\n\t\t//select items so draw a bounding box\r\n\t\tif (this.state.action instanceof SelectingAction) {\r\n\t\t\tvar relative = diagramEngine.getRelativePoint(event.clientX, event.clientY);\r\n\r\n\t\t\t_.forEach(diagramModel.getNodes(), node => {\r\n\t\t\t\tif ((this.state.action as SelectingAction).containsElement(node.x, node.y, diagramModel)) {\r\n\t\t\t\t\tnode.setSelected(true);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t_.forEach(diagramModel.getLinks(), link => {\r\n\t\t\t\tvar allSelected = true;\r\n\t\t\t\t_.forEach(link.points, point => {\r\n\t\t\t\t\tif ((this.state.action as SelectingAction).containsElement(point.x, point.y, diagramModel)) {\r\n\t\t\t\t\t\tpoint.setSelected(true);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tallSelected = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (allSelected) {\r\n\t\t\t\t\tlink.setSelected(true);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.state.action.mouseX2 = relative.x;\r\n\t\t\tthis.state.action.mouseY2 = relative.y;\r\n\r\n\t\t\tthis.fireAction();\r\n\t\t\tthis.setState({ action: this.state.action });\r\n\t\t\treturn;\r\n\t\t} else if (this.state.action instanceof MoveItemsAction) {\r\n\t\t\tlet amountX = event.clientX - this.state.action.mouseX;\r\n\t\t\tlet amountY = event.clientY - this.state.action.mouseY;\r\n\t\t\tlet amountZoom = diagramModel.getZoomLevel() / 100;\r\n\r\n\t\t\t_.forEach(this.state.action.selectionModels, model => {\r\n\t\t\t\t// in this case we need to also work out the relative grid position\r\n\t\t\t\tif (\r\n\t\t\t\t\tmodel.model instanceof NodeModel ||\r\n\t\t\t\t\t(model.model instanceof PointModel && !model.model.isConnectedToPort())\r\n\t\t\t\t) {\r\n\t\t\t\t\tmodel.model.x = diagramModel.getGridPosition(model.initialX + amountX / amountZoom);\r\n\t\t\t\t\tmodel.model.y = diagramModel.getGridPosition(model.initialY + amountY / amountZoom);\r\n\r\n\t\t\t\t\t// update port coordinates as well\r\n\t\t\t\t\tif (model.model instanceof NodeModel) {\r\n\t\t\t\t\t\t_.forEach(model.model.getPorts(), port => {\r\n\t\t\t\t\t\t\tconst portCoords = this.props.diagramEngine.getPortCoords(port);\r\n\t\t\t\t\t\t\tport.updateCoords(portCoords);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (diagramEngine.isSmartRoutingEnabled()) {\r\n\t\t\t\t\t\tdiagramEngine.calculateRoutingMatrix();\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (model.model instanceof PointModel) {\r\n\t\t\t\t\t// we want points that are connected to ports, to not necessarily snap to grid\r\n\t\t\t\t\t// this stuff needs to be pixel perfect, dont touch it\r\n\t\t\t\t\tmodel.model.x = model.initialX + diagramModel.getGridPosition(amountX / amountZoom);\r\n\t\t\t\t\tmodel.model.y = model.initialY + diagramModel.getGridPosition(amountY / amountZoom);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (diagramEngine.isSmartRoutingEnabled()) {\r\n\t\t\t\tdiagramEngine.calculateCanvasMatrix();\r\n\t\t\t}\r\n\r\n\t\t\tthis.fireAction();\r\n\t\t\tif (!this.state.wasMoved) {\r\n\t\t\t\tthis.setState({ wasMoved: true });\r\n\t\t\t} else {\r\n\t\t\t\tthis.forceUpdate();\r\n\t\t\t}\r\n\t\t} else if (this.state.action instanceof MoveCanvasAction) {\r\n\t\t\t//translate the actual canvas\r\n\t\t\tif (this.props.allowCanvasTranslation) {\r\n\t\t\t\tdiagramModel.setOffset(\r\n\t\t\t\t\tthis.state.action.initialOffsetX + (event.clientX - this.state.action.mouseX),\r\n\t\t\t\t\tthis.state.action.initialOffsetY + (event.clientY - this.state.action.mouseY)\r\n\t\t\t\t);\r\n\t\t\t\tthis.fireAction();\r\n\t\t\t\tthis.forceUpdate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonKeyUp(event) {\r\n\t\t//delete all selected\r\n\t\tif (this.props.deleteKeys.indexOf(event.keyCode) !== -1) {\r\n\t\t\t_.forEach(this.props.diagramEngine.getDiagramModel().getSelectedItems(), element => {\r\n\t\t\t\t//only delete items which are not locked\r\n\t\t\t\tif (!this.props.diagramEngine.isModelLocked(element)) {\r\n\t\t\t\t\telement.remove();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.forceUpdate();\r\n\t\t}\r\n\t}\r\n\r\n\tonMouseUp(event) {\r\n\t\tvar diagramEngine = this.props.diagramEngine;\r\n\t\t//are we going to connect a link to something?\r\n\t\tif (this.state.action instanceof MoveItemsAction) {\r\n\t\t\tvar element = this.getMouseElement(event);\r\n\t\t\t_.forEach(this.state.action.selectionModels, model => {\r\n\t\t\t\t//only care about points connecting to things\r\n\t\t\t\tif (!(model.model instanceof PointModel)) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (element && element.model instanceof PortModel && !diagramEngine.isModelLocked(element.model)) {\r\n\t\t\t\t\tlet link = model.model.getLink();\r\n\t\t\t\t\tif (link.getTargetPort() !== null) {\r\n\t\t\t\t\t\t//if this was a valid link already and we are adding a node in the middle, create 2 links from the original\r\n\t\t\t\t\t\tif (link.getTargetPort() !== element.model && link.getSourcePort() !== element.model) {\r\n\t\t\t\t\t\t\tconst targetPort = link.getTargetPort();\r\n\t\t\t\t\t\t\tlet newLink = link.clone({});\r\n\t\t\t\t\t\t\tnewLink.setSourcePort(element.model);\r\n\t\t\t\t\t\t\tnewLink.setTargetPort(targetPort);\r\n\t\t\t\t\t\t\tlink.setTargetPort(element.model);\r\n\t\t\t\t\t\t\ttargetPort.removeLink(link);\r\n\t\t\t\t\t\t\tnewLink.removePointsBefore(newLink.getPoints()[link.getPointIndex(model.model)]);\r\n\t\t\t\t\t\t\tlink.removePointsAfter(model.model);\r\n\t\t\t\t\t\t\tdiagramEngine.getDiagramModel().addLink(newLink);\r\n\t\t\t\t\t\t\t//if we are connecting to the same target or source, remove tweener points\r\n\t\t\t\t\t\t} else if (link.getTargetPort() === element.model) {\r\n\t\t\t\t\t\t\tlink.removePointsAfter(model.model);\r\n\t\t\t\t\t\t} else if (link.getSourcePort() === element.model) {\r\n\t\t\t\t\t\t\tlink.removePointsBefore(model.model);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tlink.setTargetPort(element.model);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdelete this.props.diagramEngine.linksThatHaveInitiallyRendered[link.getID()];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t//check for / remove any loose links in any models which have been moved\r\n\t\t\tif (!this.props.allowLooseLinks && this.state.wasMoved) {\r\n\t\t\t\t_.forEach(this.state.action.selectionModels, model => {\r\n\t\t\t\t\t//only care about points connecting to things\r\n\t\t\t\t\tif (!(model.model instanceof PointModel)) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet selectedPoint: PointModel = model.model;\r\n\t\t\t\t\tlet link: LinkModel = selectedPoint.getLink();\r\n\t\t\t\t\tif (link.getSourcePort() === null || link.getTargetPort() === null) {\r\n\t\t\t\t\t\tlink.remove();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t//remove any invalid links\r\n\t\t\t_.forEach(this.state.action.selectionModels, model => {\r\n\t\t\t\t//only care about points connecting to things\r\n\t\t\t\tif (!(model.model instanceof PointModel)) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet link: LinkModel = model.model.getLink();\r\n\t\t\t\tlet sourcePort: PortModel = link.getSourcePort();\r\n\t\t\t\tlet targetPort: PortModel = link.getTargetPort();\r\n\t\t\t\tif (sourcePort !== null && targetPort !== null) {\r\n\t\t\t\t\tif (!sourcePort.canLinkToPort(targetPort)) {\r\n\t\t\t\t\t\t//link not allowed\r\n\t\t\t\t\t\tlink.remove();\r\n\t\t\t\t\t} else if (\r\n\t\t\t\t\t\t_.some(\r\n\t\t\t\t\t\t\t_.values(targetPort.getLinks()),\r\n\t\t\t\t\t\t\t(l: LinkModel) =>\r\n\t\t\t\t\t\t\t\tl !== link && (l.getSourcePort() === sourcePort || l.getTargetPort() === sourcePort)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\t//link is a duplicate\r\n\t\t\t\t\t\tlink.remove();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tdiagramEngine.clearRepaintEntities();\r\n\t\t\tthis.stopFiringAction(!this.state.wasMoved);\r\n\t\t} else {\r\n\t\t\tdiagramEngine.clearRepaintEntities();\r\n\t\t\tthis.stopFiringAction();\r\n\t\t}\r\n\t\tthis.state.document.removeEventListener(\"mousemove\", this.onMouseMove);\r\n\t\tthis.state.document.removeEventListener(\"mouseup\", this.onMouseUp);\r\n\t}\r\n\r\n\tdrawSelectionBox() {\r\n\t\tlet dimensions = (this.state.action as SelectingAction).getBoxDimensions();\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tclassName={this.bem(\"__selector\")}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\ttop: dimensions.top,\r\n\t\t\t\t\tleft: dimensions.left,\r\n\t\t\t\t\twidth: dimensions.width,\r\n\t\t\t\t\theight: dimensions.height\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n\r\n\trender() {\r\n\t\tvar diagramEngine = this.props.diagramEngine;\r\n\t\tdiagramEngine.setMaxNumberPointsPerLink(this.props.maxNumberPointsPerLink);\r\n\t\tdiagramEngine.setSmartRoutingStatus(this.props.smartRouting);\r\n\t\tvar diagramModel = diagramEngine.getDiagramModel();\r\n\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\t{...this.getProps()}\r\n\t\t\t\tref={ref => {\r\n\t\t\t\t\tif (ref) {\r\n\t\t\t\t\t\tthis.props.diagramEngine.setCanvas(ref);\r\n\t\t\t\t\t}\r\n\t\t\t\t}}\r\n\t\t\t\tonWheel={event => {\r\n\t\t\t\t\tif (this.props.allowCanvasZoom) {\r\n\t\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\t\tevent.stopPropagation();\r\n\t\t\t\t\t\tconst oldZoomFactor = diagramModel.getZoomLevel() / 100;\r\n\t\t\t\t\t\tlet scrollDelta = this.props.inverseZoom ? -event.deltaY : event.deltaY;\r\n\t\t\t\t\t\t//check if it is pinch gesture\r\n\t\t\t\t\t\tif (event.ctrlKey && scrollDelta % 1 !== 0) {\r\n\t\t\t\t\t\t\t/*Chrome and Firefox sends wheel event with deltaY that\r\n                have fractional part, also `ctrlKey` prop of the event is true\r\n                though ctrl isn't pressed\r\n              */\r\n\t\t\t\t\t\t\tscrollDelta /= 3;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tscrollDelta /= 60;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (diagramModel.getZoomLevel() + scrollDelta > 10) {\r\n\t\t\t\t\t\t\tdiagramModel.setZoomLevel(diagramModel.getZoomLevel() + scrollDelta);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst zoomFactor = diagramModel.getZoomLevel() / 100;\r\n\r\n\t\t\t\t\t\tconst boundingRect = event.currentTarget.getBoundingClientRect();\r\n\t\t\t\t\t\tconst clientWidth = boundingRect.width;\r\n\t\t\t\t\t\tconst clientHeight = boundingRect.height;\r\n\t\t\t\t\t\t// compute difference between rect before and after scroll\r\n\t\t\t\t\t\tconst widthDiff = clientWidth * zoomFactor - clientWidth * oldZoomFactor;\r\n\t\t\t\t\t\tconst heightDiff = clientHeight * zoomFactor - clientHeight * oldZoomFactor;\r\n\t\t\t\t\t\t// compute mouse coords relative to canvas\r\n\t\t\t\t\t\tconst clientX = event.clientX - boundingRect.left;\r\n\t\t\t\t\t\tconst clientY = event.clientY - boundingRect.top;\r\n\r\n\t\t\t\t\t\t// compute width and height increment factor\r\n\t\t\t\t\t\tconst xFactor = (clientX - diagramModel.getOffsetX()) / oldZoomFactor / clientWidth;\r\n\t\t\t\t\t\tconst yFactor = (clientY - diagramModel.getOffsetY()) / oldZoomFactor / clientHeight;\r\n\r\n\t\t\t\t\t\tdiagramModel.setOffset(\r\n\t\t\t\t\t\t\tdiagramModel.getOffsetX() - widthDiff * xFactor,\r\n\t\t\t\t\t\t\tdiagramModel.getOffsetY() - heightDiff * yFactor\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tdiagramEngine.enableRepaintEntities([]);\r\n\t\t\t\t\t\tthis.forceUpdate();\r\n\t\t\t\t\t}\r\n\t\t\t\t}}\r\n\t\t\t\tonMouseDown={event => {\r\n\t\t\t\t\tthis.setState({ ...this.state, wasMoved: false });\r\n\r\n\t\t\t\t\tdiagramEngine.clearRepaintEntities();\r\n\t\t\t\t\tvar model = this.getMouseElement(event);\r\n\t\t\t\t\t//the canvas was selected\r\n\t\t\t\t\tif (model === null) {\r\n\t\t\t\t\t\t//is it a multiple selection\r\n\t\t\t\t\t\tif (event.shiftKey) {\r\n\t\t\t\t\t\t\tvar relative = diagramEngine.getRelativePoint(event.clientX, event.clientY);\r\n\t\t\t\t\t\t\tthis.startFiringAction(new SelectingAction(relative.x, relative.y));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t//its a drag the canvas event\r\n\t\t\t\t\t\t\tdiagramModel.clearSelection();\r\n\t\t\t\t\t\t\tthis.startFiringAction(new MoveCanvasAction(event.clientX, event.clientY, diagramModel));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (model.model instanceof PortModel) {\r\n\t\t\t\t\t\t//its a port element, we want to drag a link\r\n\t\t\t\t\t\tif (!this.props.diagramEngine.isModelLocked(model.model)) {\r\n\t\t\t\t\t\t\tvar relative = diagramEngine.getRelativeMousePoint(event);\r\n\t\t\t\t\t\t\tvar sourcePort = model.model;\r\n\t\t\t\t\t\t\t//var link = sourcePort.createLinkModel();\r\n\t\t\t\t\t\t\t//link.setSourcePort(sourcePort);\r\n\r\n\t\t\t\t\t\t\t// Check for out ports to create links.\r\n\t\t\t\t\t\t\tvar link;\r\n\t\t\t\t\t\t\tif(!sourcePort['in'] && sourcePort['maximumLinks']===1 && Object.keys(sourcePort['links']).length===0) {\r\n\t\t\t\t\t\t\t\tlink= sourcePort.createLinkModel();\r\n\t\t\t\t\t\t\t\tlink.setSourcePort(sourcePort);\r\n\t\t\t\t\t\t\t\tthis.displayPorts(this.props.diagramEngine.getDiagramModel(), true);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (link) {\r\n\t\t\t\t\t\t\t\tlink.removeMiddlePoints();\r\n\t\t\t\t\t\t\t\tif (link.getSourcePort() !== sourcePort) {\r\n\t\t\t\t\t\t\t\t\tlink.setSourcePort(sourcePort);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tlink.setTargetPort(null);\r\n\r\n\t\t\t\t\t\t\t\tlink.getFirstPoint().updateLocation(relative);\r\n\t\t\t\t\t\t\t\tlink.getLastPoint().updateLocation(relative);\r\n\r\n\t\t\t\t\t\t\t\tdiagramModel.clearSelection();\r\n\t\t\t\t\t\t\t\tlink.getLastPoint().setSelected(true);\r\n\t\t\t\t\t\t\t\tdiagramModel.addLink(link);\r\n\r\n\t\t\t\t\t\t\t\tthis.startFiringAction(\r\n\t\t\t\t\t\t\t\t\tnew MoveItemsAction(event.clientX, event.clientY, diagramEngine)\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tdiagramModel.clearSelection();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t//its some or other element, probably want to move it\r\n\t\t\t\t\t\tif (!event.shiftKey && !model.model.isSelected()) {\r\n\t\t\t\t\t\t\tdiagramModel.clearSelection();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmodel.model.setSelected(true);\r\n\r\n\t\t\t\t\t\tthis.startFiringAction(new MoveItemsAction(event.clientX, event.clientY, diagramEngine));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.state.document.addEventListener(\"mousemove\", this.onMouseMove);\r\n\t\t\t\t\tthis.state.document.addEventListener(\"mouseup\", this.onMouseUp);\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t{this.state.renderedNodes && (\r\n\t\t\t\t\t<LinkLayerWidget\r\n\t\t\t\t\t\tdiagramEngine={diagramEngine}\r\n\t\t\t\t\t\tpointAdded={(point: PointModel, event) => {\r\n\t\t\t\t\t\t\tthis.state.document.addEventListener(\"mousemove\", this.onMouseMove);\r\n\t\t\t\t\t\t\tthis.state.document.addEventListener(\"mouseup\", this.onMouseUp);\r\n\t\t\t\t\t\t\tevent.stopPropagation();\r\n\t\t\t\t\t\t\tdiagramModel.clearSelection(point);\r\n\t\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\t\taction: new MoveItemsAction(event.clientX, event.clientY, diagramEngine)\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t\t<NodeLayerWidget diagramEngine={diagramEngine} />\r\n\t\t\t\t{this.state.action instanceof SelectingAction && this.drawSelectionBox()}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import { DefaultNodeModel } from \"../models/DefaultNodeModel\";\r\nimport * as React from \"react\";\r\nimport { DefaultNodeWidget } from \"../widgets/DefaultNodeWidget\";\r\nimport { DiagramEngine } from \"../../DiagramEngine\";\r\nimport { AbstractNodeFactory } from \"../../factories/AbstractNodeFactory\";\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class DefaultNodeFactory extends AbstractNodeFactory<DefaultNodeModel> {\r\n\tconstructor() {\r\n\t\tsuper(\"default\");\r\n\t}\r\n\r\n\tgenerateReactWidget(diagramEngine: DiagramEngine, node: DefaultNodeModel): JSX.Element {\r\n\t\treturn React.createElement(DefaultNodeWidget, {\r\n\t\t\tnode: node,\r\n\t\t\tdiagramEngine: diagramEngine\r\n\t\t});\r\n\t}\r\n\r\n\tgetNewInstance(initialConfig?: any): DefaultNodeModel {\r\n\t\treturn new DefaultNodeModel();\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport { DefaultLinkWidget } from \"../widgets/DefaultLinkWidget\";\r\nimport { DiagramEngine } from \"../../DiagramEngine\";\r\nimport { AbstractLinkFactory } from \"../../factories/AbstractLinkFactory\";\r\nimport { DefaultLinkModel } from \"../models/DefaultLinkModel\";\r\nimport { Toolkit } from \"../../main\";\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class DefaultLinkFactory extends AbstractLinkFactory<DefaultLinkModel> {\r\n\tconstructor() {\r\n\t\tsuper(\"default\");\r\n\t}\r\n\r\n\tgenerateReactWidget(diagramEngine: DiagramEngine, link: DefaultLinkModel): JSX.Element {\r\n\t\treturn React.createElement(DefaultLinkWidget, {\r\n\t\t\tlink: link,\r\n\t\t\tdiagramEngine: diagramEngine\r\n\t\t});\r\n\t}\r\n\r\n\tgetNewInstance(initialConfig?: any): DefaultLinkModel {\r\n\t\treturn new DefaultLinkModel();\r\n\t}\r\n\r\n\tgenerateLinkSegment(model: DefaultLinkModel, widget: DefaultLinkWidget, selected: boolean, path: string) {\r\n\t\tconst markerId = Toolkit.UID();\r\n\t\tconst markerEndUrl = \"url(#\"+markerId+\")\";\r\n\t\treturn (\r\n\t\t\t// <path\r\n\t\t\t// \tclassName={selected ? widget.bem(\"--path-selected\") : \"\"}\r\n\t\t\t// \tstrokeWidth={model.width}\r\n\t\t\t// \tstroke={model.color}\r\n\t\t\t// \td={path}\r\n\t\t\t// />\r\n\t\t\t<g>\r\n\t\t\t\t<defs>\r\n\t\t\t\t\t<marker id={markerId} markerWidth=\"8\" markerHeight=\"8\" refX=\"3\" refY=\"3\" orient=\"auto\" markerUnits=\"strokeWidth\">\r\n\t\t\t\t\t\t<path d=\"M0,0 L0,6 L3.5,3 z\" className={selected ? widget.bem(\"--marker-selected\"):widget.bem(\"-marker\")}/>\r\n\t\t\t\t\t</marker>\r\n\t\t\t\t</defs>\r\n\r\n\t\t\t\t<path\r\n\t\t\t\t\tclassName={selected ? widget.bem(\"--path-selected\") : \"\"}\r\n\t\t\t\t\tfill= \"none\"\r\n\t\t\t\t\tstrokeWidth={model.width}\r\n\t\t\t\t\tstroke={model.color}\r\n\t\t\t\t\td={path}\r\n\t\t\t\t\tmarkerEnd={markerEndUrl}\r\n\t\t\t\t/>\r\n\t\t\t</g>\r\n\t\t);\r\n\t}\r\n}\r\n","import { BaseEntity, BaseListener } from \"./BaseEntity\";\r\nimport { DiagramModel } from \"./models/DiagramModel\";\r\nimport * as _ from \"lodash\";\r\nimport { BaseModel, BaseModelListener } from \"./models/BaseModel\";\r\nimport { NodeModel } from \"./models/NodeModel\";\r\nimport { PointModel } from \"./models/PointModel\";\r\nimport { PortModel } from \"./models/PortModel\";\r\nimport { LinkModel } from \"./models/LinkModel\";\r\nimport { AbstractLabelFactory } from \"./factories/AbstractLabelFactory\";\r\nimport { AbstractLinkFactory } from \"./factories/AbstractLinkFactory\";\r\nimport { AbstractNodeFactory } from \"./factories/AbstractNodeFactory\";\r\nimport { AbstractPortFactory } from \"./factories/AbstractPortFactory\";\r\nimport { DefaultLinkFactory, DefaultNodeFactory } from \"./main\";\r\nimport { ROUTING_SCALING_FACTOR } from \"./routing/PathFinding\";\r\nimport { DefaultPortFactory } from \"./defaults/factories/DefaultPortFactory\";\r\nimport { LabelModel } from \"./models/LabelModel\";\r\nimport { DefaultLabelFactory } from \"./defaults/factories/DefaultLabelFactory\";\r\nimport { Toolkit } from \"./Toolkit\";\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport interface DiagramEngineListener extends BaseListener {\r\n\tportFactoriesUpdated?(): void;\r\n\r\n\tnodeFactoriesUpdated?(): void;\r\n\r\n\tlinkFactoriesUpdated?(): void;\r\n\r\n\tlabelFactoriesUpdated?(): void;\r\n\r\n\trepaintCanvas?(): void;\r\n}\r\n\r\n/**\r\n * Passed as a parameter to the DiagramWidget\r\n */\r\nexport class DiagramEngine extends BaseEntity<DiagramEngineListener> {\r\n\tnodeFactories: { [s: string]: AbstractNodeFactory };\r\n\tlinkFactories: { [s: string]: AbstractLinkFactory };\r\n\tportFactories: { [s: string]: AbstractPortFactory };\r\n\tlabelFactories: { [s: string]: AbstractLabelFactory };\r\n\r\n\tdiagramModel: DiagramModel;\r\n\tcanvas: Element;\r\n\tpaintableWidgets: {};\r\n\tlinksThatHaveInitiallyRendered: {};\r\n\tnodesRendered: boolean;\r\n\tmaxNumberPointsPerLink: number;\r\n\tsmartRouting: boolean;\r\n\r\n\t// calculated only when smart routing is active\r\n\tcanvasMatrix: number[][] = [];\r\n\troutingMatrix: number[][] = [];\r\n\t// used when at least one element has negative coordinates\r\n\thAdjustmentFactor: number = 0;\r\n\tvAdjustmentFactor: number = 0;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.diagramModel = new DiagramModel();\r\n\t\tthis.nodeFactories = {};\r\n\t\tthis.linkFactories = {};\r\n\t\tthis.portFactories = {};\r\n\t\tthis.labelFactories = {};\r\n\t\tthis.canvas = null;\r\n\t\tthis.paintableWidgets = null;\r\n\t\tthis.linksThatHaveInitiallyRendered = {};\r\n\r\n\t\tif (Toolkit.TESTING) {\r\n\t\t\tToolkit.TESTING_UID = 0;\r\n\r\n\t\t\t//pop it onto the window so our E2E helpers can find it\r\n\t\t\tif (window) {\r\n\t\t\t\t(window as any)[\"diagram_instance\"] = this;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tinstallDefaultFactories() {\r\n\t\tthis.registerNodeFactory(new DefaultNodeFactory());\r\n\t\tthis.registerLinkFactory(new DefaultLinkFactory());\r\n\t\tthis.registerPortFactory(new DefaultPortFactory());\r\n\t\tthis.registerLabelFactory(new DefaultLabelFactory());\r\n\t}\r\n\r\n\trepaintCanvas() {\r\n\t\tthis.iterateListeners(listener => {\r\n\t\t\tif (listener.repaintCanvas) {\r\n\t\t\t\tlistener.repaintCanvas();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tclearRepaintEntities() {\r\n\t\tthis.paintableWidgets = null;\r\n\t}\r\n\r\n\tenableRepaintEntities(entities: BaseModel<BaseEntity, BaseModelListener>[]) {\r\n\t\tthis.paintableWidgets = {};\r\n\t\tentities.forEach(entity => {\r\n\t\t\t//if a node is requested to repaint, add all of its links\r\n\t\t\tif (entity instanceof NodeModel) {\r\n\t\t\t\t_.forEach(entity.getPorts(), port => {\r\n\t\t\t\t\t_.forEach(port.getLinks(), link => {\r\n\t\t\t\t\t\tthis.paintableWidgets[link.getID()] = true;\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (entity instanceof PointModel) {\r\n\t\t\t\tthis.paintableWidgets[entity.getLink().getID()] = true;\r\n\t\t\t}\r\n\r\n\t\t\tthis.paintableWidgets[entity.getID()] = true;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Checks to see if a model is locked by running through\r\n\t * its parents to see if they are locked first\r\n\t */\r\n\tisModelLocked(model: BaseEntity<BaseListener>) {\r\n\t\t//always check the diagram model\r\n\t\tif (this.diagramModel.isLocked()) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn model.isLocked();\r\n\t}\r\n\r\n\trecalculatePortsVisually() {\r\n\t\tthis.nodesRendered = false;\r\n\t\tthis.linksThatHaveInitiallyRendered = {};\r\n\t}\r\n\r\n\tcanEntityRepaint(baseModel: BaseModel<BaseEntity, BaseModelListener>) {\r\n\t\t//no rules applied, allow repaint\r\n\t\tif (this.paintableWidgets === null) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn this.paintableWidgets[baseModel.getID()] !== undefined;\r\n\t}\r\n\r\n\tsetCanvas(canvas: Element | null) {\r\n\t\tthis.canvas = canvas;\r\n\t}\r\n\r\n\tsetDiagramModel(model: DiagramModel) {\r\n\t\tthis.diagramModel = model;\r\n\t\tthis.recalculatePortsVisually();\r\n\t}\r\n\r\n\tgetDiagramModel(): DiagramModel {\r\n\t\treturn this.diagramModel;\r\n\t}\r\n\r\n\t//!-------------- FACTORIES ------------\r\n\r\n\tgetNodeFactories(): { [s: string]: AbstractNodeFactory } {\r\n\t\treturn this.nodeFactories;\r\n\t}\r\n\r\n\tgetLinkFactories(): { [s: string]: AbstractLinkFactory } {\r\n\t\treturn this.linkFactories;\r\n\t}\r\n\r\n\tgetLabelFactories(): { [s: string]: AbstractLabelFactory } {\r\n\t\treturn this.labelFactories;\r\n\t}\r\n\r\n\tregisterLabelFactory(factory: AbstractLabelFactory) {\r\n\t\tthis.labelFactories[factory.getType()] = factory;\r\n\t\tthis.iterateListeners(listener => {\r\n\t\t\tif (listener.labelFactoriesUpdated) {\r\n\t\t\t\tlistener.labelFactoriesUpdated();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tregisterPortFactory(factory: AbstractPortFactory) {\r\n\t\tthis.portFactories[factory.getType()] = factory;\r\n\t\tthis.iterateListeners(listener => {\r\n\t\t\tif (listener.portFactoriesUpdated) {\r\n\t\t\t\tlistener.portFactoriesUpdated();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tregisterNodeFactory(factory: AbstractNodeFactory) {\r\n\t\tthis.nodeFactories[factory.getType()] = factory;\r\n\t\tthis.iterateListeners(listener => {\r\n\t\t\tif (listener.nodeFactoriesUpdated) {\r\n\t\t\t\tlistener.nodeFactoriesUpdated();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tregisterLinkFactory(factory: AbstractLinkFactory) {\r\n\t\tthis.linkFactories[factory.getType()] = factory;\r\n\t\tthis.iterateListeners(listener => {\r\n\t\t\tif (listener.linkFactoriesUpdated) {\r\n\t\t\t\tlistener.linkFactoriesUpdated();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tgetPortFactory(type: string): AbstractPortFactory {\r\n\t\tif (this.portFactories[type]) {\r\n\t\t\treturn this.portFactories[type];\r\n\t\t}\r\n\t\tthrow new Error(`cannot find factory for port of type: [${type}]`);\r\n\t}\r\n\r\n\tgetNodeFactory(type: string): AbstractNodeFactory {\r\n\t\tif (this.nodeFactories[type]) {\r\n\t\t\treturn this.nodeFactories[type];\r\n\t\t}\r\n\t\tthrow new Error(`cannot find factory for node of type: [${type}]`);\r\n\t}\r\n\r\n\tgetLinkFactory(type: string): AbstractLinkFactory {\r\n\t\tif (this.linkFactories[type]) {\r\n\t\t\treturn this.linkFactories[type];\r\n\t\t}\r\n\t\tthrow new Error(`cannot find factory for link of type: [${type}]`);\r\n\t}\r\n\r\n\tgetLabelFactory(type: string): AbstractLabelFactory {\r\n\t\tif (this.labelFactories[type]) {\r\n\t\t\treturn this.labelFactories[type];\r\n\t\t}\r\n\t\tthrow new Error(`cannot find factory for label of type: [${type}]`);\r\n\t}\r\n\r\n\tgetFactoryForNode(node: NodeModel): AbstractNodeFactory | null {\r\n\t\treturn this.getNodeFactory(node.getType());\r\n\t}\r\n\r\n\tgetFactoryForLink(link: LinkModel): AbstractLinkFactory | null {\r\n\t\treturn this.getLinkFactory(link.getType());\r\n\t}\r\n\r\n\tgetFactoryForLabel(label: LabelModel): AbstractLabelFactory | null {\r\n\t\treturn this.getLabelFactory(label.getType());\r\n\t}\r\n\r\n\tgenerateWidgetForLink(link: LinkModel): JSX.Element | null {\r\n\t\tvar linkFactory = this.getFactoryForLink(link);\r\n\t\tif (!linkFactory) {\r\n\t\t\tthrow new Error(\"Cannot find link factory for link: \" + link.getType());\r\n\t\t}\r\n\t\treturn linkFactory.generateReactWidget(this, link);\r\n\t}\r\n\r\n\tgenerateWidgetForNode(node: NodeModel): JSX.Element | null {\r\n\t\tvar nodeFactory = this.getFactoryForNode(node);\r\n\t\tif (!nodeFactory) {\r\n\t\t\tthrow new Error(\"Cannot find widget factory for node: \" + node.getType());\r\n\t\t}\r\n\t\treturn nodeFactory.generateReactWidget(this, node);\r\n\t}\r\n\r\n\tgetRelativeMousePoint(event): { x: number; y: number } {\r\n\t\tvar point = this.getRelativePoint(event.clientX, event.clientY);\r\n\t\treturn {\r\n\t\t\tx: (point.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0),\r\n\t\t\ty: (point.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0)\r\n\t\t};\r\n\t}\r\n\r\n\tgetRelativePoint(x, y) {\r\n\t\tvar canvasRect = this.canvas.getBoundingClientRect();\r\n\t\treturn { x: x - canvasRect.left, y: y - canvasRect.top };\r\n\t}\r\n\r\n\tgetNodeElement(node: NodeModel): Element {\r\n\t\tconst selector = this.canvas.querySelector(`.node[data-nodeid=\"${node.getID()}\"]`);\r\n\t\tif (selector === null) {\r\n\t\t\tthrow new Error(\"Cannot find Node element with nodeID: [\" + node.getID() + \"]\");\r\n\t\t}\r\n\t\treturn selector;\r\n\t}\r\n\r\n\tgetNodePortElement(port: PortModel): any {\r\n\t\tvar selector = this.canvas.querySelector(\r\n\t\t\t`.port[data-name=\"${port.getName()}\"][data-nodeid=\"${port.getParent().getID()}\"]`\r\n\t\t);\r\n\t\tif (selector === null) {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"Cannot find Node Port element with nodeID: [\" +\r\n\t\t\t\t\tport.getParent().getID() +\r\n\t\t\t\t\t\"] and name: [\" +\r\n\t\t\t\t\tport.getName() +\r\n\t\t\t\t\t\"]\"\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn selector;\r\n\t}\r\n\r\n\tgetPortCenter(port: PortModel) {\r\n\t\tvar sourceElement = this.getNodePortElement(port);\r\n\t\tvar sourceRect = sourceElement.getBoundingClientRect();\r\n\r\n\t\tvar rel = this.getRelativePoint(sourceRect.left, sourceRect.top);\r\n\r\n\t\treturn {\r\n\t\t\tx:\r\n\t\t\t\tsourceElement.offsetWidth / 2 +\r\n\t\t\t\t(rel.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0),\r\n\t\t\ty:\r\n\t\t\t\tsourceElement.offsetHeight / 2 +\r\n\t\t\t\t(rel.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0)\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate rectangular coordinates of the port passed in.\r\n\t */\r\n\tgetPortCoords(\r\n\t\tport: PortModel\r\n\t): {\r\n\t\tx: number;\r\n\t\ty: number;\r\n\t\twidth: number;\r\n\t\theight: number;\r\n\t} {\r\n\t\tconst sourceElement = this.getNodePortElement(port);\r\n\t\tconst sourceRect = sourceElement.getBoundingClientRect();\r\n\t\tconst canvasRect = this.canvas.getBoundingClientRect() as ClientRect;\r\n\r\n\t\treturn {\r\n\t\t\tx:\r\n\t\t\t\t(sourceRect.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0) -\r\n\t\t\t\tcanvasRect.left,\r\n\t\t\ty:\r\n\t\t\t\t(sourceRect.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0) -\r\n\t\t\t\tcanvasRect.top,\r\n\t\t\twidth: sourceRect.width,\r\n\t\t\theight: sourceRect.height\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Determine the width and height of the node passed in.\r\n\t * It currently assumes nodes have a rectangular shape, can be overriden for customised shapes.\r\n\t */\r\n\tgetNodeDimensions(node: NodeModel): { width: number; height: number } {\r\n\t\tif (!this.canvas) {\r\n\t\t\treturn {\r\n\t\t\t\twidth: 0,\r\n\t\t\t\theight: 0\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tconst nodeElement = this.getNodeElement(node);\r\n\t\tconst nodeRect = nodeElement.getBoundingClientRect();\r\n\r\n\t\treturn {\r\n\t\t\twidth: nodeRect.width,\r\n\t\t\theight: nodeRect.height\r\n\t\t};\r\n\t}\r\n\r\n\tgetMaxNumberPointsPerLink(): number {\r\n\t\treturn this.maxNumberPointsPerLink;\r\n\t}\r\n\r\n\tsetMaxNumberPointsPerLink(max: number) {\r\n\t\tthis.maxNumberPointsPerLink = max;\r\n\t}\r\n\r\n\tisSmartRoutingEnabled() {\r\n\t\treturn !!this.smartRouting;\r\n\t}\r\n\tsetSmartRoutingStatus(status: boolean) {\r\n\t\tthis.smartRouting = status;\r\n\t}\r\n\r\n\t/**\r\n\t * A representation of the canvas in the following format:\r\n\t *\r\n\t * +-----------------+\r\n\t * | 0 0 0 0 0 0 0 0 |\r\n\t * | 0 0 0 0 0 0 0 0 |\r\n\t * | 0 0 0 0 0 0 0 0 |\r\n\t * | 0 0 0 0 0 0 0 0 |\r\n\t * | 0 0 0 0 0 0 0 0 |\r\n\t * +-----------------+\r\n\t *\r\n\t * In which all walkable points are marked by zeros.\r\n\t * It uses @link{#ROUTING_SCALING_FACTOR} to reduce the matrix dimensions and improve performance.\r\n\t */\r\n\tgetCanvasMatrix(): number[][] {\r\n\t\tif (this.canvasMatrix.length === 0) {\r\n\t\t\tthis.calculateCanvasMatrix();\r\n\t\t}\r\n\r\n\t\treturn this.canvasMatrix;\r\n\t}\r\n\tcalculateCanvasMatrix() {\r\n\t\tconst {\r\n\t\t\twidth: canvasWidth,\r\n\t\t\thAdjustmentFactor,\r\n\t\t\theight: canvasHeight,\r\n\t\t\tvAdjustmentFactor\r\n\t\t} = this.calculateMatrixDimensions();\r\n\r\n\t\tthis.hAdjustmentFactor = hAdjustmentFactor;\r\n\t\tthis.vAdjustmentFactor = vAdjustmentFactor;\r\n\r\n\t\tconst matrixWidth = Math.ceil(canvasWidth / ROUTING_SCALING_FACTOR);\r\n\t\tconst matrixHeight = Math.ceil(canvasHeight / ROUTING_SCALING_FACTOR);\r\n\r\n\t\tthis.canvasMatrix = _.range(0, matrixHeight).map(() => {\r\n\t\t\treturn new Array(matrixWidth).fill(0);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * A representation of the canvas in the following format:\r\n\t *\r\n\t * +-----------------+\r\n\t * | 0 0 1 1 0 0 0 0 |\r\n\t * | 0 0 1 1 0 0 1 1 |\r\n\t * | 0 0 0 0 0 0 1 1 |\r\n\t * | 1 1 0 0 0 0 0 0 |\r\n\t * | 1 1 0 0 0 0 0 0 |\r\n\t * +-----------------+\r\n\t *\r\n\t * In which all points blocked by a node (and its ports) are\r\n\t * marked as 1; points were there is nothing (ie, free) receive 0.\r\n\t */\r\n\tgetRoutingMatrix(): number[][] {\r\n\t\tif (this.routingMatrix.length === 0) {\r\n\t\t\tthis.calculateRoutingMatrix();\r\n\t\t}\r\n\r\n\t\treturn this.routingMatrix;\r\n\t}\r\n\tcalculateRoutingMatrix(): void {\r\n\t\tconst matrix = _.cloneDeep(this.getCanvasMatrix());\r\n\r\n\t\t// nodes need to be marked as blocked points\r\n\t\tthis.markNodes(matrix);\r\n\t\t// same thing for ports\r\n\t\tthis.markPorts(matrix);\r\n\r\n\t\tthis.routingMatrix = matrix;\r\n\t}\r\n\r\n\t/**\r\n\t * The routing matrix does not have negative indexes, but elements could be negatively positioned.\r\n\t * We use the functions below to translate back and forth between these coordinates, relying on the\r\n\t * calculated values of hAdjustmentFactor and vAdjustmentFactor.\r\n\t */\r\n\ttranslateRoutingX(x: number, reverse: boolean = false) {\r\n\t\treturn x + this.hAdjustmentFactor * (reverse ? -1 : 1);\r\n\t}\r\n\ttranslateRoutingY(y: number, reverse: boolean = false) {\r\n\t\treturn y + this.vAdjustmentFactor * (reverse ? -1 : 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Despite being a long method, we simply iterate over all three collections (nodes, ports and points)\r\n\t * to find the highest X and Y dimensions, so we can build the matrix large enough to contain all elements.\r\n\t */\r\n\tcalculateMatrixDimensions = (): {\r\n\t\twidth: number;\r\n\t\thAdjustmentFactor: number;\r\n\t\theight: number;\r\n\t\tvAdjustmentFactor: number;\r\n\t} => {\r\n\t\tconst allNodesCoords = _.values(this.diagramModel.nodes).map(item => ({\r\n\t\t\tx: item.x,\r\n\t\t\twidth: item.width,\r\n\t\t\ty: item.y,\r\n\t\t\theight: item.height\r\n\t\t}));\r\n\r\n\t\tconst allLinks = _.values(this.diagramModel.links);\r\n\t\tconst allPortsCoords = _.flatMap(allLinks.map(link => [link.sourcePort, link.targetPort]))\r\n\t\t\t.filter(port => port !== null)\r\n\t\t\t.map(item => ({\r\n\t\t\t\tx: item.x,\r\n\t\t\t\twidth: item.width,\r\n\t\t\t\ty: item.y,\r\n\t\t\t\theight: item.height\r\n\t\t\t}));\r\n\t\tconst allPointsCoords = _.flatMap(allLinks.map(link => link.points)).map(item => ({\r\n\t\t\t// points don't have width/height, so let's just use 0\r\n\t\t\tx: item.x,\r\n\t\t\twidth: 0,\r\n\t\t\ty: item.y,\r\n\t\t\theight: 0\r\n\t\t}));\r\n\r\n\t\tconst canvas = this.canvas as HTMLDivElement;\r\n\t\tconst minX =\r\n\t\t\tMath.floor(\r\n\t\t\t\tMath.min(_.minBy(_.concat(allNodesCoords, allPortsCoords, allPointsCoords), item => item.x).x, 0) /\r\n\t\t\t\t\tROUTING_SCALING_FACTOR\r\n\t\t\t) * ROUTING_SCALING_FACTOR;\r\n\t\tconst maxXElement = _.maxBy(\r\n\t\t\t_.concat(allNodesCoords, allPortsCoords, allPointsCoords),\r\n\t\t\titem => item.x + item.width\r\n\t\t);\r\n\t\t// const maxX = Math.max(maxXElement.x + maxXElement.width, canvas.offsetWidth);\r\n\t\tlet maxX;\r\n\t\tif(maxXElement == undefined) {\r\n\t\t\tmaxX = Math.max(allNodesCoords[0].x + 0, canvas.offsetWidth);\r\n\t\t} else {\r\n\t\t\tmaxX = Math.max(maxXElement.x + maxXElement.width, canvas.offsetWidth);\r\n\t\t}\r\n\t\tconst minY =\r\n\t\t\tMath.floor(\r\n\t\t\t\tMath.min(_.minBy(_.concat(allNodesCoords, allPortsCoords, allPointsCoords), item => item.y).y, 0) /\r\n\t\t\t\t\tROUTING_SCALING_FACTOR\r\n\t\t\t) * ROUTING_SCALING_FACTOR;\r\n\t\tconst maxYElement = _.maxBy(\r\n\t\t\t_.concat(allNodesCoords, allPortsCoords, allPointsCoords),\r\n\t\t\titem => item.y + item.height\r\n\t\t);\r\n\t\t// const maxY = Math.max(maxYElement.y + maxYElement.height, canvas.offsetHeight);\r\n\t\tlet maxY;\r\n\t\tif(maxYElement == undefined) {\r\n\t\t\tmaxY = Math.max(allNodesCoords[0].y + 0, canvas.offsetHeight);\r\n\t\t} else {\r\n\t\t\tmaxY = Math.max(maxYElement.y + maxYElement.height, canvas.offsetHeight);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\twidth: Math.ceil(Math.abs(minX) + maxX),\r\n\t\t\thAdjustmentFactor: Math.abs(minX) / ROUTING_SCALING_FACTOR + 1,\r\n\t\t\theight: Math.ceil(Math.abs(minY) + maxY),\r\n\t\t\tvAdjustmentFactor: Math.abs(minY) / ROUTING_SCALING_FACTOR + 1\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * Updates (by reference) where nodes will be drawn on the matrix passed in.\r\n\t */\r\n\tmarkNodes = (matrix: number[][]): void => {\r\n\t\t_.values(this.diagramModel.nodes).forEach(node => {\r\n\t\t\tconst startX = Math.floor(node.x / ROUTING_SCALING_FACTOR);\r\n\t\t\tconst endX = Math.ceil((node.x + node.width) / ROUTING_SCALING_FACTOR);\r\n\t\t\tconst startY = Math.floor(node.y / ROUTING_SCALING_FACTOR);\r\n\t\t\tconst endY = Math.ceil((node.y + node.height) / ROUTING_SCALING_FACTOR);\r\n\r\n\t\t\tfor (let x = startX - 1; x <= endX + 1; x++) {\r\n\t\t\t\tfor (let y = startY - 1; y < endY + 1; y++) {\r\n\t\t\t\t\tthis.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Updates (by reference) where ports will be drawn on the matrix passed in.\r\n\t */\r\n\tmarkPorts = (matrix: number[][]): void => {\r\n\t\tconst allElements = _.flatMap(\r\n\t\t\t_.values(this.diagramModel.links).map(link => [].concat(link.sourcePort, link.targetPort))\r\n\t\t);\r\n\t\tallElements.filter(port => port !== null).forEach(port => {\r\n\t\t\tconst startX = Math.floor(port.x / ROUTING_SCALING_FACTOR);\r\n\t\t\tconst endX = Math.ceil((port.x + port.width) / ROUTING_SCALING_FACTOR);\r\n\t\t\tconst startY = Math.floor(port.y / ROUTING_SCALING_FACTOR);\r\n\t\t\tconst endY = Math.ceil((port.y + port.height) / ROUTING_SCALING_FACTOR);\r\n\r\n\t\t\tfor (let x = startX - 1; x <= endX + 1; x++) {\r\n\t\t\t\tfor (let y = startY - 1; y < endY + 1; y++) {\r\n\t\t\t\t\tthis.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\tmarkMatrixPoint = (matrix: number[][], x: number, y: number) => {\r\n\t\tif (matrix[y] !== undefined && matrix[y][x] !== undefined) {\r\n\t\t\tmatrix[y][x] = 1;\r\n\t\t}\r\n\t};\r\n\r\n\tzoomToFit() {\r\n\t\tconst xFactor = this.canvas.clientWidth / this.canvas.scrollWidth;\r\n\t\tconst yFactor = this.canvas.clientHeight / this.canvas.scrollHeight;\r\n\t\tconst zoomFactor = xFactor < yFactor ? xFactor : yFactor;\r\n\r\n\t\tthis.diagramModel.setZoomLevel(this.diagramModel.getZoomLevel() * zoomFactor);\r\n\t\tthis.diagramModel.setOffset(0, 0);\r\n\t\tthis.repaintCanvas();\r\n\t}\r\n}\r\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; })();\n\nvar sq = function sq(x) {\n  return x * x;\n};\n\nvar distPointToPoint = function distPointToPoint(_ref, _ref3) {\n  var _ref2 = _slicedToArray(_ref, 2);\n\n  var ax = _ref2[0];\n  var ay = _ref2[1];\n\n  var _ref32 = _slicedToArray(_ref3, 2);\n\n  var bx = _ref32[0];\n  var by = _ref32[1];\n  return Math.sqrt(sq(ax - bx) + sq(ay - by));\n};\n\nvar distPointToParabol = function distPointToParabol(a, f) {\n  var p = distPointToPoint(a, f);\n\n  return p == 0 ? Infinity : sq(p) / (2 * Math.abs(a[1] - f[1]));\n};\n\nvar circumCenter = function circumCenter(a, b, c) {\n  var d = (a[0] - c[0]) * (b[1] - c[1]) - (b[0] - c[0]) * (a[1] - c[1]);\n\n  if (d == 0) return [Infinity, Infinity];\n\n  var xc = (((a[0] - c[0]) * (a[0] + c[0]) + (a[1] - c[1]) * (a[1] + c[1])) / 2 * (b[1] - c[1]) - ((b[0] - c[0]) * (b[0] + c[0]) + (b[1] - c[1]) * (b[1] + c[1])) / 2 * (a[1] - c[1])) / d;\n  var yc = (((b[0] - c[0]) * (b[0] + c[0]) + (b[1] - c[1]) * (b[1] + c[1])) / 2 * (a[0] - c[0]) - ((a[0] - c[0]) * (a[0] + c[0]) + (a[1] - c[1]) * (a[1] + c[1])) / 2 * (b[0] - c[0])) / d;\n  return [xc, yc];\n};\n\nvar parabolsCrossX = function parabolsCrossX(fa, fb, q) {\n  if (fa[1] === fb[1]) return [(fa[0] + fb[0]) / 2, (fa[0] + fb[0]) / 2];\n\n  var s1 = (fa[1] * fb[0] - fa[0] * fb[1] + fa[0] * q - fb[0] * q + Math.sqrt((fa[0] * fa[0] + fa[1] * fa[1] - 2 * fa[0] * fb[0] + fb[0] * fb[0] - 2 * fa[1] * fb[1] + fb[1] * fb[1]) * (fa[1] * fb[1] - fa[1] * q - fb[1] * q + q * q))) / (fa[1] - fb[1]);\n  var s2 = (fa[1] * fb[0] - fa[0] * fb[1] + fa[0] * q - fb[0] * q - Math.sqrt((fa[0] * fa[0] + fa[1] * fa[1] - 2 * fa[0] * fb[0] + fb[0] * fb[0] - 2 * fa[1] * fb[1] + fb[1] * fb[1]) * (fa[1] * fb[1] - fa[1] * q - fb[1] * q + q * q))) / (fa[1] - fb[1]);\n\n  return s1 < s2 ? [s1, s2] : [s2, s1];\n};\n\nvar doHalflinesCross = function doHalflinesCross(sa, sb) {\n  var approx = arguments.length <= 2 || arguments[2] === undefined ? 1e-10 : arguments[2];\n  //sa, sb are Segment instance\n  var dx = sb.ps[0] - sa.ps[0];\n  var dy = sb.ps[1] - sa.ps[1];\n\n  if (sa.m == Infinity) return sa.hp * (sb.m * dx - dy) <= approx && sb.vec[0] * dx <= approx;\n  if (sb.m == Infinity) return sb.hp * (sa.m * dx - dy) >= -approx && sa.vec[0] * dx >= -approx;\n\n  var det = sb.vec[0] * sa.vec[1] - sb.vec[1] * sa.vec[0];\n\n  if (det === 0) return false;\n\n  var u = (dy * sb.vec[0] - dx * sb.vec[1]) / det;\n  var v = (dy * sa.vec[0] - dx * sa.vec[1]) / det;\n\n  return u >= -approx && v >= approx || u >= approx && v >= -approx;\n};\n\nvar matrixTransform = function matrixTransform(points, matrix) {\n  return points.map(function (point) {\n    return {\n      x: point.x * matrix[0] + point.y * matrix[2] + matrix[4],\n      y: point.x * matrix[1] + point.y * matrix[3] + matrix[5]\n    };\n  });\n};\n\nvar transformEllipse = function transformEllipse(rx, ry, ax, m) {\n  var torad = Math.PI / 180;\n  var epsilon = 0.0000000001;\n\n  var c = Math.cos(ax * torad),\n      s = Math.sin(ax * torad);\n  var ma = [rx * (m[0] * c + m[2] * s), rx * (m[1] * c + m[3] * s), ry * (-m[0] * s + m[2] * c), ry * (-m[1] * s + m[3] * c)];\n\n  var J = ma[0] * ma[0] + ma[2] * ma[2],\n      K = ma[1] * ma[1] + ma[3] * ma[3];\n\n  var D = ((ma[0] - ma[3]) * (ma[0] - ma[3]) + (ma[2] + ma[1]) * (ma[2] + ma[1])) * ((ma[0] + ma[3]) * (ma[0] + ma[3]) + (ma[2] - ma[1]) * (ma[2] - ma[1]));\n\n  var JK = (J + K) / 2;\n\n  if (D < epsilon * JK) {\n    return {\n      rx: Math.sqrt(JK),\n      ry: Math.sqrt(JK),\n      ax: 0,\n      isDegenerate: false\n    };\n  }\n\n  var L = ma[0] * ma[1] + ma[2] * ma[3];\n  D = Math.sqrt(D);\n\n  var l1 = JK + D / 2,\n      l2 = JK - D / 2;\n\n  var newAx = undefined,\n      newRx = undefined,\n      newRy = undefined;\n  newAx = Math.abs(L) < epsilon && Math.abs(l1 - K) < epsilon ? 90 : Math.atan(Math.abs(L) > Math.abs(l1 - K) ? (l1 - J) / L : L / (l1 - K)) * 180 / Math.PI;\n\n  if (newAx >= 0) {\n    newRx = Math.sqrt(l1);\n    newRy = Math.sqrt(l2);\n  } else {\n    newAx += 90;\n    newRx = Math.sqrt(l2);\n    newRy = Math.sqrt(l1);\n  }\n\n  return {\n    rx: newRx,\n    ry: newRy,\n    ax: newAx,\n    isDegenerate: newRx < epsilon * newRy || newRy < epsilon * newRx\n  };\n};\n\nexports[\"default\"] = { distPointToPoint: distPointToPoint, distPointToParabol: distPointToParabol, circumCenter: circumCenter,\n  parabolsCrossX: parabolsCrossX, doHalflinesCross: doHalflinesCross, matrixTransform: matrixTransform, transformEllipse: transformEllipse };\nmodule.exports = exports[\"default\"];","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nvar _geom = require('./geom');\n\nvar Path = function Path(init) {\n  var _instructions = init || [];\n\n  var push = function push(arr, el) {\n    var copy = arr.slice(0, arr.length);\n    copy.push(el);\n    return copy;\n  };\n\n  var areEqualPoints = function areEqualPoints(_ref, _ref3) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var a1 = _ref2[0];\n    var b1 = _ref2[1];\n\n    var _ref32 = _slicedToArray(_ref3, 2);\n\n    var a2 = _ref32[0];\n    var b2 = _ref32[1];\n    return a1 === a2 && b1 === b2;\n  };\n\n  var trimZeros = function trimZeros(string, char) {\n    var l = string.length;\n    while (string.charAt(l - 1) === '0') {\n      l = l - 1;\n    }\n    if (string.charAt(l - 1) === '.') {\n      l = l - 1;\n    }\n    return string.substr(0, l);\n  };\n\n  var round = function round(number, digits) {\n    var str = number.toFixed(digits);\n    return trimZeros(str);\n  };\n\n  var printInstrunction = function printInstrunction(_ref4) {\n    var command = _ref4.command;\n    var params = _ref4.params;\n\n    var numbers = params.map(function (param) {\n      return round(param, 6);\n    });\n    return command + ' ' + numbers.join(' ');\n  };\n\n  var point = function point(_ref5, prev) {\n    var command = _ref5.command;\n    var params = _ref5.params;\n\n    switch (command) {\n      case 'M':\n        return [params[0], params[1]];\n      case 'L':\n        return [params[0], params[1]];\n      case 'H':\n        return [params[0], prev[1]];\n      case 'V':\n        return [prev[0], params[0]];\n      case 'Z':\n        return null;\n      case 'C':\n        return [params[4], params[5]];\n      case 'S':\n        return [params[2], params[3]];\n      case 'Q':\n        return [params[2], params[3]];\n      case 'T':\n        return [params[0], params[1]];\n      case 'A':\n        return [params[5], params[6]];\n    }\n  };\n\n  var transformParams = function transformParams(instruction, matrix, prev) {\n    var p = instruction.params;\n\n    var transformer = {\n      'V': function V(instruction, matrix, prev) {\n        var pts = [{ x: prev[0], y: p[1] }];\n        var newPts = (0, _geom.matrixTransform)(pts, matrix);\n        if (newPts[0].x === (0, _geom.matrixTransform)([{ x: prev[0], y: prev[1] }])[0].x) {\n          return {\n            command: 'V',\n            params: [newPts[0].y]\n          };\n        } else {\n          return {\n            command: 'L',\n            params: [newPts[0].x, newPts[0].y]\n          };\n        }\n      },\n      'H': function H(instruction, matrix, prev) {\n        var pts = [{ x: p[0], y: prev[1] }];\n        var newPts = (0, _geom.matrixTransform)(pts, matrix);\n        if (newPts[0].y === (0, _geom.matrixTransform)([{ x: prev[0], y: prev[1] }])[0].y) {\n          return {\n            command: 'H',\n            params: [newPts[0].x]\n          };\n        } else {\n          return {\n            command: 'L',\n            params: [newPts[0].x, newPts[0].y]\n          };\n        }\n      },\n      'A': function A(instruction, matrix, prev) {\n        // transform rx, ry, and x-axis rotation\n        var r = (0, _geom.transformEllipse)(p[0], p[1], p[2], matrix);\n\n        var sweepFlag = p[4];\n        if (matrix[0] * matrix[3] - matrix[1] * matrix[2] < 0) {\n          sweepFlag = sweepFlag ? '0' : '1';\n        }\n\n        // transform endpoint\n        var pts = [{ x: p[5], y: p[6] }];\n        var newPts = (0, _geom.matrixTransform)(pts, matrix);\n\n        if (r.isDegenerate) {\n          return {\n            command: 'L',\n            params: [newPts[0].x, newPts[0].y]\n          };\n        } else {\n          return {\n            command: 'A',\n            params: [r.rx, r.ry, r.ax, p[3], sweepFlag, newPts[0].x, newPts[0].y]\n          };\n        }\n      },\n      'C': function C(instruction, matrix, prev) {\n        var pts = [{ x: p[0], y: p[1] }, { x: p[2], y: p[3] }, { x: p[4], y: p[5] }];\n        var newPts = (0, _geom.matrixTransform)(pts, matrix);\n        return {\n          command: 'C',\n          params: [newPts[0].x, newPts[0].y, newPts[1].x, newPts[1].y, newPts[2].x, newPts[2].y]\n        };\n      },\n      'Z': function Z(instruction, matrix, prev) {\n        return {\n          command: 'Z',\n          params: []\n        };\n      },\n      'default': function _default(instruction, matrix, prev) {\n        var pts = [{ x: p[0], y: p[1] }];\n        var newPts = (0, _geom.matrixTransform)(pts, matrix);\n        var newParams = instruction.params.slice(0, instruction.params.length);\n        newParams.splice(0, 2, newPts[0].x, newPts[0].y);\n        return {\n          command: instruction.command,\n          params: newParams\n        };\n      }\n    };\n\n    if (transformer[instruction.command]) {\n      return transformer[instruction.command](instruction, matrix, prev);\n    } else {\n      return transformer['default'](instruction, matrix, prev);\n    }\n  };\n\n  var verbosify = function verbosify(keys, f) {\n    return function (a) {\n      var args = typeof a === 'object' ? keys.map(function (k) {\n        return a[k];\n      }) : arguments;\n      return f.apply(null, args);\n    };\n  };\n\n  var plus = function plus(instruction) {\n    return Path(push(_instructions, instruction));\n  };\n\n  return {\n    moveto: verbosify(['x', 'y'], function (x, y) {\n      return plus({\n        command: 'M',\n        params: [x, y]\n      });\n    }),\n    lineto: verbosify(['x', 'y'], function (x, y) {\n      return plus({\n        command: 'L',\n        params: [x, y]\n      });\n    }),\n    hlineto: verbosify(['x'], function (x) {\n      return plus({\n        command: 'H',\n        params: [x]\n      });\n    }),\n    vlineto: verbosify(['y'], function (y) {\n      return plus({\n        command: 'V',\n        params: [y]\n      });\n    }),\n    closepath: function closepath() {\n      return plus({\n        command: 'Z',\n        params: []\n      });\n    },\n    curveto: verbosify(['x1', 'y1', 'x2', 'y2', 'x', 'y'], function (x1, y1, x2, y2, x, y) {\n      return plus({\n        command: 'C',\n        params: [x1, y1, x2, y2, x, y]\n      });\n    }),\n    smoothcurveto: verbosify(['x2', 'y2', 'x', 'y'], function (x2, y2, x, y) {\n      return plus({\n        command: 'S',\n        params: [x2, y2, x, y]\n      });\n    }),\n    qcurveto: verbosify(['x1', 'y1', 'x', 'y'], function (x1, y1, x, y) {\n      return plus({\n        command: 'Q',\n        params: [x1, y1, x, y]\n      });\n    }),\n    smoothqcurveto: verbosify(['x', 'y'], function (x, y) {\n      return plus({\n        command: 'T',\n        params: [x, y]\n      });\n    }),\n    arc: verbosify(['rx', 'ry', 'xrot', 'largeArcFlag', 'sweepFlag', 'x', 'y'], function (rx, ry, xrot, largeArcFlag, sweepFlag, x, y) {\n      return plus({\n        command: 'A',\n        params: [rx, ry, xrot, largeArcFlag, sweepFlag, x, y]\n      });\n    }),\n    translate: verbosify(['dx', 'dy'], function () {\n      var dx = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n      var dy = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n      if (dx !== 0 || dx !== 0) {\n        var _ret = (function () {\n          var prev = [0, 0];\n          var matrix = [1, 0, 0, 1, dx, dy];\n          var newInstructions = _instructions.map(function (instruction) {\n            var p = transformParams(instruction, matrix, prev);\n            prev = point(instruction, prev);\n            return p;\n          });\n          return {\n            v: Path(newInstructions)\n          };\n        })();\n\n        if (typeof _ret === 'object') return _ret.v;\n      } else {\n        return Path(_instructions);\n      }\n    }),\n    rotate: verbosify(['angle', 'rx', 'ry'], function (angle) {\n      var rx = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n      var ry = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n\n      if (angle !== 0) {\n        var _ret2 = (function () {\n          var prev = undefined;\n          var matrix = undefined;\n          var newInstructions = _instructions;\n\n          if (rx !== 0 && ry !== 0) {\n            prev = [0, 0];\n            matrix = [1, 0, 0, 1, -rx, -ry];\n            newInstructions = newInstructions.map(function (instruction) {\n              var p = transformParams(instruction, matrix, prev);\n              prev = point(instruction, prev);\n              return p;\n            });\n          }\n\n          var rad = angle * Math.PI / 180;\n          var cos = Math.cos(rad);\n          var sin = Math.sin(rad);\n\n          prev = [0, 0];\n          matrix = [cos, sin, -sin, cos, 0, 0];\n          newInstructions = newInstructions.map(function (instruction) {\n            var p = transformParams(instruction, matrix, prev);\n            prev = point(instruction, prev);\n            return p;\n          });\n\n          if (rx !== 0 && ry !== 0) {\n            prev = [0, 0];\n            matrix = [1, 0, 0, 1, rx, ry];\n            newInstructions = newInstructions.map(function (instruction) {\n              var p = transformParams(instruction, matrix, prev);\n              prev = point(instruction, prev);\n              return p;\n            });\n          }\n\n          return {\n            v: Path(newInstructions)\n          };\n        })();\n\n        if (typeof _ret2 === 'object') return _ret2.v;\n      } else {\n        return Path(_instructions);\n      }\n    }),\n    scale: verbosify(['sx', 'sy'], function () {\n      var sx = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];\n      var sy = arguments.length <= 1 || arguments[1] === undefined ? sx : arguments[1];\n      return (function () {\n        if (sx !== 1 || sy !== 1) {\n          var _ret3 = (function () {\n            var prev = [0, 0];\n            var matrix = [sx, 0, 0, sy, 0, 0];\n            var newInstructions = _instructions.map(function (instruction) {\n              var p = transformParams(instruction, matrix, prev);\n              prev = point(instruction, prev);\n              return p;\n            });\n            return {\n              v: Path(newInstructions)\n            };\n          })();\n\n          if (typeof _ret3 === 'object') return _ret3.v;\n        } else {\n          return Path(_instructions);\n        }\n      })();\n    }),\n    shearX: verbosify(['angle'], function () {\n      var angle = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\n      if (angle !== 0) {\n        var _ret4 = (function () {\n          var prev = [0, 0];\n          var matrix = [1, 0, Math.tan(angle * Math.PI / 180), 1, 0, 0];\n          var newInstructions = _instructions.map(function (instruction) {\n            var p = transformParams(instruction, matrix, prev);\n            prev = point(instruction, prev);\n            return p;\n          });\n          return {\n            v: Path(newInstructions)\n          };\n        })();\n\n        if (typeof _ret4 === 'object') return _ret4.v;\n      } else {\n        return Path(_instructions);\n      }\n    }),\n    shearY: verbosify(['angle'], function () {\n      var angle = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\n      if (angle !== 0) {\n        var _ret5 = (function () {\n          var prev = [0, 0];\n          var matrix = [1, Math.tan(angle * Math.PI / 180), 0, 1, 0, 0];\n          var newInstructions = _instructions.map(function (instruction) {\n            var p = transformParams(instruction, matrix, prev);\n            prev = point(instruction, prev);\n            return p;\n          });\n          return {\n            v: Path(newInstructions)\n          };\n        })();\n\n        if (typeof _ret5 === 'object') return _ret5.v;\n      } else {\n        return Path(_instructions);\n      }\n    }),\n    print: function print() {\n      return _instructions.map(printInstrunction).join(' ');\n    },\n    toString: function toString() {\n      return undefined.print();\n    },\n    points: function points() {\n      var ps = [];\n      var prev = [0, 0];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _instructions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var instruction = _step.value;\n\n          var p = point(instruction, prev);\n          prev = p;\n          if (p) {\n            ps.push(p);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator['return']) {\n            _iterator['return']();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return ps;\n    },\n    instructions: function instructions() {\n      return _instructions.slice(0, _instructions.length);\n    },\n    connect: function connect(path) {\n      var ps = this.points();\n      var last = ps[ps.length - 1];\n      var first = path.points()[0];\n      var newInstructions = undefined;\n      if (_instructions[_instructions.length - 1].command !== 'Z') {\n        newInstructions = path.instructions().slice(1);\n        if (!areEqualPoints(last, first)) {\n          newInstructions.unshift({\n            command: \"L\",\n            params: first\n          });\n        }\n      } else {\n        newInstructions = path.instructions();\n      }\n      return Path(this.instructions().concat(newInstructions));\n    }\n  };\n};\n\nexports['default'] = function () {\n  return Path();\n};\n\nmodule.exports = exports['default'];","/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = require('./JumpPointFinderBase');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm which moves\r\n * diagonally only when there is at most one obstacle.\r\n */\r\nfunction JPFMoveDiagonallyIfAtMostOneObstacle(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype = new JumpPointFinderBase();\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype.constructor = JPFMoveDiagonallyIfAtMostOneObstacle;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    // check for forced neighbors\r\n    // along the diagonal\r\n    if (dx !== 0 && dy !== 0) {\r\n        if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||\r\n            (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {\r\n            return [x, y];\r\n        }\r\n        // when moving diagonally, must check for vertical/horizontal jump points\r\n        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    // horizontally/vertically\r\n    else {\r\n        if( dx !== 0 ) { // moving along x\r\n            if((grid.isWalkableAt(x + dx, y + 1) && !grid.isWalkableAt(x, y + 1)) ||\r\n               (grid.isWalkableAt(x + dx, y - 1) && !grid.isWalkableAt(x, y - 1))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n        else {\r\n            if((grid.isWalkableAt(x + 1, y + dy) && !grid.isWalkableAt(x + 1, y)) ||\r\n               (grid.isWalkableAt(x - 1, y + dy) && !grid.isWalkableAt(x - 1, y))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n    }\r\n\r\n    // moving diagonally, must make sure one of the vertical/horizontal\r\n    // neighbors is open to allow the path\r\n    if (grid.isWalkableAt(x + dx, y) || grid.isWalkableAt(x, y + dy)) {\r\n        return this._jump(x + dx, y + dy, x, y);\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFMoveDiagonallyIfAtMostOneObstacle.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        // search diagonally\r\n        if (dx !== 0 && dy !== 0) {\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + dy) || grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x - dx, y) && grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x - dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x, y - dy) && grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y - dy]);\r\n            }\r\n        }\r\n        // search horizontally/vertically\r\n        else {\r\n            if(dx === 0) {\r\n                if (grid.isWalkableAt(x, y + dy)) {\r\n                    neighbors.push([x, y + dy]);\r\n                    if (!grid.isWalkableAt(x + 1, y)) {\r\n                        neighbors.push([x + 1, y + dy]);\r\n                    }\r\n                    if (!grid.isWalkableAt(x - 1, y)) {\r\n                        neighbors.push([x - 1, y + dy]);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (grid.isWalkableAt(x + dx, y)) {\r\n                    neighbors.push([x + dx, y]);\r\n                    if (!grid.isWalkableAt(x, y + 1)) {\r\n                        neighbors.push([x + dx, y + 1]);\r\n                    }\r\n                    if (!grid.isWalkableAt(x, y - 1)) {\r\n                        neighbors.push([x + dx, y - 1]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.IfAtMostOneObstacle);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFMoveDiagonallyIfAtMostOneObstacle;\r\n","/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = require('./JumpPointFinderBase');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm which moves\r\n * diagonally only when there are no obstacles.\r\n */\r\nfunction JPFMoveDiagonallyIfNoObstacles(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFMoveDiagonallyIfNoObstacles.prototype = new JumpPointFinderBase();\r\nJPFMoveDiagonallyIfNoObstacles.prototype.constructor = JPFMoveDiagonallyIfNoObstacles;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFMoveDiagonallyIfNoObstacles.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    // check for forced neighbors\r\n    // along the diagonal\r\n    if (dx !== 0 && dy !== 0) {\r\n        // if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||\r\n            // (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {\r\n            // return [x, y];\r\n        // }\r\n        // when moving diagonally, must check for vertical/horizontal jump points\r\n        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    // horizontally/vertically\r\n    else {\r\n        if (dx !== 0) {\r\n            if ((grid.isWalkableAt(x, y - 1) && !grid.isWalkableAt(x - dx, y - 1)) ||\r\n                (grid.isWalkableAt(x, y + 1) && !grid.isWalkableAt(x - dx, y + 1))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n        else if (dy !== 0) {\r\n            if ((grid.isWalkableAt(x - 1, y) && !grid.isWalkableAt(x - 1, y - dy)) ||\r\n                (grid.isWalkableAt(x + 1, y) && !grid.isWalkableAt(x + 1, y - dy))) {\r\n                return [x, y];\r\n            }\r\n            // When moving vertically, must check for horizontal jump points\r\n            // if (this._jump(x + 1, y, x, y) || this._jump(x - 1, y, x, y)) {\r\n                // return [x, y];\r\n            // }\r\n        }\r\n    }\r\n\r\n    // moving diagonally, must make sure one of the vertical/horizontal\r\n    // neighbors is open to allow the path\r\n    if (grid.isWalkableAt(x + dx, y) && grid.isWalkableAt(x, y + dy)) {\r\n        return this._jump(x + dx, y + dy, x, y);\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFMoveDiagonallyIfNoObstacles.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        // search diagonally\r\n        if (dx !== 0 && dy !== 0) {\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + dy) && grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y + dy]);\r\n            }\r\n        }\r\n        // search horizontally/vertically\r\n        else {\r\n            var isNextWalkable;\r\n            if (dx !== 0) {\r\n                isNextWalkable = grid.isWalkableAt(x + dx, y);\r\n                var isTopWalkable = grid.isWalkableAt(x, y + 1);\r\n                var isBottomWalkable = grid.isWalkableAt(x, y - 1);\r\n\r\n                if (isNextWalkable) {\r\n                    neighbors.push([x + dx, y]);\r\n                    if (isTopWalkable) {\r\n                        neighbors.push([x + dx, y + 1]);\r\n                    }\r\n                    if (isBottomWalkable) {\r\n                        neighbors.push([x + dx, y - 1]);\r\n                    }\r\n                }\r\n                if (isTopWalkable) {\r\n                    neighbors.push([x, y + 1]);\r\n                }\r\n                if (isBottomWalkable) {\r\n                    neighbors.push([x, y - 1]);\r\n                }\r\n            }\r\n            else if (dy !== 0) {\r\n                isNextWalkable = grid.isWalkableAt(x, y + dy);\r\n                var isRightWalkable = grid.isWalkableAt(x + 1, y);\r\n                var isLeftWalkable = grid.isWalkableAt(x - 1, y);\r\n\r\n                if (isNextWalkable) {\r\n                    neighbors.push([x, y + dy]);\r\n                    if (isRightWalkable) {\r\n                        neighbors.push([x + 1, y + dy]);\r\n                    }\r\n                    if (isLeftWalkable) {\r\n                        neighbors.push([x - 1, y + dy]);\r\n                    }\r\n                }\r\n                if (isRightWalkable) {\r\n                    neighbors.push([x + 1, y]);\r\n                }\r\n                if (isLeftWalkable) {\r\n                    neighbors.push([x - 1, y]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.OnlyWhenNoObstacles);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFMoveDiagonallyIfNoObstacles;\r\n","/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = require('./JumpPointFinderBase');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm which always moves\r\n * diagonally irrespective of the number of obstacles.\r\n */\r\nfunction JPFAlwaysMoveDiagonally(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFAlwaysMoveDiagonally.prototype = new JumpPointFinderBase();\r\nJPFAlwaysMoveDiagonally.prototype.constructor = JPFAlwaysMoveDiagonally;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFAlwaysMoveDiagonally.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    // check for forced neighbors\r\n    // along the diagonal\r\n    if (dx !== 0 && dy !== 0) {\r\n        if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||\r\n            (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {\r\n            return [x, y];\r\n        }\r\n        // when moving diagonally, must check for vertical/horizontal jump points\r\n        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    // horizontally/vertically\r\n    else {\r\n        if( dx !== 0 ) { // moving along x\r\n            if((grid.isWalkableAt(x + dx, y + 1) && !grid.isWalkableAt(x, y + 1)) ||\r\n               (grid.isWalkableAt(x + dx, y - 1) && !grid.isWalkableAt(x, y - 1))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n        else {\r\n            if((grid.isWalkableAt(x + 1, y + dy) && !grid.isWalkableAt(x + 1, y)) ||\r\n               (grid.isWalkableAt(x - 1, y + dy) && !grid.isWalkableAt(x - 1, y))) {\r\n                return [x, y];\r\n            }\r\n        }\r\n    }\r\n\r\n    return this._jump(x + dx, y + dy, x, y);\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFAlwaysMoveDiagonally.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        // search diagonally\r\n        if (dx !== 0 && dy !== 0) {\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y + dy)) {\r\n                neighbors.push([x + dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x - dx, y)) {\r\n                neighbors.push([x - dx, y + dy]);\r\n            }\r\n            if (!grid.isWalkableAt(x, y - dy)) {\r\n                neighbors.push([x + dx, y - dy]);\r\n            }\r\n        }\r\n        // search horizontally/vertically\r\n        else {\r\n            if(dx === 0) {\r\n                if (grid.isWalkableAt(x, y + dy)) {\r\n                    neighbors.push([x, y + dy]);\r\n                }\r\n                if (!grid.isWalkableAt(x + 1, y)) {\r\n                    neighbors.push([x + 1, y + dy]);\r\n                }\r\n                if (!grid.isWalkableAt(x - 1, y)) {\r\n                    neighbors.push([x - 1, y + dy]);\r\n                }\r\n            }\r\n            else {\r\n                if (grid.isWalkableAt(x + dx, y)) {\r\n                    neighbors.push([x + dx, y]);\r\n                }\r\n                if (!grid.isWalkableAt(x, y + 1)) {\r\n                    neighbors.push([x + dx, y + 1]);\r\n                }\r\n                if (!grid.isWalkableAt(x, y - 1)) {\r\n                    neighbors.push([x + dx, y - 1]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.Always);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFAlwaysMoveDiagonally;\r\n","/**\r\n * @author imor / https://github.com/imor\r\n */\r\nvar JumpPointFinderBase = require('./JumpPointFinderBase');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm allowing only horizontal\r\n * or vertical movements.\r\n */\r\nfunction JPFNeverMoveDiagonally(opt) {\r\n    JumpPointFinderBase.call(this, opt);\r\n}\r\n\r\nJPFNeverMoveDiagonally.prototype = new JumpPointFinderBase();\r\nJPFNeverMoveDiagonally.prototype.constructor = JPFNeverMoveDiagonally;\r\n\r\n/**\r\n * Search recursively in the direction (parent -> child), stopping only when a\r\n * jump point is found.\r\n * @protected\r\n * @return {Array<Array<number>>} The x, y coordinate of the jump point\r\n *     found, or null if not found\r\n */\r\nJPFNeverMoveDiagonally.prototype._jump = function(x, y, px, py) {\r\n    var grid = this.grid,\r\n        dx = x - px, dy = y - py;\r\n\r\n    if (!grid.isWalkableAt(x, y)) {\r\n        return null;\r\n    }\r\n\r\n    if(this.trackJumpRecursion === true) {\r\n        grid.getNodeAt(x, y).tested = true;\r\n    }\r\n\r\n    if (grid.getNodeAt(x, y) === this.endNode) {\r\n        return [x, y];\r\n    }\r\n\r\n    if (dx !== 0) {\r\n        if ((grid.isWalkableAt(x, y - 1) && !grid.isWalkableAt(x - dx, y - 1)) ||\r\n            (grid.isWalkableAt(x, y + 1) && !grid.isWalkableAt(x - dx, y + 1))) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    else if (dy !== 0) {\r\n        if ((grid.isWalkableAt(x - 1, y) && !grid.isWalkableAt(x - 1, y - dy)) ||\r\n            (grid.isWalkableAt(x + 1, y) && !grid.isWalkableAt(x + 1, y - dy))) {\r\n            return [x, y];\r\n        }\r\n        //When moving vertically, must check for horizontal jump points\r\n        if (this._jump(x + 1, y, x, y) || this._jump(x - 1, y, x, y)) {\r\n            return [x, y];\r\n        }\r\n    }\r\n    else {\r\n        throw new Error(\"Only horizontal and vertical movements are allowed\");\r\n    }\r\n\r\n    return this._jump(x + dx, y + dy, x, y);\r\n};\r\n\r\n/**\r\n * Find the neighbors for the given node. If the node has a parent,\r\n * prune the neighbors based on the jump point search algorithm, otherwise\r\n * return all available neighbors.\r\n * @return {Array<Array<number>>} The neighbors found.\r\n */\r\nJPFNeverMoveDiagonally.prototype._findNeighbors = function(node) {\r\n    var parent = node.parent,\r\n        x = node.x, y = node.y,\r\n        grid = this.grid,\r\n        px, py, nx, ny, dx, dy,\r\n        neighbors = [], neighborNodes, neighborNode, i, l;\r\n\r\n    // directed pruning: can ignore most neighbors, unless forced.\r\n    if (parent) {\r\n        px = parent.x;\r\n        py = parent.y;\r\n        // get the normalized direction of travel\r\n        dx = (x - px) / Math.max(Math.abs(x - px), 1);\r\n        dy = (y - py) / Math.max(Math.abs(y - py), 1);\r\n\r\n        if (dx !== 0) {\r\n            if (grid.isWalkableAt(x, y - 1)) {\r\n                neighbors.push([x, y - 1]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + 1)) {\r\n                neighbors.push([x, y + 1]);\r\n            }\r\n            if (grid.isWalkableAt(x + dx, y)) {\r\n                neighbors.push([x + dx, y]);\r\n            }\r\n        }\r\n        else if (dy !== 0) {\r\n            if (grid.isWalkableAt(x - 1, y)) {\r\n                neighbors.push([x - 1, y]);\r\n            }\r\n            if (grid.isWalkableAt(x + 1, y)) {\r\n                neighbors.push([x + 1, y]);\r\n            }\r\n            if (grid.isWalkableAt(x, y + dy)) {\r\n                neighbors.push([x, y + dy]);\r\n            }\r\n        }\r\n    }\r\n    // return all neighbors\r\n    else {\r\n        neighborNodes = grid.getNeighbors(node, DiagonalMovement.Never);\r\n        for (i = 0, l = neighborNodes.length; i < l; ++i) {\r\n            neighborNode = neighborNodes[i];\r\n            neighbors.push([neighborNode.x, neighborNode.y]);\r\n        }\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\nmodule.exports = JPFNeverMoveDiagonally;\r\n","/**\r\n * @author aniero / https://github.com/aniero\r\n */\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\nvar JPFNeverMoveDiagonally = require('./JPFNeverMoveDiagonally');\r\nvar JPFAlwaysMoveDiagonally = require('./JPFAlwaysMoveDiagonally');\r\nvar JPFMoveDiagonallyIfNoObstacles = require('./JPFMoveDiagonallyIfNoObstacles');\r\nvar JPFMoveDiagonallyIfAtMostOneObstacle = require('./JPFMoveDiagonallyIfAtMostOneObstacle');\r\n\r\n/**\r\n * Path finder using the Jump Point Search algorithm\r\n * @param {Object} opt\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {DiagonalMovement} opt.diagonalMovement Condition under which diagonal\r\n *      movement will be allowed.\r\n */\r\nfunction JumpPointFinder(opt) {\r\n    opt = opt || {};\r\n    if (opt.diagonalMovement === DiagonalMovement.Never) {\r\n        return new JPFNeverMoveDiagonally(opt);\r\n    } else if (opt.diagonalMovement === DiagonalMovement.Always) {\r\n        return new JPFAlwaysMoveDiagonally(opt);\r\n    } else if (opt.diagonalMovement === DiagonalMovement.OnlyWhenNoObstacles) {\r\n        return new JPFMoveDiagonallyIfNoObstacles(opt);\r\n    } else {\r\n        return new JPFMoveDiagonallyIfAtMostOneObstacle(opt);\r\n    }\r\n}\r\n\r\nmodule.exports = JumpPointFinder;\r\n","var Util       = require('../core/Util');\r\nvar Heuristic  = require('../core/Heuristic');\r\nvar Node       = require('../core/Node');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Iterative Deeping A Star (IDA*) path-finder.\r\n *\r\n * Recursion based on:\r\n *   http://www.apl.jhu.edu/~hall/AI-Programming/IDA-Star.html\r\n *\r\n * Path retracing based on:\r\n *  V. Nageshwara Rao, Vipin Kumar and K. Ramesh\r\n *  \"A Parallel Implementation of Iterative-Deeping-A*\", January 1987.\r\n *  ftp://ftp.cs.utexas.edu/.snapshot/hourly.1/pub/AI-Lab/tech-reports/UT-AI-TR-87-46.pdf\r\n *\r\n * @author Gerard Meier (www.gerardmeier.com)\r\n *\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n * @param {number} opt.weight Weight to apply to the heuristic to allow for\r\n *     suboptimal paths, in order to speed up the search.\r\n * @param {boolean} opt.trackRecursion Whether to track recursion for\r\n *     statistical purposes.\r\n * @param {number} opt.timeLimit Maximum execution time. Use <= 0 for infinite.\r\n */\r\nfunction IDAStarFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n    this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    this.weight = opt.weight || 1;\r\n    this.trackRecursion = opt.trackRecursion || false;\r\n    this.timeLimit = opt.timeLimit || Infinity; // Default: no time limit.\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n\r\n    // When diagonal movement is allowed the manhattan heuristic is not\r\n    // admissible, it should be octile instead\r\n    if (this.diagonalMovement === DiagonalMovement.Never) {\r\n        this.heuristic = opt.heuristic || Heuristic.manhattan;\r\n    } else {\r\n        this.heuristic = opt.heuristic || Heuristic.octile;\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path. When an empty array is returned, either\r\n * no path is possible, or the maximum execution time is reached.\r\n *\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nIDAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    // Used for statistics:\r\n    var nodesVisited = 0;\r\n\r\n    // Execution time limitation:\r\n    var startTime = new Date().getTime();\r\n\r\n    // Heuristic helper:\r\n    var h = function(a, b) {\r\n        return this.heuristic(Math.abs(b.x - a.x), Math.abs(b.y - a.y));\r\n    }.bind(this);\r\n\r\n    // Step cost from a to b:\r\n    var cost = function(a, b) {\r\n        return (a.x === b.x || a.y === b.y) ? 1 : Math.SQRT2;\r\n    };\r\n\r\n    /**\r\n     * IDA* search implementation.\r\n     *\r\n     * @param {Node} The node currently expanding from.\r\n     * @param {number} Cost to reach the given node.\r\n     * @param {number} Maximum search depth (cut-off value).\r\n     * @param {Array<Array<number>>} The found route.\r\n     * @param {number} Recursion depth.\r\n     *\r\n     * @return {Object} either a number with the new optimal cut-off depth,\r\n     * or a valid node instance, in which case a path was found.\r\n     */\r\n    var search = function(node, g, cutoff, route, depth) {\r\n        nodesVisited++;\r\n\r\n        // Enforce timelimit:\r\n        if (this.timeLimit > 0 &&\r\n            new Date().getTime() - startTime > this.timeLimit * 1000) {\r\n            // Enforced as \"path-not-found\".\r\n            return Infinity;\r\n        }\r\n\r\n        var f = g + h(node, end) * this.weight;\r\n\r\n        // We've searched too deep for this iteration.\r\n        if (f > cutoff) {\r\n            return f;\r\n        }\r\n\r\n        if (node == end) {\r\n            route[depth] = [node.x, node.y];\r\n            return node;\r\n        }\r\n\r\n        var min, t, k, neighbour;\r\n\r\n        var neighbours = grid.getNeighbors(node, this.diagonalMovement);\r\n\r\n        // Sort the neighbours, gives nicer paths. But, this deviates\r\n        // from the original algorithm - so I left it out.\r\n        //neighbours.sort(function(a, b){\r\n        //    return h(a, end) - h(b, end);\r\n        //});\r\n\r\n        \r\n        /*jshint -W084 *///Disable warning: Expected a conditional expression and instead saw an assignment\r\n        for (k = 0, min = Infinity; neighbour = neighbours[k]; ++k) {\r\n        /*jshint +W084 *///Enable warning: Expected a conditional expression and instead saw an assignment\r\n            if (this.trackRecursion) {\r\n                // Retain a copy for visualisation. Due to recursion, this\r\n                // node may be part of other paths too.\r\n                neighbour.retainCount = neighbour.retainCount + 1 || 1;\r\n\r\n                if(neighbour.tested !== true) {\r\n                    neighbour.tested = true;\r\n                }\r\n            }\r\n\r\n            t = search(neighbour, g + cost(node, neighbour), cutoff, route, depth + 1);\r\n\r\n            if (t instanceof Node) {\r\n                route[depth] = [node.x, node.y];\r\n\r\n                // For a typical A* linked list, this would work:\r\n                // neighbour.parent = node;\r\n                return t;\r\n            }\r\n\r\n            // Decrement count, then determine whether it's actually closed.\r\n            if (this.trackRecursion && (--neighbour.retainCount) === 0) {\r\n                neighbour.tested = false;\r\n            }\r\n\r\n            if (t < min) {\r\n                min = t;\r\n            }\r\n        }\r\n\r\n        return min;\r\n\r\n    }.bind(this);\r\n\r\n    // Node instance lookups:\r\n    var start = grid.getNodeAt(startX, startY);\r\n    var end   = grid.getNodeAt(endX, endY);\r\n\r\n    // Initial search depth, given the typical heuristic contraints,\r\n    // there should be no cheaper route possible.\r\n    var cutOff = h(start, end);\r\n\r\n    var j, route, t;\r\n\r\n    // With an overflow protection.\r\n    for (j = 0; true; ++j) {\r\n\r\n        route = [];\r\n\r\n        // Search till cut-off depth:\r\n        t = search(start, 0, cutOff, route, 0);\r\n\r\n        // Route not possible, or not found in time limit.\r\n        if (t === Infinity) {\r\n            return [];\r\n        }\r\n\r\n        // If t is a node, it's also the end node. Route is now\r\n        // populated with a valid path to the end node.\r\n        if (t instanceof Node) {\r\n            return route;\r\n        }\r\n\r\n        // Try again, this time with a deeper cut-off. The t score\r\n        // is the closest we got to the end node.\r\n        cutOff = t;\r\n    }\r\n\r\n    // This _should_ never to be reached.\r\n    return [];\r\n};\r\n\r\nmodule.exports = IDAStarFinder;\r\n","var BiAStarFinder = require('./BiAStarFinder');\r\n\r\n/**\r\n * Bi-directional Dijkstra path-finder.\r\n * @constructor\r\n * @extends BiAStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction BiDijkstraFinder(opt) {\r\n    BiAStarFinder.call(this, opt);\r\n    this.heuristic = function(dx, dy) {\r\n        return 0;\r\n    };\r\n}\r\n\r\nBiDijkstraFinder.prototype = new BiAStarFinder();\r\nBiDijkstraFinder.prototype.constructor = BiDijkstraFinder;\r\n\r\nmodule.exports = BiDijkstraFinder;\r\n","var Util = require('../core/Util');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Bi-directional Breadth-First-Search path finder.\r\n * @constructor\r\n * @param {object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction BiBreadthFirstFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nBiBreadthFirstFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        startOpenList = [], endOpenList = [],\r\n        neighbors, neighbor, node,\r\n        diagonalMovement = this.diagonalMovement,\r\n        BY_START = 0, BY_END = 1,\r\n        i, l;\r\n\r\n    // push the start and end nodes into the queues\r\n    startOpenList.push(startNode);\r\n    startNode.opened = true;\r\n    startNode.by = BY_START;\r\n\r\n    endOpenList.push(endNode);\r\n    endNode.opened = true;\r\n    endNode.by = BY_END;\r\n\r\n    // while both the queues are not empty\r\n    while (startOpenList.length && endOpenList.length) {\r\n\r\n        // expand start open list\r\n\r\n        node = startOpenList.shift();\r\n        node.closed = true;\r\n\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened) {\r\n                // if this node has been inspected by the reversed search,\r\n                // then a path is found.\r\n                if (neighbor.by === BY_END) {\r\n                    return Util.biBacktrace(node, neighbor);\r\n                }\r\n                continue;\r\n            }\r\n            startOpenList.push(neighbor);\r\n            neighbor.parent = node;\r\n            neighbor.opened = true;\r\n            neighbor.by = BY_START;\r\n        }\r\n\r\n        // expand end open list\r\n\r\n        node = endOpenList.shift();\r\n        node.closed = true;\r\n\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            if (neighbor.closed) {\r\n                continue;\r\n            }\r\n            if (neighbor.opened) {\r\n                if (neighbor.by === BY_START) {\r\n                    return Util.biBacktrace(neighbor, node);\r\n                }\r\n                continue;\r\n            }\r\n            endOpenList.push(neighbor);\r\n            neighbor.parent = node;\r\n            neighbor.opened = true;\r\n            neighbor.by = BY_END;\r\n        }\r\n    }\r\n\r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = BiBreadthFirstFinder;\r\n","var BiAStarFinder = require('./BiAStarFinder');\r\n\r\n/**\r\n * Bi-direcitional Best-First-Search path-finder.\r\n * @constructor\r\n * @extends BiAStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n */\r\nfunction BiBestFirstFinder(opt) {\r\n    BiAStarFinder.call(this, opt);\r\n\r\n    var orig = this.heuristic;\r\n    this.heuristic = function(dx, dy) {\r\n        return orig(dx, dy) * 1000000;\r\n    };\r\n}\r\n\r\nBiBestFirstFinder.prototype = new BiAStarFinder();\r\nBiBestFirstFinder.prototype.constructor = BiBestFirstFinder;\r\n\r\nmodule.exports = BiBestFirstFinder;\r\n","var AStarFinder = require('./AStarFinder');\r\n\r\n/**\r\n * Dijkstra path-finder.\r\n * @constructor\r\n * @extends AStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction DijkstraFinder(opt) {\r\n    AStarFinder.call(this, opt);\r\n    this.heuristic = function(dx, dy) {\r\n        return 0;\r\n    };\r\n}\r\n\r\nDijkstraFinder.prototype = new AStarFinder();\r\nDijkstraFinder.prototype.constructor = DijkstraFinder;\r\n\r\nmodule.exports = DijkstraFinder;\r\n","var Util = require('../core/Util');\r\nvar DiagonalMovement = require('../core/DiagonalMovement');\r\n\r\n/**\r\n * Breadth-First-Search path finder.\r\n * @constructor\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n */\r\nfunction BreadthFirstFinder(opt) {\r\n    opt = opt || {};\r\n    this.allowDiagonal = opt.allowDiagonal;\r\n    this.dontCrossCorners = opt.dontCrossCorners;\r\n    this.diagonalMovement = opt.diagonalMovement;\r\n\r\n    if (!this.diagonalMovement) {\r\n        if (!this.allowDiagonal) {\r\n            this.diagonalMovement = DiagonalMovement.Never;\r\n        } else {\r\n            if (this.dontCrossCorners) {\r\n                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;\r\n            } else {\r\n                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Find and return the the path.\r\n * @return {Array<Array<number>>} The path, including both start and\r\n *     end positions.\r\n */\r\nBreadthFirstFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {\r\n    var openList = [],\r\n        diagonalMovement = this.diagonalMovement,\r\n        startNode = grid.getNodeAt(startX, startY),\r\n        endNode = grid.getNodeAt(endX, endY),\r\n        neighbors, neighbor, node, i, l;\r\n\r\n    // push the start pos into the queue\r\n    openList.push(startNode);\r\n    startNode.opened = true;\r\n\r\n    // while the queue is not empty\r\n    while (openList.length) {\r\n        // take the front node from the queue\r\n        node = openList.shift();\r\n        node.closed = true;\r\n\r\n        // reached the end position\r\n        if (node === endNode) {\r\n            return Util.backtrace(endNode);\r\n        }\r\n\r\n        neighbors = grid.getNeighbors(node, diagonalMovement);\r\n        for (i = 0, l = neighbors.length; i < l; ++i) {\r\n            neighbor = neighbors[i];\r\n\r\n            // skip this neighbor if it has been inspected before\r\n            if (neighbor.closed || neighbor.opened) {\r\n                continue;\r\n            }\r\n\r\n            openList.push(neighbor);\r\n            neighbor.opened = true;\r\n            neighbor.parent = node;\r\n        }\r\n    }\r\n    \r\n    // fail to find the path\r\n    return [];\r\n};\r\n\r\nmodule.exports = BreadthFirstFinder;\r\n","var AStarFinder = require('./AStarFinder');\r\n\r\n/**\r\n * Best-First-Search path-finder.\r\n * @constructor\r\n * @extends AStarFinder\r\n * @param {Object} opt\r\n * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.\r\n *     Deprecated, use diagonalMovement instead.\r\n * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching\r\n *     block corners. Deprecated, use diagonalMovement instead.\r\n * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.\r\n * @param {function} opt.heuristic Heuristic function to estimate the distance\r\n *     (defaults to manhattan).\r\n */\r\nfunction BestFirstFinder(opt) {\r\n    AStarFinder.call(this, opt);\r\n\r\n    var orig = this.heuristic;\r\n    this.heuristic = function(dx, dy) {\r\n        return orig(dx, dy) * 1000000;\r\n    };\r\n}\r\n\r\nBestFirstFinder.prototype = new AStarFinder();\r\nBestFirstFinder.prototype.constructor = BestFirstFinder;\r\n\r\nmodule.exports = BestFirstFinder;\r\n","var Node = require('./Node');\r\nvar DiagonalMovement = require('./DiagonalMovement');\r\n\r\n/**\r\n * The Grid class, which serves as the encapsulation of the layout of the nodes.\r\n * @constructor\r\n * @param {number|Array<Array<(number|boolean)>>} width_or_matrix Number of columns of the grid, or matrix\r\n * @param {number} height Number of rows of the grid.\r\n * @param {Array<Array<(number|boolean)>>} [matrix] - A 0-1 matrix\r\n *     representing the walkable status of the nodes(0 or false for walkable).\r\n *     If the matrix is not supplied, all the nodes will be walkable.  */\r\nfunction Grid(width_or_matrix, height, matrix) {\r\n    var width;\r\n\r\n    if (typeof width_or_matrix !== 'object') {\r\n        width = width_or_matrix;\r\n    } else {\r\n        height = width_or_matrix.length;\r\n        width = width_or_matrix[0].length;\r\n        matrix = width_or_matrix;\r\n    }\r\n\r\n    /**\r\n     * The number of columns of the grid.\r\n     * @type number\r\n     */\r\n    this.width = width;\r\n    /**\r\n     * The number of rows of the grid.\r\n     * @type number\r\n     */\r\n    this.height = height;\r\n\r\n    /**\r\n     * A 2D array of nodes.\r\n     */\r\n    this.nodes = this._buildNodes(width, height, matrix);\r\n}\r\n\r\n/**\r\n * Build and return the nodes.\r\n * @private\r\n * @param {number} width\r\n * @param {number} height\r\n * @param {Array<Array<number|boolean>>} [matrix] - A 0-1 matrix representing\r\n *     the walkable status of the nodes.\r\n * @see Grid\r\n */\r\nGrid.prototype._buildNodes = function(width, height, matrix) {\r\n    var i, j,\r\n        nodes = new Array(height);\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        nodes[i] = new Array(width);\r\n        for (j = 0; j < width; ++j) {\r\n            nodes[i][j] = new Node(j, i);\r\n        }\r\n    }\r\n\r\n\r\n    if (matrix === undefined) {\r\n        return nodes;\r\n    }\r\n\r\n    if (matrix.length !== height || matrix[0].length !== width) {\r\n        throw new Error('Matrix size does not fit');\r\n    }\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        for (j = 0; j < width; ++j) {\r\n            if (matrix[i][j]) {\r\n                // 0, false, null will be walkable\r\n                // while others will be un-walkable\r\n                nodes[i][j].walkable = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return nodes;\r\n};\r\n\r\n\r\nGrid.prototype.getNodeAt = function(x, y) {\r\n    return this.nodes[y][x];\r\n};\r\n\r\n\r\n/**\r\n * Determine whether the node at the given position is walkable.\r\n * (Also returns false if the position is outside the grid.)\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @return {boolean} - The walkability of the node.\r\n */\r\nGrid.prototype.isWalkableAt = function(x, y) {\r\n    return this.isInside(x, y) && this.nodes[y][x].walkable;\r\n};\r\n\r\n\r\n/**\r\n * Determine whether the position is inside the grid.\r\n * XXX: `grid.isInside(x, y)` is wierd to read.\r\n * It should be `(x, y) is inside grid`, but I failed to find a better\r\n * name for this method.\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {boolean}\r\n */\r\nGrid.prototype.isInside = function(x, y) {\r\n    return (x >= 0 && x < this.width) && (y >= 0 && y < this.height);\r\n};\r\n\r\n\r\n/**\r\n * Set whether the node on the given position is walkable.\r\n * NOTE: throws exception if the coordinate is not inside the grid.\r\n * @param {number} x - The x coordinate of the node.\r\n * @param {number} y - The y coordinate of the node.\r\n * @param {boolean} walkable - Whether the position is walkable.\r\n */\r\nGrid.prototype.setWalkableAt = function(x, y, walkable) {\r\n    this.nodes[y][x].walkable = walkable;\r\n};\r\n\r\n\r\n/**\r\n * Get the neighbors of the given node.\r\n *\r\n *     offsets      diagonalOffsets:\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 0 |   |    | 0 |   | 1 |\r\n *  +---+---+---+    +---+---+---+\r\n *  | 3 |   | 1 |    |   |   |   |\r\n *  +---+---+---+    +---+---+---+\r\n *  |   | 2 |   |    | 3 |   | 2 |\r\n *  +---+---+---+    +---+---+---+\r\n *\r\n *  When allowDiagonal is true, if offsets[i] is valid, then\r\n *  diagonalOffsets[i] and\r\n *  diagonalOffsets[(i + 1) % 4] is valid.\r\n * @param {Node} node\r\n * @param {DiagonalMovement} diagonalMovement\r\n */\r\nGrid.prototype.getNeighbors = function(node, diagonalMovement) {\r\n    var x = node.x,\r\n        y = node.y,\r\n        neighbors = [],\r\n        s0 = false, d0 = false,\r\n        s1 = false, d1 = false,\r\n        s2 = false, d2 = false,\r\n        s3 = false, d3 = false,\r\n        nodes = this.nodes;\r\n\r\n    // ↑\r\n    if (this.isWalkableAt(x, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x]);\r\n        s0 = true;\r\n    }\r\n    // →\r\n    if (this.isWalkableAt(x + 1, y)) {\r\n        neighbors.push(nodes[y][x + 1]);\r\n        s1 = true;\r\n    }\r\n    // ↓\r\n    if (this.isWalkableAt(x, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x]);\r\n        s2 = true;\r\n    }\r\n    // ←\r\n    if (this.isWalkableAt(x - 1, y)) {\r\n        neighbors.push(nodes[y][x - 1]);\r\n        s3 = true;\r\n    }\r\n\r\n    if (diagonalMovement === DiagonalMovement.Never) {\r\n        return neighbors;\r\n    }\r\n\r\n    if (diagonalMovement === DiagonalMovement.OnlyWhenNoObstacles) {\r\n        d0 = s3 && s0;\r\n        d1 = s0 && s1;\r\n        d2 = s1 && s2;\r\n        d3 = s2 && s3;\r\n    } else if (diagonalMovement === DiagonalMovement.IfAtMostOneObstacle) {\r\n        d0 = s3 || s0;\r\n        d1 = s0 || s1;\r\n        d2 = s1 || s2;\r\n        d3 = s2 || s3;\r\n    } else if (diagonalMovement === DiagonalMovement.Always) {\r\n        d0 = true;\r\n        d1 = true;\r\n        d2 = true;\r\n        d3 = true;\r\n    } else {\r\n        throw new Error('Incorrect value of diagonalMovement');\r\n    }\r\n\r\n    // ↖\r\n    if (d0 && this.isWalkableAt(x - 1, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x - 1]);\r\n    }\r\n    // ↗\r\n    if (d1 && this.isWalkableAt(x + 1, y - 1)) {\r\n        neighbors.push(nodes[y - 1][x + 1]);\r\n    }\r\n    // ↘\r\n    if (d2 && this.isWalkableAt(x + 1, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x + 1]);\r\n    }\r\n    // ↙\r\n    if (d3 && this.isWalkableAt(x - 1, y + 1)) {\r\n        neighbors.push(nodes[y + 1][x - 1]);\r\n    }\r\n\r\n    return neighbors;\r\n};\r\n\r\n\r\n/**\r\n * Get a clone of this grid.\r\n * @return {Grid} Cloned grid.\r\n */\r\nGrid.prototype.clone = function() {\r\n    var i, j,\r\n\r\n        width = this.width,\r\n        height = this.height,\r\n        thisNodes = this.nodes,\r\n\r\n        newGrid = new Grid(width, height),\r\n        newNodes = new Array(height);\r\n\r\n    for (i = 0; i < height; ++i) {\r\n        newNodes[i] = new Array(width);\r\n        for (j = 0; j < width; ++j) {\r\n            newNodes[i][j] = new Node(j, i, thisNodes[i][j].walkable);\r\n        }\r\n    }\r\n\r\n    newGrid.nodes = newNodes;\r\n\r\n    return newGrid;\r\n};\r\n\r\nmodule.exports = Grid;\r\n","module.exports = function(module) {\r\n\tif (!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif (!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n","// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  if (typeof module !== \"undefined\" && module !== null ? module.exports : void 0) {\n    module.exports = Heap;\n  } else {\n    window.Heap = Heap;\n  }\n\n}).call(this);\n","module.exports = {\r\n    'Heap'                      : require('heap'),\r\n    'Node'                      : require('./core/Node'),\r\n    'Grid'                      : require('./core/Grid'),\r\n    'Util'                      : require('./core/Util'),\r\n    'DiagonalMovement'          : require('./core/DiagonalMovement'),\r\n    'Heuristic'                 : require('./core/Heuristic'),\r\n    'AStarFinder'               : require('./finders/AStarFinder'),\r\n    'BestFirstFinder'           : require('./finders/BestFirstFinder'),\r\n    'BreadthFirstFinder'        : require('./finders/BreadthFirstFinder'),\r\n    'DijkstraFinder'            : require('./finders/DijkstraFinder'),\r\n    'BiAStarFinder'             : require('./finders/BiAStarFinder'),\r\n    'BiBestFirstFinder'         : require('./finders/BiBestFirstFinder'),\r\n    'BiBreadthFirstFinder'      : require('./finders/BiBreadthFirstFinder'),\r\n    'BiDijkstraFinder'          : require('./finders/BiDijkstraFinder'),\r\n    'IDAStarFinder'             : require('./finders/IDAStarFinder'),\r\n    'JumpPointFinder'           : require('./finders/JumpPointFinder'),\r\n};\r\n","module.exports = require('./src/PathFinding');\r\n","\r\n/**\r\n * Element prototype.\r\n */\r\n\r\nvar proto = Element.prototype;\r\n\r\n/**\r\n * Vendor function.\r\n */\r\n\r\nvar vendor = proto.matchesSelector\r\n  || proto.webkitMatchesSelector\r\n  || proto.mozMatchesSelector\r\n  || proto.msMatchesSelector\r\n  || proto.oMatchesSelector;\r\n\r\n/**\r\n * Expose `match()`.\r\n */\r\n\r\nmodule.exports = match;\r\n\r\n/**\r\n * Match `el` to `selector`.\r\n *\r\n * @param {Element} el\r\n * @param {String} selector\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nfunction match(el, selector) {\r\n  if (vendor) return vendor.call(el, selector);\r\n  var nodes = el.parentNode.querySelectorAll(selector);\r\n  for (var i = 0; i < nodes.length; ++i) {\r\n    if (nodes[i] == el) return true;\r\n  }\r\n  return false;\r\n}","var matches = require('matches-selector')\r\n\r\nmodule.exports = function (element, selector, checkYoSelf) {\r\n  var parent = checkYoSelf ? element : element.parentNode\r\n\r\n  while (parent && parent !== document) {\r\n    if (matches(parent, selector)) return parent;\r\n    parent = parent.parentNode\r\n  }\r\n}\r\n"],"sourceRoot":""}